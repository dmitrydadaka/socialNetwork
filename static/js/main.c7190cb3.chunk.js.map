{"version":3,"sources":["API/api.ts","assets/images/user.png","components/NavBar/Navbar.module.css","redux/dialogsReducer.ts","components/Users/Users.module.css","assets/images/preloader.svg","components/common/formControls/formControls.tsx","serviceWorker.js","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Friends/Friends.tsx","components/NavBar/NavBar.tsx","API/authApi.ts","components/NavBar/NavBarContainer.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","API/userApi.ts","utils/objectHelpers.ts","redux/usersReducer.ts","redux/usersSelectors.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","API/securityApi.ts","redux/authReducer.ts","components/Header/HeaderContainer.tsx","login/Login.tsx","redux/appReducer.ts","redux/friendsReducer.ts","redux/reduxStoreNew.tsx","components/sideBar/SideBarForm.tsx","hoc/withAuthRedirect.tsx","components/sideBar/sideBar.tsx","components/sideBar/SideBarContainer.tsx","App.tsx","index.tsx","validators/validators.ts","components/common/formControls/FormControls.module.css","components/common/Paginator/Paginator.module.css","components/common/Preloader/Preloader.tsx","components/Friends/Friends.module.css","components/Header/Header.module.css","API/profileApi.ts","redux/profileReducer.ts"],"names":["resultCodesEnum","resultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","module","exports","initialState","dialogs","id","name","avatar","messages","message","actions","onButtonClickEventMessageActionCreator","newPostTextInDialogs","type","dialogsReducer","state","action","newPost","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restprops","Input","createField","component","validators","placeholder","text","validate","Boolean","window","location","hostname","match","News","Music","Settings","Friends","s","src","console","log","NavBar","avatarsNew","friendsPage","avatars","map","a","k","nav","item","to","activeClassName","activeLink","NavBarContainer","compose","connect","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","paginator","onClick","filter","p","selectedPage","pageNumber","key","e","User","user","unFollow","followingInProgress","Follow","photo","photos","small","userPhoto","followed","disabled","some","status","Users","totalUsersCount","users","u","UsersAPI","getUsers","term","friend","get","then","res","data","unfollowFriends","userId","delete","followFriends","post","searchingFriends","updateObjectInArray","items","itemId","objPropName","newObjProps","isFetching","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","count","toggleIsFetching","toggleIsFollowingProgress","toGetTerm","toGetFriend","dispatch","getState","totalCount","_followUnfollow","apiFunction","actionCreator","resultCode","bind","usersReducer","getUsersSuperSelector","createSelector","usersPage","getPageSize","getTotalUsersCount","getIsFetching","getFollowingInProgress","getCurrentPage","UsersContainer","this","React","Component","Header","header","loginBlock","isAuth","login","logout","from","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","payload","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","undefined","style","formSummaryControl","loginData","CaptchaIsRequired","length","stopSubmit","_error","formData","initialized","appReducer","friendsReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","app","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","_store_","WrappedComponent","maxLength10","maxLengthCreator","SideBarReduxForm","SideBar","value","SideBarContainer","ProfileContainer","lazy","DialogsContainer","LoginDrawing","Login","fallback","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","Preloader","path","render","exact","AppContainer","withRouter","AppReactSamuraiJS","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","maxLength","preloader","profileAPI","put","photofile","FormData","append","profile","posts","likescount","deletePostActionCreator","postId","onButtonClickEventActionCreator","newPostText","updateNewPostTextActionCreator","setUserProfileAC","setStatusAC","savePhotoSuccess","errorMessageAC","getUserProfile","getStatus","errorUpdateStatusMessage","updateStatus","Swal","fire","title","icon","confirmButtonText","savePhoto","file","response","saveProfile","Error","Promise","reject"],"mappings":"uGAAA,wEAkBYA,EAKAC,EAvBZ,SAIaC,EAJb,OAIwBC,EAAMC,OAC1B,CACIC,iBAAiB,EACjBC,QAAQ,gDACRC,QAAS,CACL,UAAW,2C,SASXP,O,qBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,0BCvBZO,EAAOC,QAAU,IAA0B,kC,mBCC3CD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,sFCajFC,EAAe,CACfC,QAAS,CACL,CACIC,GAAI,EACJC,KAAM,KACNC,OAAQ,uFAEZ,CACIF,GAAI,EACJC,KAAM,SACNC,OAAQ,2GAEZ,CACIF,GAAI,EACJC,KAAM,OACNC,OAAQ,qIAEZ,CACIF,GAAI,EACJC,KAAM,OACNC,OAAQ,sGAEZ,CACIF,GAAI,EACJC,KAAM,OACNC,OAAQ,kGAEZ,CACIF,GAAI,EACJC,KAAM,QACNC,OAAQ,wGAGhBC,SAAU,CACN,CAACC,QAAS,mBAAoBJ,GAAI,GAClC,CAACI,QAAS,yBAA0BJ,GAAI,GACxC,CAACI,QAAS,qBAAsBJ,GAAI,GACpC,CAACI,QAAS,kCAAmCJ,GAAI,GACjD,CAACI,QAAS,KAAMJ,GAAI,GACpB,CAACI,QAAS,6BAA8BJ,GAAI,KAoCvCK,EAAQ,CACjBC,uCAAyC,SAACC,GAAD,MACxC,CAACC,KAAM,uCAAwCD,0BAOrCE,IAzCQ,WAAiE,IAAhEC,EAA+D,uDAAvDZ,EAAca,EAAyC,uCAInF,OAAQA,EAAOH,MACX,IAAK,uCACD,IAAII,EAAUD,EAAOJ,qBAErB,OAAO,2BACAG,GADP,IAEIP,SAAS,GAAD,mBAAKO,EAAMP,UAAX,CAAoB,CAACH,GAAI,EAAGI,QAASQ,OAiBrD,QACI,OAAOF,K,oBCpFnBd,EAAOC,QAAU,CAAC,MAAQ,uB,oBCD1BD,EAAOC,QAAU,IAA0B,uC,6QCa9BgB,EAAmC,SAAC,GAA6C,IAAD,IAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAASC,EAAe,EAAfA,SACpEC,EAAWH,GAAWC,EAC5B,OACI,6BACI,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KACjEC,GAIL,6BACKC,GAAY,8BAAOF,MAOvBM,EAAwC,SAACC,GAAW,IACrDC,EAAwCD,EAAxCC,MAA0BC,GAAcF,EAAjCT,KAAiCS,EAA3BN,SADuC,YACZM,EADY,8BAG5D,OAAQ,kBAACV,EAAgBU,EAAjB,IAA2B,8CAAcC,EAAWC,MAInDC,EAAqC,SAACH,GAAW,IAClDC,EAAwCD,EAAxCC,MAA0BC,GAAcF,EAAjCT,KAAiCS,EAA3BN,SADoC,YACTM,EADS,8BAGzD,OAAQ,kBAACV,EAAgBU,EAAjB,IAA2B,2CAAWC,EAAWC,MAStD,SAASE,EAA0CC,EACtDC,EACC5B,EAAoB6B,GAAwD,IAAzBP,EAAwB,uDAAhB,GAAIQ,EAAY,uDAAL,IACxE,OAAQ,6BACH,kBAAC,IAAD,eAAOH,UAAWA,EAAWI,SAAUH,EAAY5B,KAAMA,EACrD6B,YAAaA,GAAiBP,IAF/B,IAE0CQ,K,wCC1CjCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8ECNSC,G,OARH,SAACf,GACT,OACI,uCCMOgB,EARF,SAAChB,GACV,OACI,uCCMOiB,EARC,SAACjB,GACb,OACI,0C,iCC0BOkB,EAjBqB,SAAClB,GAEjC,OACI,6BACI,6BACI,yBAAKJ,UAAWuB,IAAExC,OAAQyC,IAAKpB,EAAMrB,UAEzC,yBAAKiB,UAAWuB,IAAEzC,MACbsB,EAAMtB,Q,iBCfvB2C,QAAQC,IAAIH,KAqBZ,ICfYtD,EAKAC,EDqCGyD,EA3BoB,SAAC,GAAkB,IAI9CC,EAJ6C,EAAhBC,YAIXC,QAAQC,KAAI,SAAAC,GAAC,OAAG,kBAAC,EAAD,CAASC,EAAGD,EAAEnD,GAAIC,KAAMkD,EAAElD,KAAMC,OAAQiD,EAAEjD,YAChF,OACI,yBAAKiB,UAAWuB,IAAEW,KACd,yBAAKlC,UAAWuB,IAAEY,MAAM,kBAAC,IAAD,CAASC,GAAI,UAAWC,gBAAiBd,IAAEe,YAA3C,cACxB,yBAAKtC,UAAWuB,IAAEY,MAAM,kBAAC,IAAD,CAASC,GAAI,UAAWC,gBAAiBd,IAAEe,YAA3C,eACxB,yBAAKtC,UAAWuB,IAAEY,MAAM,kBAAC,IAAD,CAASC,GAAI,OAAQC,gBAAiBd,IAAEe,YAAxC,WACxB,yBAAKtC,UAAWuB,IAAEY,MAAM,kBAAC,IAAD,CAASC,GAAI,QAASC,gBAAiBd,IAAEe,YAAzC,YACxB,yBAAKtC,UAAWuB,IAAEY,MAAM,kBAAC,IAAD,CAASC,GAAI,WAAYC,gBAAiBd,IAAEe,YAA5C,eACxB,yBAAKtC,UAAWuB,IAAEY,MAAM,kBAAC,IAAD,CAASC,GAAI,QAASC,gBAAiBd,IAAEe,YAAzC,YACxB,yBAAKtC,UAAWuB,IAAEY,MAAM,kBAAC,IAAD,CAASC,GAAI,UAAWC,gBAAiBd,IAAEe,YAA3C,cAExB,yBAAKtC,UAAWuB,IAAEY,MAAM,kBAAC,IAAD,CAASC,GAAI,UAAWC,gBAAiBd,IAAEe,YAA3C,IAAwD,uCAAxD,KACpB,6BACKV,M,eE1BLW,EADMC,YAA6BC,aAP7B,SAAClD,GAEnB,MAAO,CACHsC,YAAatC,EAAMsC,gBAILW,CAA4Gb,G,0DCgCnHe,EArCqB,SAAC,GAGjC,IAHmH,IAAjFC,EAAgF,EAAhFA,gBAAiBC,EAA+D,EAA/DA,SAAUC,EAAqD,EAArDA,YAAqD,IAAxCC,qBAAwC,MAA1B,SAAAC,GAAC,OAAEA,GAAuB,MAApBC,mBAAoB,MAAR,GAAQ,EAC9GC,EAAaC,KAAKC,KAAKR,EAAkBC,GACzCQ,EAAuB,GAClBC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAEf,IAAIE,EAAaL,KAAKC,KAAKF,EAAWD,GAN4E,EAO5EQ,mBAAkB,GAP0D,mBAO7GC,EAP6G,KAO9FC,EAP8F,KAQ/F,OAAhBD,IAAqBA,EAAc,GACtC,IAAIE,GAAuBF,EAAc,GAAGT,EAAY,EACpDY,EAAuBH,EAAcT,EAGzC,OAEO,yBAAKhD,UAAW6D,IAAG5D,IAAO6D,YAC3BL,EAAgB,GAClB,4BAAQM,QAAS,WAAQL,EAAiBD,EAAgB,KAA1D,QAEKL,EACIY,QAAO,SAAAC,GAAC,OAAIA,GAAKN,GAAyBM,GAAGL,KAC7C7B,KAAI,SAACkC,GACN,OAAO,0BAAMjE,UAAY6D,IAAG,eACvB5D,IAAOiE,aAAerB,IAAgBoB,GACxChE,IAAOkE,YACGC,IAAKH,EACLF,QAAS,SAACM,GACNvB,EAAcmB,KACdA,MAEvBV,EAAeE,GACb,4BAAQM,QAAS,WAAQL,EAAiBD,EAAgB,KAA1D,U,oCCOGa,EAvCgB,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,KAAKC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,oBAAqBC,EAAY,EAAZA,OAGjE,OACK,6BACO,8BACI,6BACI,kBAAC,IAAD,CAAStC,GAAI,WAAamC,EAAK1F,IAC/B,yBAAKmB,UAAWuB,IAAEoD,MAAOnD,IAA0B,MAArB+C,EAAKK,OAAOC,MAAgBN,EAAKK,OAAOC,MAAQC,QAGlF,6BACKP,EAAKQ,SACF,4BAAQC,SAAUP,EAAoBQ,MAAK,SAACpG,GAAD,OAAeA,IAAO0F,EAAK1F,MAAKkF,QAAS,WAChFS,EAASD,EAAK1F,MADlB,YAKA,4BAAQmG,SAAUP,EAAoBQ,MAAK,SAACpG,GAAD,OAAeA,IAAO0F,EAAK1F,MAAKkF,QAAS,WACpFW,EAAOH,EAAK1F,MADZ,YAOZ,8BACI,8BACI,6BAAM0F,EAAKzF,KAAX,MACA,iCAAOyF,EAAKW,OAAZ,OAEJ,8BACI,kCAAQ,sBACR,kCAAQ,uBCXjBC,EAfiB,SAAC,GAA8E,IAA7EC,EAA4E,EAA5EA,gBAAiBxC,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,cAAeuC,EAAqB,EAArBA,MAAUjF,EAAW,oFAG1G,OACI,6BACI,6BACI,kBAAC,EAAD,CAAWuC,gBAAiByC,EAAiBxC,SAAUA,EACvDC,YAAaA,EAAaC,cAAeA,KAE5CuC,EAAMtD,KAAI,SAAAuD,GAAC,OAAI,kBAAC,EAAD,CAAMf,KAAMe,EAAGlB,IAAKkB,EAAEzG,GAAI4F,oBAAqBrE,EAAMqE,oBACpEC,OAAQtE,EAAMsE,OAAQF,SAAUpE,EAAMoE,gB,+CCftCe,EAAW,CACpBC,SADoB,SACX3C,EAAqBD,EAAkB6C,EAAaC,GACzD,OAAOvH,IAASwH,IAAT,qBAAyC9C,EAAzC,kBAA8DD,EAA9D,iBAA+E6C,EAA/E,mBAA8FC,IAAUE,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SAGjIC,gBALoB,SAKJC,GACZ,OAAO7H,IAAS8H,OAAT,iBAA0BD,IAAUJ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SAE7DI,cARoB,SAQNF,GACV,OAAO7H,IAASgI,KAAT,iBAAsCH,GAAU,IAAIJ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SAG7EM,iBAZoB,SAYHX,GACb,OAAOtH,IAASwH,IAAT,gBAAsBF,IAAQG,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UC3B9CO,EAAsB,SAACC,EAAWC,EAAYC,EAAiBC,GAExE,OAAOH,EAAMvE,KAAI,SAACuD,GACd,OAAIA,EAAEkB,KAAiBD,EACZ,2BAAKjB,GAAOmB,GAEhBnB,MCYF3G,EAAe,CACxB0G,MAAO,GACPzC,SAAU,GACVwC,gBAAiB,EACjBvC,YAAa,EACb6D,YAAY,EACZjC,oBAAqB,GACrBgB,KAAK,IACLC,QAAO,GA4EExG,EAAU,CAGnByH,cAAe,SAACX,GAAD,MAAqB,CAAE3G,KAAM,kBAAmB2G,WAK/DY,gBAAiB,SAACZ,GAAD,MAAqB,CAAE3G,KAAM,oBAAqB2G,WAKnEa,SAAU,SAACxB,GAAD,MAA8B,CAAEhG,KAAM,oBAAqBgG,UAKrEyB,eAAgB,SAACjE,GAAD,MAA0B,CAAExD,KAAM,0BAA2BwD,gBAC7EkE,mBAAoB,SAAC3B,GAAD,MAA8B,CAAE/F,KAAM,8BAA+B2H,MAAO5B,IAKhG6B,iBAAkB,SAACP,GAAD,MAA0B,CAAErH,KAAM,4BAA6BqH,eAMjFQ,0BAA2B,SAACR,EAAqBV,GAAtB,MAA0C,CACjE3G,KAAM,qCACNqH,aACAV,WAEJmB,UAAW,SAAC1B,GAAD,MAAmB,CAAEpG,KAAM,qBAAsBoG,SAC5D2B,YAAa,SAAC1B,GAAD,MAAsB,CAAErG,KAAM,uBAAwBqG,YAM1DF,EAAW,WAAgF,IAA/E3C,EAA8E,uDAAhE,EAAGD,EAA6D,uCAA3C6C,EAA2C,uCAA9BC,EAA8B,uCACnG,OAAO,SAAC2B,EAAUC,GACdA,IACAD,EAASnI,EAAQ4H,eAAejE,IAChCwE,EAASnI,EAAQ+H,kBAAiB,IAClC1B,EAASC,SAAS3C,EAAaD,EAAU6C,EAAMC,GAAQE,MAAK,SAACE,GACzDuB,EAASnI,EAAQ+H,kBAAiB,IAClCI,EAASnI,EAAQ2H,SAASf,EAAKQ,QAC/Be,EAASnI,EAAQ6H,mBAAmBjB,EAAKyB,aACzCF,EAASnI,EAAQkI,aAAY,IAC7BC,EAASnI,EAAQiI,UAAU1B,SASjC+B,EAAe,uCAAG,WAAOH,EAAwBrB,EAAgByB,EAAkBC,GAAjE,SAAA1F,EAAA,6DAEpBqF,EAASnI,EAAQgI,2BAA0B,EAAMlB,IAF7B,SAICyB,EAAYzB,GAJb,OAMa,IANb,OAMPF,KAAK6B,YACdN,EAASK,EAAc1B,IAE3BqB,EAASnI,EAAQgI,2BAA0B,EAAOlB,IAT9B,2CAAH,4DAeRtB,EAAS,SAACsB,GACnB,8CAAO,WAAOqB,GAAP,SAAArF,EAAA,sEAGGwF,EAAgBH,EAAUrB,EAAQT,EAASW,cAAc0B,KAAKrC,GAAWrG,EAAQyH,eAHpF,2CAAP,uDAQSnC,GAAW,SAACwB,GACrB,8CAAO,WAAOqB,GAAP,SAAArF,EAAA,sEAGEwF,EAAgBH,EAAUrB,EAAQT,EAASQ,gBAAgB6B,KAAKrC,GAAWrG,EAAQ0H,iBAHrF,2CAAP,uDAWWiB,GAzKM,WAAkE,IAAjEtI,EAAgE,uDAAxDZ,EAAca,EAA0C,uCAClF,OAAQA,EAAOH,MAER,IAAK,kBACJ,OAAO,2BACAE,GADP,IAGI8F,MAAOgB,EAAoB9G,EAAM8F,MAAO7F,EAAOwG,OAAQ,KAAM,CAAEjB,UAAU,MASjF,IAAK,oBACD,OAAO,2BACAxF,GADP,IAGI8F,MAAOgB,EAAoB9G,EAAM8F,MAAO7F,EAAOwG,OAAQ,KAAM,CAAEjB,UAAU,MAQjF,IAAK,oBACD,OAAO,2BAAKxF,GAAZ,IAAmB8F,MAAO7F,EAAO6F,QAGrC,IAAK,0BACD,OAAO,2BAAK9F,GAAZ,IAAmBsD,YAAarD,EAAOqD,cAI3C,IAAK,8BACD,OAAO,2BAAKtD,GAAZ,IAAmB6F,gBAAiB5F,EAAOwH,QAI/C,IAAK,4BACD,OAAO,2BACAzH,GADP,IACcmH,WAAYlH,EAAOkH,aAGrC,IAAK,qCACD,OAAO,2BACAnH,GADP,IAEIkF,oBAAqBjF,EAAOkH,WAAP,sBACbnH,EAAMkF,qBADO,CACcjF,EAAOwG,SACpCzG,EAAMkF,oBAAoBT,QAAO,SAAAnF,GAAE,OAAIA,GAAMW,EAAOwG,YAGlE,IAAK,qBACD,OAAO,2BACAzG,GADP,IACckG,KAAMjG,EAAOiG,OAG/B,IAAK,uBACD,OAAO,2BACAlG,GADP,IACcmG,OAAQlG,EAAOkG,SAIjC,QACI,OAAOnG,I,UCxFNuI,GAAsBC,cANH,SAACxI,GAC7B,OAAOA,EAAMyI,UAAU3C,SAK4C,SAACA,GACpE,OAAOA,EAAMrB,QAAO,SAAAsB,GAAC,OAAE,QAGd2C,GAAY,SAAC1I,GACtB,OAAOA,EAAMyI,UAAUpF,UAEdsF,GAAmB,SAAC3I,GAC7B,OAAOA,EAAMyI,UAAU5C,iBAEd+C,GAAc,SAAC5I,GACxB,OAAOA,EAAMyI,UAAUtB,YAEd0B,GAAuB,SAAC7I,GACjC,OAAOA,EAAMyI,UAAUvD,qBAEd4D,GAAe,SAAC9I,GACzB,OAAOA,EAAMyI,UAAUnF,aCErByF,G,4MAsBFxF,cAAgB,SAACqB,GAAuB,IAAD,EACJ,EAAK/D,MAA7BwC,EAD4B,EAC5BA,SAAU6C,EADkB,EAClBA,KAAMC,EADY,EACZA,OACvB,EAAKtF,MAAMoF,SAASrB,EAAYvB,EAAS6C,EAAMC,I,kEAlBhC,MAY4B6C,KAAKnI,MAAzCyC,EAZQ,EAYRA,YAAaD,EAZL,EAYKA,SAAS6C,EAZd,EAYcA,KAAMC,EAZpB,EAYoBA,OACnC6C,KAAKnI,MAAMoF,SAAS3C,EAAaD,EAAU6C,EAAKC,K,+BAuB7C,OAAQ,oCAGH,kBAAC,EAAD,CAAON,gBAAiBmD,KAAKnI,MAAMgF,gBAC5BxC,SAAU2F,KAAKnI,MAAMwC,SACrBC,YAAa0F,KAAKnI,MAAMyC,YACxBC,cAAeyF,KAAKzF,cACpBuC,MAAOkD,KAAKnI,MAAMiF,MAClBX,OAAQ6D,KAAKnI,MAAMsE,OACnBF,SAAU+D,KAAKnI,MAAMoE,SACrBC,oBAAqB8D,KAAKnI,MAAMqE,oBAChCgB,KAAM8C,KAAKnI,MAAMqF,KACjBC,OAAQ6C,KAAKnI,MAAMsF,c,GAtDb8C,IAAMC,WA6GpBjG,eAA6BC,aA7CpB,SAAClD,GAElB,MAAO,CACN8F,MAAOyC,GAAsBvI,GAC7BqD,SAAUqF,GAAY1I,GACtB6F,gBAAiB8C,GAAmB3I,GACpCsD,YAAawF,GAAe9I,GAC5BmH,WAAYyB,GAAc5I,GAC1BkF,oBAAoB2D,GAAuB7I,GAC3CkG,KAAKlG,EAAMyI,UAAUvC,KACrBC,OAAOnG,EAAMyI,UAAUtC,UAoC3B,CACIhB,SACAF,YACAgB,aAJOhD,CAKP8F,I,oBCjHeI,GAnBkB,SAACtI,GACtC,OAGQ,4BAAQJ,UAAWuB,KAAEoH,QACjB,yBAAKnH,IAAI,4DACT,yBAAKxB,UAAWuB,KAAEqH,YACbxI,EAAMyI,OAAS,iCAAOzI,EAAM0I,MAAb,KAAqB,4BAAQ/E,QAAS3D,EAAM2I,QAAvB,WACjB,kBAAC,IAAD,CAAUC,KAAM,IAAK5G,GAAI,e,SVJrDnE,O,qBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,KAKL,IAAM+K,GAAU,WAEf,OAAO9K,IAASwH,IAAsC,WAAWC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAF5EmD,GAAU,SAIbC,EAAeC,GAAuD,IAArCC,EAAoC,wDAAhBC,EAAgB,uDAAN,KACjE,OAAOlL,IAASgI,KAAT,aAAmG,CAAE+C,QAAOC,WAAUC,aAAYC,YAAWzD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAL/JmD,GAAU,WAQf,OAAO9K,IAAS8H,OAAT,eW3BFqD,GAAc,WAEnB,OAAOnL,IAASwH,IAA+B,4BAA4BC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,S,SCY7FnH,GAAiC,CACjCqH,OAAQ,KACRkD,MAAO,KACPJ,MAAO,KACPD,QAAQ,EACRU,WAAY,MA8BHrK,GACQ,SAAC8G,EAAuBkD,EAAsBJ,EAAsBD,GAApE,MAAyF,CACtGxJ,KAAM,wBAAyBmK,QAAS,CAACxD,SAAQkD,QAAOJ,QAAOD,YAF1D3J,GAIa,SAACqK,GAAD,MAAyB,CAC3ClK,KAAM,kCAAmCmK,QAAS,CAACD,gBAiB9CE,GAAkB,yDAAgB,WAAOpC,GAAP,uBAAArF,EAAA,sEACxBiH,KADwB,cACvCS,EADuC,QAIhC/B,aAAe1J,EAAgB0L,UAAU,EACrBD,EAAO5D,KAA5BjH,EADyC,EACzCA,GAAIqK,EADqC,EACrCA,MAAOJ,EAD8B,EAC9BA,MACjBzB,EAASnI,GAAwBL,EAAIqK,EAAOJ,GAAO,KANZ,kBASpC,OAToC,2CAAhB,uDAqClBc,GAAgB,yDAAgB,WAAOvC,GAAP,iBAAArF,EAAA,sEAGtBsH,KAHsB,OAGnCxD,EAHmC,OAKnCyD,EAAazD,EAAK+D,IACxBxC,EAASnI,GAA6BqK,IANG,2CAAhB,uDAgBdO,GArGK,WAA+D,IAA9DvK,EAA6D,uDAArDZ,GAAca,EAAuC,uCAC9E,OAAQA,EAAOH,MACX,IAAK,wBACL,IAAK,kCAED,OAAO,2BACAE,GACAC,EAAOgK,SAIlB,QACI,OAAOjK,IClCbwK,G,uKAGE,OACI,kBAAC,GAAWxB,KAAKnI,W,GAJCoI,IAAMC,WAerBhG,gBANO,SAAClD,GAAD,MAAuB,CACzCsJ,OAAOtJ,EAAMyK,KAAKnB,OAClBC,MAAMvJ,EAAMyK,KAAKlB,SAIqD,CAACC,ODmFrD,yDAAgB,WAAO1B,GAAP,SAAArF,EAAA,sEACbiH,KADa,OAGD,IAHC,OAGrBnD,KAAK6B,YACdN,EAASnI,GAAwB,KAAM,KAAM,MAAM,IAJrB,2CAAhB,wDCnFPuD,CAAqEsH,I,gDC0B9EE,GAAiBC,aAA6C,CAEhEC,KAAM,SAFaD,EAlC4E,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcvK,EAAwB,EAAxBA,MAAO0J,EAAiB,EAAjBA,WAEvH,OACI,0BAAMc,SAAUD,GACX5J,aAAiCD,KAAO,CAAC+J,MAAW,QAAS,SAC7D9J,aAAiCD,KAAO,CAAC+J,MAAW,WAAY,WAAY,CAAEjL,KAAM,aACpFmB,aAAiCD,KAAO,GAAI,kBAAcgK,EAAW,CAAElL,KAAM,YAAc,eAgB3FkK,GAAc,yBAAK/H,IAAK+H,IACxBA,GAAc/I,aAAiCD,KAAO,CAAC+J,MAAW,UAAY,qBAAsB,IAEpGzK,GAAS,yBAAKG,UAAWwK,KAAMC,oBAC3B5K,GAEL,6BACI,8CAsDD4C,gBARS,SAAClD,GAAD,MAA6C,CACjEgK,WAAYhK,EAAMyK,KAAKT,WAEvBV,OAAQtJ,EAAMyK,KAAKnB,UAKiB,CAAEC,MFRrB,SAACI,EAAcC,EAC/BC,EAAoBC,GADJ,8CACyC,WAAOhC,GAAP,iBAAArF,EAAA,sEAGpCiH,GAAcC,EAAOC,EAAUC,EAAYC,GAHP,QAGtDqB,EAHsD,QAK5C/C,aAAe1J,EAAgB0L,QACzCtC,EAASoC,OAENiB,EAAU/C,aAAazJ,EAAqByM,mBAAmBtD,EAASuC,MACvE3K,EAAUyL,EAAU1L,SAAS4L,OAAS,EAAIF,EAAU1L,SAAS,GAAK,aACtEqI,EAASwD,aAAW,QAAS,CAAEC,OAAQ7L,MAVe,2CADzC,wDEQNwD,EA9BoD,SAACrC,GAQhE,OAAIA,EAAMyI,OACC,kBAAC,IAAD,CAAUzG,GAAI,aAKrB,6BAEI,qCACA,kBAAC6H,GAAD,CAAgBI,SAfP,SAACU,GAEd3K,EAAM0I,MAAMiC,EAAS7B,MAAO6B,EAAS5B,SAAU4B,EAAS3B,WAAY2B,EAAS1B,UAarCE,WAAYnJ,EAAMmJ,iBCtE9D5K,GAAe,CACfqM,aAAa,GAqBF9L,GACa,iBACvB,CAAEG,KAAM,8BAoBE4L,GAvCI,WAA+D,IAA9D1L,EAA6D,uDAAtDZ,GAAca,EAAwC,uCAC7E,OAAQA,EAAOH,MACX,IAAK,4BAED,OAAO,2BACAE,GADP,IAEIyL,aAAY,IAGpB,QACI,OAAOzL,I,mBC5BfZ,GAAa,CACbmD,QAAS,CACL,CACIjD,GAAI,EACJC,KAAM,OACNC,OAAQ,uFAEZ,CACIF,GAAI,EACJC,KAAM,QACNC,OAAQ,2GAEZ,CACIF,GAAI,EACJC,KAAM,SACNC,OAAQ,uIAgBLmM,GAHM,WAAwC,IAAvC3L,EAAsC,uDAAhCZ,GACxB,OAAOY,G,6BCnBP4L,GAAcC,YAAgB,CAC1BC,YAAaC,KACbC,YAAajM,KACbuC,YAAaqJ,GACblD,UAAWH,GACXmC,KAAMF,GACN0B,IAAIP,GACJd,KAAMsB,OAcRC,GAAmB3K,OAAO4K,sCAAwCnJ,IAElEoJ,GAAQC,YAAYV,GAAaO,GAAkBI,YAAgBC,QAGzEhL,OAAOiL,QAAUJ,GACFA,UChCf,IC4BiCK,GD5B3BC,GAAYC,aAAiB,IAoCrBC,GAAiBlC,aAA2C,CAEtEC,KAAM,eAFqBD,EAhC6D,SAAC9J,GAiBzF,OAEI,0BAAMiK,SAAUjK,EAAMgK,cAClB,6BACC5J,aAAuCD,KAAO,CAAC+J,KAAS4B,IAAc,OAAS,YAAa,KAK7F,6BACI,8CEoCDG,GA/CoB,SAAC,GAAuH,IAArHjH,EAAoH,EAApHA,gBAAiBxC,EAAmG,EAAnGA,SAAmG,IAAzFC,mBAAyF,MAA3E,EAA2E,EAAxEC,EAAwE,EAAxEA,cAAeuC,EAAyD,EAAzDA,MAA+B8B,GAA0B,EAAlD1B,KAAkD,EAA5CC,OAA4C,EAApCF,SAAoC,EAA1B2B,WAAc/G,EAAY,2HA0BtJ,OACI,6BACI,6BAAK,kBAACgM,GAAD,CAAkB/B,SANd,SAACiC,EAA6BjF,GAC3CF,EAAUmF,EAAM7G,UAaZ,6BACI,kBAAC,EAAD,CAAW9C,gBAAiByC,EAAiBxC,SAAUA,EACnDC,YAAaA,EAAaC,cAAeA,KAEhDuC,EAAMtD,KAAI,SAAAuD,GAAC,OAAI,kBAAC,EAAD,CAAMf,KAAMe,EAAGlB,IAAKkB,EAAEzG,GAAI4F,oBAAqBrE,EAAMqE,oBACjEC,OAAQtE,EAAMsE,OAAQF,SAAUpE,EAAMoE,cAAcR,QAAO,SAAA0B,GAAM,OAAEA,EAAOtF,EAAMoE,SAAS,OCrCnG+H,G,4MAaFzJ,cAAgB,SAACqB,GAAuB,IAAD,EACJ,EAAK/D,MAA7BwC,EAD4B,EAC5BA,SAAU6C,EADkB,EAClBA,KAAMC,EADY,EACZA,OACvB,EAAKtF,MAAMoF,SAASrB,EAAYvB,EAAS6C,EAAKC,I,kEAT9B,IAAD,EAG6B6C,KAAKnI,MAA1CyC,EAHQ,EAGRA,YAAaD,EAHL,EAGKA,SAAU6C,EAHf,EAGeA,KAAMC,EAHrB,EAGqBA,OACpC6C,KAAKnI,MAAMoF,SAAS3C,EAAaD,EAAS6C,EAAMC,K,+BAc7C,OAAQ,oCAGH,kBAAC,GAAD,CAASN,gBAAiBmD,KAAKnI,MAAMgF,gBAC9BxC,SAAU2F,KAAKnI,MAAMwC,SACrBC,YAAa0F,KAAKnI,MAAMyC,YACxBC,cAAeyF,KAAKzF,cACpBuC,MAAOkD,KAAKnI,MAAMiF,MAClBX,OAAQ6D,KAAKnI,MAAMsE,OACnBF,SAAU+D,KAAKnI,MAAMoE,SACrBC,oBAAqB8D,KAAKnI,MAAMqE,oBAChCgB,KAAM8C,KAAKnI,MAAMqF,KACjBC,OAAQ6C,KAAKnI,MAAMsF,OACnBF,SAAU+C,KAAKnI,MAAMoF,SACrB2B,UAAWoB,KAAKnI,MAAM+G,iB,GAtCdqB,IAAMC,WAgEtBjG,eAA6BC,aAfpB,SAAClD,GAElB,MAAO,CACN8F,MAAOyC,GAAsBvI,GAC7BqD,SAAUqF,GAAY1I,GACtB6F,gBAAiB8C,GAAmB3I,GACpCsD,YAAawF,GAAe9I,GAC5BmH,WAAYyB,GAAc5I,GAC1BkF,oBAAoB2D,GAAuB7I,GAC3CkG,KAAKlG,EAAMyI,UAAUvC,KACrBC,OAAOnG,EAAMyI,UAAUtC,UAM3B,CACIhB,SACAF,YACAgB,WACA2B,UAAUjI,EAAQiI,YALX3E,CAMP+J,IC5EFC,GAAmBhE,IAAMiE,MAAK,kBAAM,iCACpCC,GAAmBlE,IAAMiE,MAAK,kBAAM,iCAOpCE,IHE2BV,GGFDW,GHIjB,SAACxM,GACJ,OAAQ,kBAAC,WAAD,CAAUyM,SAAU,4CAC/B,kBAACZ,GAAqB7L,MGAzB0M,G,4MACFC,wBAA0B,SAAC1I,GACvB2I,MAAM,uB,kEAKNzE,KAAKnI,MAAM6M,gBACZlM,OAAOmM,iBAAiB,qBAAsB3E,KAAKwE,2B,6CAGlDhM,OAAOoM,oBAAoB,qBAAsB5E,KAAKwE,2B,+BAKtD,OAAKxE,KAAKnI,MAAM4K,YAOZ,yBAAKhL,UAAW,eAEZ,kBAAC,GAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAW,uBAKZ,kBAAC,WAAD,CAAU6M,SAAU,kBAACO,GAAA,EAAD,OAEZ,kBAAC,IAAD,CAAOC,KAAM,WAAYC,OAAQ,kBAAM,kBAACZ,GAAD,SAEvC,kBAAC,IAAD,CAAOW,KAAM,oBAAqBC,OAAQ,kBAAM,kBAACd,GAAD,SAChD,kBAAC,IAAD,CAAOa,KAAM,WAAYC,OAAQ,kBAAM,kBAACZ,GAAD,SACvC,kBAAC,IAAD,CAAOW,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,GAAD,SACrC,kBAAC,IAAD,CAAOD,KAAM,WAAYC,OAAQ,kBAEjC,kBAAC,GAAD,UAER,kBAAC,IAAD,KACS,kBAAC,IAAD,CAAOC,OAAK,EAACF,KAAM,IAAKC,OAAQ,kBAAM,kBAAC,IAAD,CAAUlL,GAAG,gBAEpD,kBAAC,IAAD,CAAOiL,KAAM,QAASC,OAAQ,kBAAM,kBAAC,EAAD,SAEpC,kBAAC,IAAD,CAAOD,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,EAAD,SACrC,kBAAC,IAAD,CAAOD,KAAM,YAAaC,OAAQ,kBAAM,kBAAC,EAAD,SAIxC,kBAAC,IAAD,CAAOD,KAAM,SAAUC,OAAQ,kBAAI,kBAACX,GAAD,SACnC,kBAAC,IAAD,CAAOU,KAAM,IAAKC,OAAQ,kBAAM,iDAEhC,kBAAC,IAAD,CAAOD,KAAM,WAAYC,OAAQ,kBAAM,kBAAC,EAAD,YAvChD,kBAACF,GAAA,EAAD,U,GAjBD3E,aAsEd+E,GAAehL,YACfiL,IACAhL,aANoB,SAAClD,GAAD,MAAyB,CAC7ByL,YAAazL,EAAMiM,IAAIR,eAKd,CAAEiC,cPhEF,kBAAK,SAAC5F,GACpBA,EAASoC,MAEb7D,MAAK,WACbyB,EAASnI,aO0DOsD,CAE6BsK,IAUjCY,GARoB,WAC/B,OACY,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAU9B,MAAOA,IACb,kBAAC4B,GAAD,SCrGpBG,IAASL,OAAO,kBAAC,GAAD,MAAsBM,SAASC,eAAe,S7BqH5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpI,MAAK,SAAAqI,GACJA,EAAaC,gBAEdC,OAAM,SAAAtO,GACL4B,QAAQ5B,MAAMA,EAAMZ,a,gC8BxI5B,oEAAO,IAAMqL,EAA6B,SAACgC,GACvC,IAAGA,EACC,MAAO,qBAGFH,EAAiB,SAACiC,GAAD,OAAwC,SAAC9B,GAEnE,GAAGA,EAAM1B,OAAOwD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCP/B3P,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,mBAAqB,2C,mBCA3HD,EAAOC,QAAU,CAAC,aAAe,gCAAgC,WAAa,gC,gCCD9E,sCASe0O,IANY,WACvB,OACI,yBAAK5L,IAAK6M,Q,mBCJlB5P,EAAOC,QAAU,CAAC,OAAS,wBAAwB,KAAO,wB,mBCA1DD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,+RCiDlD4P,EAAa,SACXtI,GACP,OAAO7H,IAASwH,IAAiB,WAAaK,GAAQJ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SAF/DwI,EAAa,SAIZtI,GACN,OAAO7H,IAASwH,IAAT,yBAAuCK,IAAUJ,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SALjEwI,EAAa,SAOTpJ,GACT,OAAO/G,IAASoQ,IAAT,iBAA6C,CAAErJ,OAAQA,IAAUU,MAAK,SAAAC,GAAG,OAAEA,EAAIC,SARjFwI,EAAa,SAUZE,GACN,IAAMzD,EAAW,IAAI0D,SAGrB,OAFA1D,EAAS2D,OAAO,QAASF,GAElBrQ,IAASoQ,IAAT,gBAAoExD,EAAU,CACjFvM,QAAS,CACL,eAAgB,0BAhBnB8P,EAAa,SAoBVK,GACR,OAAOxQ,IAASoQ,IAAT,UAAkDI,GAAS/I,MAAK,SAAAC,GAAG,OAAEA,EAAIC,S,0BC7DpFnH,EAAe,CACfiQ,MAAO,CACH,CAAE/P,GAAI,EAAGI,QAAS,mBAAoB4P,WAAY,IAClD,CAAEhQ,GAAI,EAAGI,QAAS,0CAA4C4P,WAAY,KAC1E,CAAEhQ,GAAI,EAAGI,QAAS,mBAAoB4P,WAAY,KAClD,CAAEhQ,GAAI,EAAGI,QAAS,oBAAqB4P,WAAY,KACnD,CAAEhQ,GAAI,EAAGI,QAAS,kBAAmB4P,WAAY,OAIrDF,QAAS,KACTzJ,OAAQ,GACRrF,MAAO,MA4DEX,EACb,CACI4P,wBAAyB,SAACC,GAAD,MAAqB,CAAE1P,KAAM,wBAAyB0P,WAE/EC,gCAAiC,SAACC,GAAD,MAC5B,CAAE5P,KAAK,gCAAiC4P,gBAE7CC,+BAAgC,SAACtO,GAAD,MAC3B,CAAEvB,KAjFe,+BAiFUI,QAASmB,IAGzCuO,iBAAkB,SAACR,GAAD,MAA2B,CAAEtP,KAAM,4BAA6BsP,YAElFS,YAAa,SAAClK,GAAD,MAAqB,CAAE7F,KAAM,uBAAwB6F,WAElEmK,iBAAkB,SAACzK,GAAD,MAAyB,CAAEvF,KAAO,sBAAuBuF,WAE3E0K,eAAgB,SAACzP,GAAD,MAAiB,CAAER,KAAM,0BAA2BQ,WAK3D0P,EAAiB,SAACvJ,GAAD,8CAA+B,WAAOqB,GAAP,eAAArF,EAAA,sEAExCsM,EAAsBtI,GAFkB,OAErDF,EAFqD,OAIzDuB,EAASnI,EAAQiQ,iBAAiBrJ,IAJuB,2CAA/B,uDAQjB0J,EAAY,SAACxJ,GAAD,8CAA+B,WAAOqB,GAAP,eAAArF,EAAA,sEAEnCsM,EAAqBtI,GAFc,OAEhDF,EAFgD,OAKpDuB,EAASnI,EAAQkQ,YAAYtJ,IALuB,2CAA/B,uDASZ2J,EAA2B,SAACvK,EAAgBrF,GAAjB,8CAA2C,WAAOwH,GAAP,SAAArF,EAAA,sEAE5DsM,EAAwBpJ,GAFoC,cAItEyC,YAAc1J,IAAgB0L,SAAWtC,EAASnI,EAAQoQ,eAAezP,IAJH,2CAA3C,uDAQ3B6P,EAAe,SAACxK,GAAD,8CAA+B,WAAOmC,GAAP,SAAArF,EAAA,+EAIhCsM,EAAwBpJ,GAJQ,cAM1CyC,aAAe1J,IAAgB0L,SAAWtC,EAASnI,EAAQkQ,YAAYlK,IAN7B,gDAUnDuK,EAAyBvK,EAAD,MAExByK,IAAKC,KAAK,CACNC,MAAO,SACPjP,KAAM,0BACNkP,KAAM,QACNC,kBAAkB,EAAD,KAhB8B,yDAA/B,uDAyBfC,EAAY,SAACC,GAAD,8CAA2B,WAAO5I,GAAP,eAAArF,EAAA,sEAE3BsM,EAAqB2B,GAFM,OAIf,KAF7BC,EAF4C,QAInCpK,KAAK6B,YAAoBN,EAASnI,EAAQmQ,iBAAiBa,EAASpK,KAAKA,KAAKlB,SAJ3C,2CAA3B,uDAQZuL,EAAc,SAACxB,GAAD,8CAAqC,WAAOtH,EAAUC,GAAjB,iBAAAtF,EAAA,6DACtDgE,EAASsB,IAAW0C,KAAKhE,OAD6B,SAEzCsI,EAAuBK,GAFkB,WAEtD7I,EAFsD,QAInD6B,aAAe1J,IAAgB0L,QAJoB,oBAK1C,MAAV3D,EALoD,gBAKlCqB,EAASkI,EAAevJ,IALU,6BAO9C,IAAIoK,MAAM,wBAPoC,uCAYxD/I,EAASwD,YAAW,eAAgB,CAAEC,OAAQhF,EAAK9G,SAAS,MAZJ,kBAajDqR,QAAQC,OAAOxK,EAAK9G,SAAS,KAboB,4CAArC,yDAqDZsM,IAnLQ,WAAkE,IAAjE/L,EAAgE,uDAAxDZ,EAAca,EAA0C,uCACpF,OAAQA,EAAOH,MACX,IAAK,gCAQD,IAAII,EAAUD,EAAOyP,YAErB,OAAO,2BACA1P,GADP,IAGIqP,MAAM,GAAD,mBAAMrP,EAAMqP,OAAZ,CAAmB,CAAE/P,GAAI,EAAGI,QAASQ,EAASoP,WAAY,OAWvE,IAAK,4BACD,OAAO,2BAAKtP,GAAZ,IAAmBoP,QAASnP,EAAOmP,UACvC,IAAK,uBACD,OAAO,2BAAKpP,GAAZ,IAAmB2F,OAAQ1F,EAAO0F,SACtC,IAAK,wBACD,OAAO,2BAAK3F,GAAZ,IAAmBqP,MAAOrP,EAAMqP,MAAM5K,QAAO,SAAAC,GAAC,OAAIA,EAAEpF,IAAMW,EAAOuP,YACrE,IAAM,sBACF,OAAO,2BAAKxP,GAAZ,IAAmBoP,QAAQ,2BAAMpP,EAAMoP,SAAb,IAAsB/J,OAAQpF,EAAOoF,WACnE,IAAK,0BACD,OAAO,2BAAKrF,EAAMM,OAAlB,IAAyBA,MAAOL,EAAOK,QAC3C,QAEI,OAAON,M","file":"static/js/main.c7190cb3.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {  userType } from \"../components/types/types\";\r\nimport Axios from \"axios\";\r\n\r\nexport const instance = axios.create(\r\n    {\r\n        withCredentials: true,\r\n        baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n        headers: {\r\n            \"API-KEY\": \"1dffc49c-e668-4c39-b402-3387832efdf9\"\r\n        }\r\n    }\r\n)\r\nexport type responseType<D = {}, RS = resultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RS\r\n}\r\nexport enum resultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n\r\n}\r\nexport enum resultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n\r\n}\r\nexport type getItemsType={\r\n    items:Array<userType>\r\n    error:string|null\r\n    totalCount:number\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* export type getUserAPIType={\r\n    items:{\r\n        name:string\r\n        id:number\r\n        photos:photosType\r\n        status:string\r\n        followed:boolean\r\n    }\r\n    totalCount:number,\r\n    error:any\r\n}\r\nexport const UsersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<getUserAPIType>(`users?page=${currentPage}&count=${pageSize}`).then(res=>res.data)\r\n\r\n    },\r\n    unfollowFriends(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res=>res.data)\r\n    },\r\n    followFriends(userId: number) {\r\n        return instance.post<getUserAPIType>(`follow/${userId}`, {}).then(res=>res.data)\r\n\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn(\"Obsolete method. Please, use profileAPI object!\")\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n\r\n};\r\nexport type getUserIdProfileAPIType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    aboutMe:string\r\n}\r\nexport type putStatusProfileAPIType = {\r\n    resultCode: resultCodesEnum\r\n    messages: Array<string>\r\n    data: {\r\n        status: string\r\n    }\r\n}\r\nexport type putPhotoProfileAPIType = {\r\n    data: {\r\n        photos:{\r\n\r\n        small: string\r\n        large: string\r\n        }\r\n    }\r\n    resultCode: resultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport type putProfileProfileAPIType = {\r\n    data:{\r\n\r\n        profile:profileType\r\n}\r\nresultCode: resultCodesEnum\r\nmessages: Array<string>\r\n    }\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<getUserIdProfileAPIType>(`profile/` + userId).then(res=>res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<any>(`profile/status/${userId}`).then(res=>res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<putStatusProfileAPIType>(`profile/status`, { status: status }).then(res=>res.data)\r\n    },\r\n    savePhoto(photofile: any) {\r\n        const formData = new FormData(); \r\n        formData.append(\"image\", photofile);\r\n\r\n        return instance.put<putPhotoProfileAPIType>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: any) {\r\n        return instance.put<putProfileProfileAPIType>(`profile`, profile).then(res=>res.data)\r\n    },\r\n\r\n};\r\n\r\ntype meResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n\r\n    }\r\n    resultCode: resultCodesEnum\r\n    messages: Array<string>\r\n}\r\ntype loginResponseType = {\r\n    data: {\r\n        userId: number\r\n    }\r\n    resultCode: resultCodesEnum | resultCodeForCaptcha\r\n    messages: Array<string>\r\n} */\r\n\r\n/* export const authAPI = {\r\n    me() {\r\n        return instance.get<meResponseType>(\"auth/me\").then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha = null) {\r\n        return instance.post<loginResponseType>(`auth/login`, { email, password, rememberMe, captcha }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n} */\r\n//instance.get<string>(\"auth/me\").then((res:AxiosResponse<string>)=>res.data.toUpperCase)\r\n/* export const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(\"security/get-captcha-url\");\r\n\r\n    }\r\n\r\n} */\r\n","module.exports = __webpack_public_path__ + \"static/media/user.d7a59735.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__31IqN\",\"item\":\"Navbar_item__FlENb\",\"activeLink\":\"Navbar_activeLink__2ozlJ\"};","import { InferActionsTypes } from \"./reduxStoreNew\";\r\n\r\n//const updateNewPostTextMessage = \"updateNewPostTextMessage\";\r\nconst onButtonClickEventMessage = \"SN/dialogs/onButtonClickEventMessage\";\r\ntype dialogType={\r\n    id:number,\r\n    name: string,\r\n    avatar:string\r\n}\r\ntype messageType={\r\n    id:number,\r\n    message:string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Di\",\r\n            avatar: \"https://cdn5.vectorstock.com/i/1000x1000/85/39/cartoon-man-icon-vector-14418539.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Vasily\",\r\n            avatar: \"https://www.vippng.com/png/detail/105-1058737_free-vector-smart-guy-character-vector-characters-png.png\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Egor\",\r\n            avatar: \"https://library.kissclipart.com/20181213/vuw/kissclipart-business-man-cartoon-clipart-businessperson-capita-e980109693cfe80f.jpg \"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Slav\",\r\n            avatar: \"https://img1.cgtrader.com/items/2061469/489ac341d8/man-cartoon-3d-model-max--obj-mtl-fbx-ma-mb.jpg\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Olga\",\r\n            avatar: \"https://cdn3.vectorstock.com/i/1000x1000/63/92/school-girl-cartoon-walking-vector-20296392.jpg\"\r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"Nasty\",\r\n            avatar: \"https://image.shutterstock.com/image-vector/happy-african-american-girl-cartoon-260nw-522003124.jpg\"\r\n        }\r\n    ] as Array<dialogType>,\r\n    messages: [\r\n        {message: \"Hi, how are you?\", id: 1},\r\n        {message: \"Hi, it's wonderful day\", id: 2},\r\n        {message: \"Hi, can i ask you?\", id: 3},\r\n        {message: \"Hi, go with me to play football\", id: 4},\r\n        {message: \"Hi\", id: 5},\r\n        {message: \"Hi, say your hobby, please\", id: 6}\r\n    ] as Array<messageType>\r\n\r\n}\r\nconst dialogsReducer = (state = initialState, action:actionTypes): initialStateType => {\r\n    //let stateCopy={...state, messages:[state.messages]}\r\n    //mogno prosto vynesty let stateCopy kak global a copiyu delat' vnutri action takoi glubiny kakaya est' neobhodimost'\r\n    //let stateCopy\r\n    switch (action.type) {\r\n        case \"SN/dialogs/onButtonClickEventMessage\":\r\n            let newPost = action.newPostTextInDialogs;\r\n            //stateCopy=\r\n            return {\r\n                ...state,\r\n                messages:[...state.messages,{id: 7, message: newPost}],\r\n                \r\n            };\r\n            // stateCopy.dialogs = [...state.dialogs];\r\n            // stateCopy.messages = [...state.messages];\r\n\r\n\r\n            // stateCopy.messages.push({id: 7, message: newPost});\r\n            // stateCopy.newPostTextMessage = \" \";\r\n\r\n\r\n\r\n        // case updateNewPostTextMessage:\r\n        //     // stateCopy=\r\n        //     return {...state, newPostTextInDialogs : action.body};\r\n        //     //stateCopy.newPostTextMessage = action.newPost;\r\n        // //    return stateCopy\r\n        default:\r\n            return state;\r\n    }\r\n \r\n}\r\nexport const actions={\r\n    onButtonClickEventMessageActionCreator : (newPostTextInDialogs:string) => \r\n    ({type: \"SN/dialogs/onButtonClickEventMessage\", newPostTextInDialogs} as const)  \r\n}\r\n\r\ntype actionTypes=InferActionsTypes<typeof actions>\r\nexport type initialStateType= typeof initialState\r\n\r\n// export const updateNewPostTextMessageActionCreator = (body) => ({type: updateNewPostTextMessage, body});\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__3rYv-\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.ee41e0f0.svg\";","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { fieldValidatorsType } from \"../../../validators/validators\";\r\ntype propsType = {\r\n    \r\n    meta: WrappedFieldMetaProps\r\n\r\n}\r\ntype metaType = {\r\n    touched: any,\r\n    error: any\r\n}\r\nexport const FormControl: React.FC<propsType> = ({  meta: { touched, error }, children }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div>\r\n            <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n                {children}\r\n                {/*   {React.createElement(el, {...input, ...props})}  */}\r\n                {/*   {props.types === \"input\" ? <input {...input} {...props} /> : <textarea {...input} {...props} />} */}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, children, ...restprops } = props\r\n\r\n    return (<FormControl {...props}  > <textarea {...input} {...restprops} /></FormControl>)\r\n\r\n\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, children, ...restprops } = props\r\n\r\n    return (<FormControl {...props}  > <input {...input} {...restprops} /></FormControl>)\r\n}\r\n/* type createFieldType={\r\n    component:any,\r\n    validators:number,\r\n    name:string,\r\n    placeholder:string\r\n} */\r\n\r\nexport function createField<formKeysType extends string> (component:React.FC<WrappedFieldProps>, \r\n    validators: Array<fieldValidatorsType>,\r\n     name: formKeysType, placeholder: string|undefined, props = {}, text = \" \") {\r\n   return (<div>\r\n        <Field component={component} validate={validators} name={name}\r\n            placeholder={placeholder} {...props} /> {text}\r\n    </div>)}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n\r\n\r\n//HOC\r\n/* const Element = Element => ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n      <div className={ s.formControl + \" \" + (hasError ? s.error : \"\") }>\r\n        <Element {...input} {...props} />\r\n        { hasError && <span> { meta.error } </span> }\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const Textarea = Element(\"textarea\"); */\r\n\r\n\r\n/* export const InputType = ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n            <div>\r\n                {props.types=== \"input\" ? <input {...input} {...props} /> : <textarea {...input} {...props} />}\r\n            </div>\r\n            {hasError && <span className={styles.errorText}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n} */ /* cherez props.types i dobavlenie v fields form svoystva types input ili textarea */\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport s from \"./News.module.css\"\r\n\r\n\r\nconst News= (props:any) => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default News;","import React from \"react\";\r\nimport s from \"./Music.module.css\"\r\n\r\n\r\nconst Music= (props:any) => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings= (props:any) => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n \r\n}\r\nexport default Settings;","import React from \"react\";\r\nimport { avatarsType } from \"../../redux/friendsReducer\";\r\nimport { mapStateToPropsType } from \"../Profile/MyPosts/MyPosts\";\r\nimport SideBar from \"../sideBar/sideBar\";\r\nimport s from \"./Friends.module.css\"\r\ntype propsType={\r\n    avatar?:string\r\n    name?:string\r\n    k?:number\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\nconst Friends:React.FC<propsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.avatar} src={props.avatar}  />\r\n            </div>\r\n            <div className={s.name}>\r\n                {props.name}\r\n            </div>\r\n            \r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Friends;","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Friends from \"../Friends/Friends\";\r\nimport {appStateType} from \"../../redux/reduxStoreNew\"\r\nimport { avatarsType } from \"../../redux/friendsReducer\";\r\n\r\n\r\nconsole.log(s)\r\n\r\n// let s={\r\n//     \"nav\": \"Navbar_nav__2h6Uu\",\r\n//     \"item\":\"Navbar_item__3rIFF\"\r\n//     \"activ\": \"jfkhkdhkjfh\"\r\n// }\r\n\r\n// let c1 = \"item\";\r\n// let c2 = \"active\";\r\n// \"item active\"\r\n// let classes = c1 + \" \" + c2;\r\n// let classesNew=`${c1} ${c2}`;\r\n//     `${s.item} ${s.active}`\r\ntype propsType={\r\n    avatar:string\r\n    name:string\r\n    k:number\r\n    friendsPage:{avatars:avatarsType[]}\r\n}\r\n\r\nconst NavBar:React.FC<propsType> = ({friendsPage}) =>{\r\n\r\n    let state=friendsPage;\r\n\r\n    let avatarsNew= state.avatars.map(a=> <Friends k={a.id} name={a.name} avatar={a.avatar}/>)\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}><NavLink to={\"profile\"} activeClassName={s.activeLink}> Profile </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"dialogs\"} activeClassName={s.activeLink}> Messages </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"news\"} activeClassName={s.activeLink}> News </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"Music\"} activeClassName={s.activeLink}> Music </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"settings\"} activeClassName={s.activeLink}> Settings </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"users\"} activeClassName={s.activeLink}> Users </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"sideBar\"} activeClassName={s.activeLink}> SideBar </NavLink></div>\r\n\r\n            <div className={s.item}><NavLink to={\"friends\"} activeClassName={s.activeLink}> <h3>Friends</h3> </NavLink>\r\n                <div>\r\n                    {avatarsNew}\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar;\r\n","import { instance,responseType } from \"./api\"\r\n\r\n\r\n\r\ntype meResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n\r\n\r\n}\r\ntype loginResponseType = {\r\n    userId: number\r\n}\r\nexport enum resultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n\r\n}\r\nexport enum resultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<responseType<meResponseDataType>>(\"auth/me\").then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha = null) {\r\n        return instance.post<responseType<loginResponseType, resultCodesEnum|resultCodeForCaptcha>>(`auth/login`, { email, password, rememberMe, captcha }).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport {connect} from \"react-redux\";\r\nimport { appStateType } from \"../../redux/reduxStoreNew\";\r\nimport { avatarsType, initialStateType } from \"../../redux/friendsReducer\";\r\nimport { compose } from \"redux\";\r\nexport type mapStateToPropsNavbarType={\r\n    \r\n    friendsPage:{avatars:avatarsType[]}\r\n\r\n}\r\ntype propsType={}\r\nconst mapStateToProps=(state:appStateType):mapStateToPropsNavbarType=>{\r\n\r\n    return {\r\n        friendsPage: state.friendsPage\r\n    }\r\n};\r\n\r\nconst NavBarContainer=compose<React.ComponentType>(connect<mapStateToPropsNavbarType,{},propsType,appStateType>(mapStateToProps))(NavBar);\r\nexport default  NavBarContainer;\r\n\r\n","import React, { useState, FC } from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\"\r\n\r\n\r\n\r\n\r\ntype PropsType={\r\n    totalItemsCount:number,\r\n    pageSize:number,\r\n    currentPage?:number,\r\n    onPageChanged?:(pageNumber:number)=>void,\r\n    portionSize?:number\r\n}\r\nlet Paginator:React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged=x=>x, portionSize=10}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount=Math.ceil(pagesCount/portionSize);\r\n    let [portionNumber, setPortionNumber]=useState<number >(1);\r\n    if(portionNumber===null)portionNumber=1\r\n    let leftPortionPageNumber=(portionNumber-1)*portionSize+1;\r\n    let rightPortionPageNumber=portionNumber*portionSize;\r\n\r\n\r\n    return (\r\n        \r\n           <div className={cn(styles.paginator)}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n           \r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Paginator;","import React from \"react\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport s from \"./Users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { userType } from \"../types/types\";\r\ntype propsType={\r\nuser:userType,\r\nunFollow:(userId:number)=>void,\r\nfollowingInProgress:Array<number>\r\nFollow:(userId:number)=>void,\r\n\r\n}\r\n\r\nlet User:React.FC<propsType> = ({user,unFollow, followingInProgress, Follow}) => {\r\n   \r\n\r\n    return (\r\n         <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"profile/\" + user.id}>\r\n                        <img className={s.photo} src={user.photos.small != null ? user.photos.small : userPhoto}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed ?\r\n                            <button disabled={followingInProgress.some((id:number) => id === user.id)} onClick={() => {\r\n                                unFollow(user.id)                                                        \r\n\r\n\r\n                            }}>unFollow</button> :\r\n                            <button disabled={followingInProgress.some((id:number) => id === user.id)} onClick={() => {\r\n                            Follow(user.id)}}\r\n                              \r\n\r\n                            >Follow</button>}\r\n                    </div>\r\n                    </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}  </div>\r\n                        <div> {user.status}  </div>\r\n                    </span>\r\n                    <span>\r\n                        <div>  {\"u.location.country\"}</div>\r\n                        <div>  {\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n    \r\n\r\n\r\nexport default User;","import React from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\"\r\nimport { userType } from \"../types/types\";\r\n\r\n\r\ntype PropsType={\r\ntotalUsersCount:number,\r\npageSize:number,\r\ncurrentPage:number,\r\nonPageChanged:(pageNumber:number)=>void,\r\nusers:Array<userType>,\r\nFollow:(userId:number)=>void,\r\nunFollow:(userId:number)=>void,\r\nfollowingInProgress:Array<number>,\r\nterm:string,\r\nfriend:boolean\r\n}\r\n\r\nlet Users:React.FC<PropsType> = ({totalUsersCount, pageSize, currentPage, onPageChanged, users, ...props}) => {\r\n   \r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize} \r\n                currentPage={currentPage} onPageChanged={onPageChanged} />\r\n            </div>   \r\n            {users.map(u => <User user={u} key={u.id} followingInProgress={props.followingInProgress}\r\n             Follow={props.Follow} unFollow={props.unFollow} />)}\r\n                \r\n        </div>)\r\n\r\n}\r\nexport default Users;","\r\n\r\nimport { instance,getItemsType, responseType } from \"./api\";\r\n/* export type getUserAPIType={\r\n    items:{\r\n        name:string\r\n        id:number\r\n        photos:photosType\r\n        status:string\r\n        followed:boolean\r\n    }\r\n    totalCount:number,\r\n    error:string|null\r\n} */\r\nexport const UsersAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term:string, friend:boolean) {\r\n        return instance.get<getItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}&friend=${friend}`).then(res=>res.data)\r\n\r\n    },\r\n    unfollowFriends(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res=>res.data) as Promise<responseType>\r\n    },\r\n    followFriends(userId: number) {\r\n        return instance.post<responseType>(`follow/${userId}`, {}).then(res=>res.data)\r\n\r\n    },\r\n    searchingFriends(term: string) {\r\n        return instance.get(`users/${term}`).then(res=>res.data)\r\n\r\n    }\r\n\r\n};","export const updateObjectInArray = (items:any, itemId:any, objPropName:any, newObjProps:any) =>{\r\n\r\n    return items.map((u:any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return { ...u, ... newObjProps }\r\n        }\r\n        return u\r\n    })\r\n\r\n\r\n}\r\n ","import { UsersAPI } from \"../API/userApi\";\r\nimport { updateObjectInArray } from \"../utils/objectHelpers\";\r\nimport {  userType } from \"../components/types/types\";\r\nimport { appStateType, baseThunkType, InferActionsTypes } from \"./reduxStoreNew\";\r\nimport { Dispatch } from \"react\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { getItemsType } from \"../API/api\";\r\n\r\n// const Follow = \"Follow\";\r\n// const unFollow = \"unFollow\";\r\n// const setUsers = \"setUsers\";\r\n// const setCurrentPage = \"setCurrentPage\";\r\n// const setTotalUsersCount = \"setTotalUsersCount\";\r\n// const toggleIsFetching = \"toggleIsFetching\";\r\n// const toggleIsFollowingProgress = \"toggleIsFollowingProgress\";\r\n\r\n\r\n\r\nexport const initialState = {\r\n    users: [] as Array<userType>,\r\n    pageSize: 10 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: false as boolean,\r\n    followingInProgress: [] as Array<number>,\r\n    term:\" \" as string,\r\n    friend:false as boolean\r\n    //id users\r\n    //fake: 10\r\n};\r\nconst usersReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n    switch (action.type) {\r\n/*         case \"fake\": return{...state, fake:state.fake+1}\r\n */        case \"SN/USERS/Follow\":\r\n            return {\r\n                ...state,\r\n                // users:[...state.users] odno i toge\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", { followed: true })\r\n                /*  state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                                type followingInProgressType={\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u\r\n                }) */\r\n            };\r\n        case \"SN/USERS/unFollow\" :\r\n            return {\r\n                ...state,\r\n                // users:[...state.users] odno i toge\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", { followed: false })\r\n                /*  state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u\r\n                }) */\r\n            };\r\n        case \"SN/USERS/setUsers\": {\r\n            return { ...state, users: action.users  }//skleivaem 2 spread operator\r\n        }\r\n            ;\r\n        case \"SN/USERS/setCurrentPage\": {\r\n            return { ...state, currentPage: action.currentPage }\r\n\r\n        }\r\n            ;\r\n        case \"SN/USERS/setTotalUsersCount\": {\r\n            return { ...state, totalUsersCount: action.count }\r\n\r\n        }\r\n            \r\n        case \"SN/USERS/toggleIsFetching\": {\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        }\r\n        case \"SN/USERS/toggleIsFollowingProgress\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        case \"SN/USERS/toGetTerm\": {\r\n            return {\r\n                ...state, term: action.term\r\n            }\r\n        }\r\n        case \"SN/USERS/toGetFriend\": {\r\n            return {\r\n                ...state, friend: action.friend\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n/* type actionTypes=followSuccessType|unfollowSuccessType|setCurrentPageType|setTotalUsersCountType|\r\nsetUsersType|toggleIsFetchingType|toggleIsFollowingProgressType */\r\nexport const actions = {\r\n\r\n\r\n    followSuccess: (userId: number) => ({ type: \"SN/USERS/Follow\", userId } as const),\r\n    /* type setUsersType={\r\n        type: \"setUsers\",\r\n        users:userType\r\n    } */\r\n    unfollowSuccess: (userId: number) => ({ type: \"SN/USERS/unFollow\", userId } as const),\r\n    /* type setCurrentPageType={\r\n        type: \"setCurrentPage\",\r\n        currentPage:number\r\n    } */\r\n    setUsers: (users: Array <userType>) => ({ type: \"SN/USERS/setUsers\", users } as const),\r\n    /* type setTotalUsersCountType={\r\n        type: \"setTotalUsersCount\",\r\n        count:number\r\n    } */\r\n    setCurrentPage: (currentPage: number) => ({ type: \"SN/USERS/setCurrentPage\", currentPage } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({ type: \"SN/USERS/setTotalUsersCount\", count: totalUsersCount } as const),\r\n    /* type toggleIsFetchingType={\r\n        type: \"toggleIsFetching\",\r\n        isFetching:boolean\r\n    } */\r\n    toggleIsFetching: (isFetching: boolean) => ({ type: \"SN/USERS/toggleIsFetching\", isFetching } as const),\r\n    /* type toggleIsFollowingProgressType={\r\n        type: \"toggleIsFollowingProgress\",\r\n        isFetching:boolean,\r\n        userId:number\r\n    } */\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"SN/USERS/toggleIsFollowingProgress\",\r\n        isFetching,\r\n        userId\r\n    }as const),\r\n    toGetTerm: (term: string) => ({ type: \"SN/USERS/toGetTerm\", term } as const),\r\n    toGetFriend: (friend: boolean) => ({ type: \"SN/USERS/toGetFriend\", friend } as const)\r\n\r\n\r\n}\r\n\r\n\r\nexport const getUsers = (currentPage = 1, pageSize: number, term:string, friend:boolean): thunkType => {\r\n    return (dispatch, getState) => {\r\n        getState()\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(actions.toggleIsFetching(true))\r\n        UsersAPI.getUsers(currentPage, pageSize, term, friend).then((data: getItemsType) => {\r\n            dispatch(actions.toggleIsFetching(false))\r\n            dispatch(actions.setUsers(data.items))\r\n            dispatch(actions.setTotalUsersCount(data.totalCount))\r\n            dispatch(actions.toGetFriend(true))\r\n            dispatch(actions.toGetTerm(term))\r\n\r\n\r\n\r\n\r\n        })\r\n\r\n    }\r\n}\r\nconst _followUnfollow = async (dispatch: dispatchType, userId: number, apiFunction: any, actionCreator: (userId: number) => ActionTypes) => {\r\n\r\n    dispatch(actions.toggleIsFollowingProgress(true, userId));\r\n\r\n    let response = await apiFunction(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleIsFollowingProgress(false, userId));\r\n\r\n}\r\n\r\n\r\n\r\nexport const Follow = (userId: number): ThunkAction<Promise<void>, appStateType, unknown, ActionTypes> => {\r\n    return async (dispatch) => {\r\n        /* let apiFunction = UsersAPI.followFriends.bind(UsersAPI);\r\n        let actionCreator = followSuccess; */\r\n        await _followUnfollow(dispatch, userId, UsersAPI.followFriends.bind(UsersAPI), actions.followSuccess)\r\n\r\n\r\n    }\r\n}\r\nexport const unFollow = (userId: number): thunkType => {\r\n    return async (dispatch) => {\r\n        /* let apiFunction = UsersAPI.unfollowFriends.bind(UsersAPI);\r\n        let actionCreator = unfollowSuccess; */\r\n       await _followUnfollow(dispatch, userId, UsersAPI.unfollowFriends.bind(UsersAPI), actions.unfollowSuccess)\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default usersReducer;\r\nexport type initialStateType = typeof initialState\r\n\r\ntype dispatchType = Dispatch<ActionTypes>\r\ntype getStateType = () => appStateType\r\ntype thunkType = baseThunkType<ActionTypes>\r\ntype ActionTypes = InferActionsTypes<typeof actions>","import { createSelector } from \"reselect\"\r\nimport {appStateType} from \"./reduxStoreNew\"\r\n\r\nexport const getUsersForProfile=(state:appStateType)=>{\r\n    return state.usersPage.users;\r\n}\r\n/* export const getUsersSelector=(state)=>{\r\n    return getUsersForProfile(state).filter(u=>true)\r\n} */\r\nexport const getUsersSuperSelector=createSelector(getUsersForProfile,  (users)=>{\r\n    return users.filter(u=>true)\r\n})\r\n\r\nexport const getPageSize=(state:appStateType)=>{\r\n    return state.usersPage.pageSize\r\n} \r\nexport const getTotalUsersCount=(state:appStateType)=>{\r\n    return state.usersPage.totalUsersCount\r\n} \r\nexport const getIsFetching=(state:appStateType)=>{\r\n    return state.usersPage.isFetching\r\n} \r\nexport const getFollowingInProgress=(state:appStateType)=>{\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getCurrentPage=(state:appStateType)=>{\r\n    return state.usersPage.currentPage\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {Follow, getUsers} from \"../../redux/usersReducer\";\r\nimport {unFollow} from \"../../redux/usersReducer\";\r\nimport {compose} from \"redux\";\r\nimport {getFollowingInProgress, getIsFetching, getTotalUsersCount, getCurrentPage, getPageSize, getUsersSuperSelector} from \"../../redux/usersSelectors\";\r\nimport {userType } from \"../types/types\";\r\nimport { appStateType } from \"../../redux/reduxStoreNew\";\r\nimport SideBar from \"../sideBar/sideBar\";\r\ntype mapStateToPropsType={\r\n    currentPage:number,\r\n    pageSize:number,\r\n    isFetching:boolean,\r\n    totalUsersCount:number,\r\n    users: Array<userType>,    \r\n    followingInProgress:Array<number>,\r\n    term:string\r\n    friend:boolean\r\n}\r\ntype mapDispatchToPropsType={\r\n    Follow:(userId:number)=>{},\r\n    unFollow:(userId:number)=>{},\r\n    getUsers:(currentPage:number, pageSize:number, term:string, friend:boolean)=>void\r\n\r\n}\r\n\r\n//type propsType=mapDispatchToPropsType&mapStateToPropsType\r\nclass UsersContainer extends React.Component <mapDispatchToPropsType&mapStateToPropsType> {\r\n    // constructor(props) {po ymolchaniuy pishetsya reactcomponent, kotoryi my nasledyem rashiryaem\r\n    //     super(props);konstruktor po ymolchaniyu cosdaetsya\r\n    // }\r\n\r\n\r\n    componentDidMount(){\r\n        // this.props.toggleIsFetching(true);\r\n        // alert(\"new\")\r\n        // getUsers=()=>  {\r\n        //     if(this.props.users.length===0) {\r\n        //   y Dimy zdec' toge zapros na servac\r\n\r\n        // UsersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false);\r\n        //     this.props.setUsers(data.items);\r\n        //     this.props.setTotalUsersCount(data.totalCount);\r\n        // })\r\n        const {currentPage, pageSize,term, friend}=this.props;\r\n        this.props.getUsers(currentPage, pageSize, term,friend);\r\n    }\r\n\r\n    onPageChanged = (pageNumber:number) => {\r\n        const {pageSize, term, friend}=this.props\r\n        this.props.getUsers(pageNumber, pageSize,term, friend);\r\n\r\n        \r\n        // this.props.toggleIsFetching(true);\r\n        //\r\n        // // axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`,\r\n        // //     {withCredentials: true})\r\n        // UsersAPI.getUsers\r\n        // (pageNumber, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false);\r\n        //     this.props.setUsers(data.items);\r\n        // })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n/* console.log(\"Users\")\r\n */        return (<>\r\n               {/*  {this.props.isFetching ? <Preloader/> : null} */}\r\n              {/*  <h2>{this.props.pageTitle}</h2> */}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       Follow={this.props.Follow}\r\n                       unFollow={this.props.unFollow}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                       term={this.props.term}\r\n                       friend={this.props.friend}\r\n                />\r\n                 \r\n\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:appStateType):mapStateToPropsType => {\r\n/*     console.log(\"mapStateToProps Users\")\r\n */    return {\r\n        users: getUsersSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress:getFollowingInProgress(state),\r\n        term:state.usersPage.term,\r\n        friend:state.usersPage.friend\r\n    }\r\n}\r\n/* const mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n         Follow: (userId:number) => {\r\n             dispatch(Follow(userId));\r\n         },\r\n         unFollow: (userId:number) => {\r\n             dispatch(unFollow(userId))\r\n         },\r\n         getUsers: (currentPage:number, pageSize:number) => {\r\n             dispatch(getUsers(currentPage, pageSize))\r\n         }\r\n      \r\n    }\r\n } */\r\n\r\n\r\n// export default connect(mapStateToProps,\r\n//     {\r\n//         Follow: followAC,\r\n//         unFollow: unFollowAC,\r\n//         setUsers: setUsersAC,\r\n//         setCurrentPage: setCurrentPageAC,\r\n//         setTotalUsersCount: setTotalUsersCountAC,\r\n//         toggleIsFetching: toggleIsFetchingAC\r\n//     })(UsersContainer);\r\n//let withRedirect=withAuthRedirect(UsersContainer)\r\n// export default withAuthRedirect(connect(mapStateToProps,\r\n//     {\r\n//         Follow,\r\n//         unFollow,\r\n//         getUsers\r\n//     })(UsersContainer));\r\nexport default compose<React.ComponentType>(connect<mapStateToPropsType,mapDispatchToPropsType,{},appStateType>(mapStateToProps,\r\n    {\r\n        Follow,\r\n        unFollow,\r\n        getUsers\r\n    }))(UsersContainer);","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport { Redirect} from \"react-router-dom\";\r\nexport type mstpType={\r\n    isAuth:boolean\r\n    login:string|null\r\n}\r\nexport type dPtype={\r\n    logout:()=>void\r\n}\r\nconst Header:React.FC<mstpType&dPtype> = (props) => {\r\n    return (\r\n        \r\n\r\n            <header className={s.header}>\r\n                <img src=\"https://s1.logaster.com/static/v3/img/products/logo.png\"/>\r\n                <div className={s.loginBlock}>\r\n                    {props.isAuth ? <div> {props.login}  <button onClick={props.logout  }>Logout</button></div>:\r\n                                        <Redirect from={\"/\"} to={\"/Login\"}/>}\r\n \r\n                    {/* <NavLink to={\"/login\"}>login</NavLink> } */}\r\n                    \r\n                </div>\r\n\r\n            </header>\r\n\r\n        \r\n            )\r\n}\r\n        export default Header;","import { instance } from \"./api\";\r\nimport { getUserIdProfileAPIType } from \"./profileApi\";\r\nexport type getCaptchaUrlResponseType={\r\n    url:string\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<getCaptchaUrlResponseType>(\"security/get-captcha-url\").then(res=>res.data);\r\n\r\n    }\r\n\r\n}","import { authAPI, resultCodeForCaptcha, resultCodesEnum } from \"../API/authApi\";\r\nimport { securityAPI } from \"../API/securityApi\";\r\n\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { appStateType, baseThunkType, InferActionsTypes } from \"./reduxStoreNew\";\r\nimport { Dispatch } from \"react\";\r\n\r\n/* const setUserData = \"setUserData\";\r\nconst getCaptchaUrlSuccess = \"getCaptchaUrlSuccess\"; */\r\n\r\nexport type initialStateType2 = {\r\n    userId: number|null,    \r\n    email: string|null ,\r\n    login: string|null,\r\n    isAuth: boolean,\r\n    captchaUrl:string|null // if null then captcha is not required\r\n};\r\n\r\nlet initialState:initialStateType2 = {\r\n    userId: null as number|null,\r\n    email: null as string|null,\r\n    login: null as string|null,\r\n    isAuth: false as boolean,\r\n    captchaUrl: null as string|null // if null then captcha is not required\r\n};\r\nexport type initialStateType= typeof initialState \r\n\r\nconst authReducer = (state = initialState, action:actionTypes):initialStateType=> {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n/* type setAuthUserDataPayloadType={\r\n    userId:number|null,\r\n    email:string|null,\r\n    login:string|null,\r\n    isAuth:boolean\r\n} */\r\n/* export type setAuthUserDataType={\r\n    type:typeof setUserData,\r\n    payload:setAuthUserDataPayloadType\r\n} */\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    } as const)\r\n}\r\n/* export const setAuthUserData = (userId:number|null, email:string|null,\r\n     login:string|null, isAuth:boolean|null) =>\r\n    ({ type: 'SN/auth/SET_USER_DATA', payload: { userId, email, login, isAuth } }); */\r\n//type  getCapcthaUrlSuccessSuccessACPayloadType={\r\n\r\n\r\n/* type getCaptchaUrlSuccessACType={\r\n    type: typeof 'SN/auth/GET_CAPTCHA_URL_SUCCESS'\r\n    payload:{captchaUrl:string}\r\n} */\r\n/* export const getCaptchaUrlSuccessAC = (captchaUrl:string) =>\r\n    ({ type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl} }); */\r\n\r\n\r\nexport const getAuthUserData = ():thunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n    //response.data.data.login\r\n    /*  .then(response => { */\r\n    if (meData.resultCode === resultCodesEnum.Success) {\r\n        let { id, email, login } = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n\r\n    return \"vau\";\r\n};\r\n\r\nexport const login = (email:string, password:string,\r\n     rememberMe:boolean, captcha:null|undefined):thunkType => async (dispatch) => {\r\n    /*  let action=stopSubmit(\"login\", {_error:\"CommonError\"});\r\n             dispatch(action) */\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha)\r\n    /* .then(response => { */\r\n    if (loginData.resultCode === resultCodesEnum.Success) {\r\n        dispatch(getAuthUserData());\r\n    } else  {\r\n        if(loginData.resultCode===resultCodeForCaptcha.CaptchaIsRequired){dispatch(getCaptchaUrl())}\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : \"some error\"\r\n        dispatch(stopSubmit(\"login\", { _error: message }))\r\n    }\r\n\r\n\r\n};\r\nexport const logout = ():thunkType => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n\r\n\r\n};\r\nexport const getCaptchaUrl = ():thunkType => async (dispatch) => {\r\n\r\n\r\n    const data = await securityAPI.getCaptchaUrl();\r\n\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n\r\n\r\n\r\n};\r\n\r\ntype actionTypes=InferActionsTypes<typeof actions>\r\n\r\ntype thunkType= baseThunkType <actionTypes| FormAction>\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport Header, { dPtype, mstpType } from \"./Header\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport { appStateType } from \"../../redux/reduxStoreNew\";\r\n\r\nclass HeaderContainer extends React.Component<mstpType&dPtype> {\r\n    \r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state:appStateType)=>({\r\n    isAuth:state.auth.isAuth,\r\n    login:state.auth.login\r\n\r\n}as mstpType);\r\n\r\nexport default connect<mstpType, dPtype,{},appStateType>(mapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { Input, createField, GetStringKeys } from \"../components/common/formControls/formControls\";\r\nimport { required } from \"../validators/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport { login} from \"../redux/authReducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport style from \"../components/common/formControls/FormControls.module.css\";\r\nimport { appStateType } from \"../redux/reduxStoreNew\";\r\ntype loginFormOwnProps={\r\n    captchaUrl:string|null\r\n}\r\n\r\nconst LoginForm:React.FC<InjectedFormProps<loginValuesType,loginFormOwnProps>&loginFormOwnProps> = ({ handleSubmit, error, captchaUrl }) => {\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<loginValuesTypeKeys>(Input, [required], \"email\", \"email\")}\r\n            {createField<loginValuesTypeKeys>(Input, [required], \"password\", \"password\", { type: \"password\" })}\r\n            {createField<loginValuesTypeKeys>(Input, [], \"rememberMe\", undefined, { type: \"checkbox\" }, \"remember me\")}\r\n\r\n\r\n            {/* <div>\r\n                < Field component={Input}  validate={[required]} name={\"email\"}\r\n                 placeholder={\"email\"}/>\r\n            </div>\r\n            <div>\r\n                < Field component={Input} validate={[required]} type={\"password\"}\r\n                 name={\"password\"} placeholder={\"password\"}/>\r\n\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/>\r\n                remember me\r\n            </div> */}\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl && createField<loginValuesTypeKeys>(Input, [required], \"captcha\",  \"symbols from image\", { })}\r\n\r\n            {error && <div className={style.formSummaryControl}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button >login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst LoginReduxForm = reduxForm<loginValuesType,loginFormOwnProps>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\n\r\ntype mapStateToPropsType={\r\n    captchaUrl:string|null\r\n    isAuth:boolean\r\n}\r\ntype mapDispatchToPropsType={\r\n  login:(email:string, password:string, rememberMe:boolean, captcha:string)=>void\r\n}\r\nexport type loginValuesType={\r\n    email:string, password:string, rememberMe:boolean, captcha:string\r\n}\r\n//type loginValuesTypeKeys= Extract<keyof loginValuesType, string>\r\nexport type loginValuesTypeKeys = GetStringKeys<loginValuesType>\r\n\r\nconst Login:React.FC<mapStateToPropsType&mapDispatchToPropsType> = (props) => {\r\n\r\n    const onSubmit = (formData:any) => {\r\n        //console.log(formData);\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n        //na samom dele eto ne sanka. eto callback iz connect, kotoryi vyzyvaet sanky\r\n\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state:appStateType):mapStateToPropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n//@ts-ignore\r\n\r\nexport default connect(mapStateToProps, { login })(Login)","import { Dispatch } from \"react\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { getAuthUserData } from \"./authReducer\";\r\nimport { appStateType, InferActionsTypes } from \"./reduxStoreNew\";\r\n\r\nconst initializedSuccess = \"SN/APP/initializedSuccess\";\r\n\r\n/* type initializedSuccessType={\r\n    id:number,\r\n    type: typeof initializedSuccess\r\n  } */\r\n\r\n  \r\nlet initialState = {\r\n    initialized: false  \r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst appReducer = (state= initialState, action:actionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/APP/initializedSuccess\":\r\n\r\n            return {\r\n                ...state,\r\n                initialized:true\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n/* type initializedSuccessType={\r\n\r\n    type: typeof initializedSuccess//typeOf chtoby ispolzovat' peremennyu dlya izbavleniya ot opechatok\r\n  } */\r\n export  const actions={\r\n     initializedSuccessAC : ()=>\r\n    ({ type: \"SN/APP/initializedSuccess\"}as const) \r\n  }\r\n  type actionsType=InferActionsTypes<typeof actions>\r\n/* export const initializedSuccessAC = ():initializedSuccessType =>\r\n    ({ type: initializedSuccess }); */\r\n\r\n    type thunkType = ThunkAction<void, appStateType, unknown, actionsType>\r\n\r\nexport const initializeApp = ()=> (dispatch:any) => {\r\n   let promise=dispatch(getAuthUserData());\r\n   //promise.all([promise1,promise2]) esli nesk promisov\r\n   promise.then(() => {(\r\n   dispatch(actions.initializedSuccessAC()));\r\n   }) \r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default appReducer;","let initialState={\r\n    avatars: [\r\n        {\r\n            id: 1,\r\n            name: \"Dima\",\r\n            avatar: \"https://cdn5.vectorstock.com/i/1000x1000/85/39/cartoon-man-icon-vector-14418539.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Vasya\",\r\n            avatar: \"https://www.vippng.com/png/detail/105-1058737_free-vector-smart-guy-character-vector-characters-png.png\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Egorka\",\r\n            avatar: \"https://library.kissclipart.com/20181213/vuw/kissclipart-business-man-cartoon-clipart-businessperson-capita-e980109693cfe80f.jpg \"\r\n        }\r\n\r\n    ]as Array <avatarsType>\r\n}\r\n\r\n export type avatarsType={\r\n    id:number,\r\n    name:string,\r\n    avatar: string\r\n\r\n}\r\nexport type initialStateType=typeof initialState\r\nconst friendsReducer=(state=initialState):initialStateType=>{\r\n    return state;\r\n}\r\nexport default friendsReducer;","import {applyMiddleware, combineReducers, createStore, compose, Action} from \"redux\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport friendsReducer from \"./friendsReducer\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport  thunkMiddleware, { ThunkAction } from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        friendsPage: friendsReducer,\r\n        usersPage: usersReducer,\r\n        auth: authReducer,\r\n        app:appReducer,\r\n        form: formReducer\r\n    }\r\n)\r\ntype rootReducerType=typeof rootReducer// (globalthis:appStateType)=>appStateType)\r\nexport type appStateType= ReturnType<rootReducerType>\r\n//export type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n//export type PropertiesTypes <T> = T extends { [keys: string]: (...args:any[]) =>infer U  }? U : never\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n//export type InferActionsTypes<T>=T extends  {[keys:string]:(...args:any[])=>infer U}?U:never\r\nexport type baseThunkType<A extends Action=Action>=ThunkAction<void, appStateType, unknown, A>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers( applyMiddleware(thunkMiddleware) ))\r\n//const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n//@ts-ignore\r\nwindow._store_ = store\r\nexport default store","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { maxLengthCreator,  required} from \"../../validators/validators\";\r\nimport { createField, GetStringKeys, Input } from \"../common/formControls/formControls\";\r\n\r\nconst maxLength10=maxLengthCreator(10);\r\ntype propsType={\r\n\r\n}\r\nconst SideBarForm:React.FC<InjectedFormProps<SideBarFormValuesType,propsType>&propsType>  = (props) => {\r\n\r\n    //let newPost = React.createRef();\r\n\r\n    // let onButton = () => {\r\n    //     props.onButtonClick();\r\n        // eslint-disable-next-line no-undef\r\n        // props.dispatch(onButtonClickEventActionCreator());    }\r\n    //let onPostChange = (e) => {\r\n    //     // let text = newPost.current.value;\r\n    //     let text = e.target.value;\r\n    //     props.updateNewPostText(text);\r\n    //     // let action=updateNewPostTextActionCreator(text);\r\n    //     // props.dispatch(action);\r\n    // }\r\n    // let newPostText = props.newPostText;\r\n    \r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n            {createField<SideBarFormValuesTypeKeys>(Input, [required,maxLength10], \"term\",  \"searching\", { })}\r\n               \r\n               \r\n            </div>\r\n\r\n            <div>\r\n                <button >Press</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n export const SideBarReduxForm=reduxForm<SideBarFormValuesType,propsType>({\r\n    // a unique name for the form\r\n    form: 'SideBarForm'\r\n})(SideBarForm);\r\n\r\nexport type SideBarFormValuesType={\r\n    term:string\r\n}\r\n\r\ntype SideBarFormValuesTypeKeys = GetStringKeys<SideBarFormValuesType>\r\n\r\n\r\n\r\n\r\n","import React, { Suspense } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\nimport { avatarsType } from \"../redux/friendsReducer\";\r\nimport { appStateType } from \"../redux/reduxStoreNew\";\r\n\r\ntype mstpType={\r\n    isAuth:boolean\r\n}\r\ntype mdtpType={\r\n    \r\n}\r\nlet mapStateToPropsForRedirect = (state:appStateType):mstpType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect <WCP> (WrappedComponent:React.ComponentType<WCP>)  {\r\n\r\n    const RedirectComponent:React.FC <mstpType> = (props)=> {\r\n\r\n        let {isAuth,  ...restprops}=props\r\n\r\n            if (!isAuth) return <Redirect to={\"/login\"} />\r\n            return <WrappedComponent {...restprops  as WCP} />\r\n        \r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<mstpType,{},WCP,appStateType>(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\nexport function withSuspense<WC>(WrappedComponent: React.ComponentType<WC>) {\r\n\r\n        return (props: WC) =>{ \r\n            return  <Suspense fallback={<div>loading...</div>}>\r\n         <WrappedComponent {...props}/>\r\n         </Suspense > }            \r\n                \r\n        \r\n        }\r\n","import React from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"../Users/User\"\r\nimport { userType } from \"../types/types\";\r\nimport {SideBarFormValuesType, SideBarReduxForm} from \"./SideBarForm\"\r\nimport { reset } from \"redux-form\";\r\n\r\nexport type PropsType = {\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    users: Array<userType>,\r\n    Follow: (userId: number) => void,\r\n    unFollow: (userId: number) => void,\r\n    followingInProgress: Array<number>,\r\n    term: string,\r\n    friend: boolean,\r\n    getUsers:(currentPage:number, pageSize:number,term:string,friend:boolean)=>void,\r\n    toGetTerm:(term:string)=>void\r\n\r\n    //toGetTerm:(term:string)=>void\r\n\r\n}\r\n\r\nlet SideBar: React.FC<PropsType> = ({ totalUsersCount, pageSize, currentPage = 1, onPageChanged, users, term, friend, getUsers, toGetTerm, ...props }) => {\r\n    //let newPost = React.createRef();\r\n    // let onButton = () => {\r\n    //     props.onButtonClick();\r\n    //     // eslint-disable-next-line no-undef\r\n    //     // props.dispatch(onButtonClickEventActionCreator());\r\n    //\r\n    // }\r\n    //\r\n    // let onPostChange = (e) => {\r\n    //     // let text = newPost.current.value;\r\n    //     let text = e.target.value;\r\n    //     props.updateNewPostText(text);\r\n    //     // let action=updateNewPostTextActionCreator(text);\r\n    //     // props.dispatch(action);\r\n    // }\r\n    //\r\n    // let newPostText = props.newPostText;\r\n    /* componentDidUpdate() {\r\n        console.log(\"componentDidUpdate\")\r\n    } */\r\n\r\n    let addNewPost = (value:SideBarFormValuesType, dispatch:any) => {\r\n        toGetTerm(value.term);\r\n       // dispatch(reset('SideBarForm'))\r\n    }\r\n    return (\r\n        <div>\r\n            <div><SideBarReduxForm onSubmit={addNewPost} />\r\n                {/* <div>\r\n                    <textarea onChange={onPostChange} placeholder={\"enter svoi posty\"} value={newPostText} />\r\n                    </div>\r\n                <div>\r\n                    <button onClick={onButton}>Add post</button>\r\n                </div> */}\r\n            </div>\r\n            <div>\r\n                <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize}\r\n                    currentPage={currentPage} onPageChanged={onPageChanged} />\r\n            </div>\r\n            {users.map(u => <User user={u} key={u.id} followingInProgress={props.followingInProgress}\r\n                Follow={props.Follow} unFollow={props.unFollow} />).filter(friend=>friend?props.unFollow:0)}\r\n\r\n\r\n        </div>)\r\n\r\n}\r\nexport default SideBar;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Follow, getUsers, actions} from \"../../redux/usersReducer\";\r\nimport {unFollow} from \"../../redux/usersReducer\";\r\nimport {compose} from \"redux\";\r\nimport {getFollowingInProgress, getIsFetching, getTotalUsersCount, getCurrentPage, getPageSize, getUsersSuperSelector} from \"../../redux/usersSelectors\";\r\nimport {userType } from \"../types/types\";\r\nimport { appStateType } from \"../../redux/reduxStoreNew\";\r\nimport SideBar from \"../sideBar/sideBar\";\r\n\r\ntype mapStateToPropsType={\r\n    currentPage:number,\r\n    pageSize:number,\r\n    isFetching:boolean,\r\n    totalUsersCount:number,\r\n    users: Array<userType>,    \r\n    followingInProgress:Array<number>,\r\n    term:string,\r\n    friend:boolean\r\n}\r\ntype mapDispatchToPropsType={\r\n    Follow:(userId:number)=>{},\r\n    unFollow:(userId:number)=>{},\r\n    getUsers:(currentPage:number, pageSize:number,term:string,friend:boolean)=>void,\r\n    toGetTerm:(term:string)=>void\r\n\r\n}\r\n\r\n//type propsType=mapDispatchToPropsType&mapStateToPropsType\r\nclass SideBarContainer extends React.Component <mapDispatchToPropsType&mapStateToPropsType> {\r\n    // constructor(props) {po ymolchaniuy pishetsya reactcomponent, kotoryi my nasledyem rashiryaem\r\n    //     super(props);konstruktor po ymolchaniyu cosdaetsya\r\n    // }\r\n\r\n\r\n    componentDidMount(){\r\n       \r\n        \r\n        const {currentPage, pageSize, term, friend}=this.props;\r\n        this.props.getUsers(currentPage, pageSize,term, friend);\r\n    }\r\n\r\n    onPageChanged = (pageNumber:number) => {\r\n        const {pageSize, term, friend}=this.props\r\n        this.props.getUsers(pageNumber, pageSize,term,friend);\r\n\r\n        \r\n      \r\n    }\r\n\r\n\r\n    render() {\r\n/* console.log(\"Users\")\r\n */        return (<>\r\n               {/*  {this.props.isFetching ? <Preloader/> : null} */}\r\n              {/*  <h2>{this.props.pageTitle}</h2> */}\r\n                <SideBar totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       Follow={this.props.Follow}\r\n                       unFollow={this.props.unFollow}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                       term={this.props.term}\r\n                       friend={this.props.friend}\r\n                       getUsers={this.props.getUsers}\r\n                       toGetTerm={this.props.toGetTerm}\r\n                       \r\n                />\r\n                 \r\n\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:appStateType):mapStateToPropsType => {\r\n/*     console.log(\"mapStateToProps Users\")\r\n */    return {\r\n        users: getUsersSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress:getFollowingInProgress(state),\r\n        term:state.usersPage.term,\r\n        friend:state.usersPage.friend\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect<mapStateToPropsType,mapDispatchToPropsType,{},appStateType>(mapStateToProps,\r\n    {\r\n        Follow,\r\n        unFollow,\r\n        getUsers,\r\n        toGetTerm:actions.toGetTerm\r\n    }))(SideBarContainer);","import React, { Component, ReactElement, Suspense } from 'react';\nimport \"./App.css\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport { BrowserRouter, Route, withRouter, Switch, Redirect } from \"react-router-dom\";\nimport Friends from \"./components/Friends/Friends\";\nimport NavBarContainer from \"./components/NavBar/NavBarContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./login/Login\";\nimport { connect, Provider } from 'react-redux';\nimport { initializeApp } from \"./redux/appReducer\";\nimport { compose } from 'redux';\nimport Preloader from './components/common/Preloader/Preloader';\nimport store, { appStateType } from \"./redux/reduxStoreNew\";\nimport { withSuspense } from './hoc/withAuthRedirect';\nimport { RouteComponentProps } from '@reach/router';\nimport SideBar from './components/sideBar/sideBar';\nimport SideBarContainer from './components/sideBar/SideBarContainer';\n\n\n\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\ntype mapPropsType=ReturnType<typeof mapStateToProps>\ntype dispatchPropsType={\n    initializeApp:()=>void\n}\n\n\nconst LoginDrawing=withSuspense(Login)\n\ntype ownPropsType={\n    pageTitle:JSX.Element\n\n}\nclass App extends Component<mapPropsType&dispatchPropsType&ownPropsType> {\n    catchAllUnhandledErrors = (e:PromiseRejectionEvent) => {\n        alert(\"Some error occured\");\n    }\n    \n    componentDidMount() {\n\n        this.props.initializeApp();\n       window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n    \n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader />\n\n        }\n\n        return (\n\n            <div className={\"app-wrapper\"}>\n                {/*  <Redirect from=\"/\" to =\"/login\"/> */}\n                <HeaderContainer />\n                <NavBarContainer />\n                <div className={\"app-wrapper-content\"}>\n                    {/* <Route exact path='/'\n                               render={() => <Redirect to={\"/profile\"}/>}/> */}\n\n\n                    <Suspense fallback={<Preloader />}>\n                        \n                            <Route path={\"/dialogs\"} render={() => <DialogsContainer />} />\n\n                            <Route path={\"/profile/:userId?\"} render={() => <ProfileContainer />} />\n                            <Route path={\"/dialogs\"} render={() => <DialogsContainer />} />\n                            <Route path={\"/users\"} render={() => <UsersContainer /* pageTitle={\"samurai\"as unknown as JSX.Element} */  />} />\n                            <Route path={\"/sideBar\"} render={() =>\n                            \n                            <SideBarContainer />} />\n                    </Suspense>\n                    <Switch>\n                             <Route exact path={\"/\"} render={() => <Redirect to=\"/profile\"/>}/>\n                           {/*  <Redirect from=\"/\" to={\"/profile\"}/> */}\n                            <Route path={\"/news\"} render={() => <News />} />\n\n                            <Route path={\"/music\"} render={() => <Music />} />\n                            <Route path={\"/settings\"} render={() => <Settings />} />\n                            {/* <Route path={\"/users\"} render={() => <UsersContainer />} /> */}\n{/*                             <Route path={\"/login/facebook\"} render={() => <div>facebook</div>} />\n */}\n                            <Route path={\"/login\"} render={()=><LoginDrawing/>} />\n                            <Route path={\"*\"} render={() => <div>404 not found</div>} />\n\n                            <Route path={\"/friends\"} render={() => <Friends  />} />\n                            \n                            \n\n                        </Switch>\n                </div>\n                </div>\n        )\n    }\n}\nconst mapStateToProps = (state:appStateType) => ({\n                    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, { initializeApp}))(App);\n\nconst AppReactSamuraiJS:React.FC = () => {\n    return (\n                <BrowserRouter >\n                    <Provider store={store}>\n                        <AppContainer />\n                    </Provider>\n                </BrowserRouter>)\n}\nexport default AppReactSamuraiJS;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppReactSamuraiJS from './App';\n// import {Provider} from \"./ContextStore\";\n/* setInterval(()=>{\n    store.dispatch({type:\"fake\"})\n},1000); */\n\n\n\n// export let rerenderEntireTree = (state) => {}\n\n    ReactDOM.render(<AppReactSamuraiJS/>, document.getElementById('root'));\n\n\n\n// rerenderEntireTree(store.getState());\n// // store.subscribe(() => {\n// //     let state = store.getState();\n// //     rerenderEntireTree(state);\n// // })\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export type fieldValidatorsType=(value:string)=>string|undefined\r\nexport const required:fieldValidatorsType=(value)=>{\r\n    if(value) return undefined ;\r\n        return \"Field is required\";\r\n\r\n}\r\nexport const maxLengthCreator=(maxLength:number):fieldValidatorsType=>(value)=>{\r\n\r\n    if(value.length>maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\nexport const minLengthCreator=(minLength:number):fieldValidatorsType=>(value)=>{\r\n\r\n    if(value.length<minLength) return `Min length is ${minLength} symbols`;\r\n    return undefined;\r\n}\r\n//export const maxLength=value=>{\r\n//     if(value.length<30)   return \"More than  required\";\r\n//     return undefined;\r\n// }\r\n// export const minLength=value=>{\r\n//     if(value.length>2) return undefined;\r\n//     return \"More is required\";\r\n//\r\n// }\r\n// const maxLength = max => value =>\r\n//     value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n// export const maxLength15 = maxLength(15)\r\n// const minLength = min => value =>\r\n//     value && value.length < min ? `Must be ${min} characters or more` : undefined\r\n// export const minLength2 = minLength(2)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1hZnh\",\"error\":\"FormControls_error__3kieA\",\"formSummaryControl\":\"FormControls_formSummaryControl__1oDtp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2Nu1e\",\"pageNumber\":\"Paginator_pageNumber__37yci\"};","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nconst Preloader:React.FC = () => {\r\n    return (\r\n        <img src={preloader}/>\r\n\r\n    )\r\n}\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Friends_avatar__1TLkd\",\"name\":\"Friends_name__3a4yJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1Vuvt\",\"loginBlock\":\"Header_loginBlock__5rKvQ\"};","import { photosType, profileType } from \"../components/types/types\";\r\nimport { instance,responseType,resultCodesEnum } from \"./api\";\r\nexport type getUserIdProfileAPIType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    aboutMe:string\r\n}\r\nexport type putStatusProfileAPIType = {\r\n    resultCode: resultCodesEnum\r\n    messages: Array<string>\r\n    data: {\r\n        status: string\r\n    }\r\n}\r\nexport type putPhotoProfileAPIType = {\r\n    \r\n           photos:{\r\n\r\n        small: string\r\n        large: string\r\n        }\r\n   \r\n        \r\n  \r\n    \r\n}\r\nexport type putProfileProfileAPIType = {\r\n    data:{\r\n\r\n        profile:profileType\r\n}\r\nresultCode: resultCodesEnum\r\nmessages: Array<string>\r\n    }\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<profileType>(`profile/` + userId).then(res=>res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res=>res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<responseType>(`profile/status`, { status: status }).then(res=>res.data)\r\n    },\r\n    savePhoto(photofile: any) {\r\n        const formData = new FormData(); \r\n        formData.append(\"image\", photofile);\r\n\r\n        return instance.put<responseType<putPhotoProfileAPIType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    saveProfile(profile: any) {\r\n        return instance.put<putProfileProfileAPIType>(`profile`, profile).then(res=>res.data)\r\n    },\r\n\r\n};\r\n","import { profileAPI } from \"../API/profileApi\";\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport Swal from 'sweetalert2';\r\nimport { postsType, profileType, photosType } from \"../components/types/types\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { appStateType, baseThunkType, InferActionsTypes } from \"./reduxStoreNew\";\r\nimport { UsersAPI } from \"../API/userApi\";\r\nimport { resultCodesEnum } from \"../API/api\";\r\n\r\nconst updateNewPostText = \"SN/PROFILE/updateNewPostText\";\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: \"Hi, how are you?\", likescount: 23 },\r\n        { id: 2, message: \"Hi, it\\'s my first day in social network\", likescount: 102 },\r\n        { id: 3, message: \"slava tebe Boje!\", likescount: 114 },\r\n        { id: 4, message: \"superrrrrrrrrrrrr\", likescount: 596 },\r\n        { id: 5, message: \"uraaaaaaaaaaaaa\", likescount: 1020 }\r\n\r\n    ] as Array<postsType>,\r\n\r\n    profile: null as profileType | null,\r\n    status: \"\",\r\n    error: null as any | null,\r\n};\r\ntype errorType = {\r\n    error: any\r\n}\r\n\r\n\r\n/* export type initialStateType={\r\n    profile:any,\r\n    status:string|null,\r\n    error:any,\r\n    posts:Array<postsType>\r\n\r\n} */\r\nconst profileReducer = (state = initialState, action: actionTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/onButtonClickEvent\":\r\n            // let newPost = {\r\n            //     id: 6,\r\n            //     message: state.newPostText,\r\n            //     likescount: 0\r\n            // }\r\n            // state.posts.push(newPost);\r\n            // state.newPostText = \" \";\r\n            let newPost = action.newPostText;\r\n            // let stateCopy\r\n            return {\r\n                ...state,\r\n\r\n                posts: [...state.posts, { id: 7, message: newPost, likescount: 3 }]\r\n            };\r\n        // stateCopy.posts=[...state.posts];\r\n        // stateCopy.newPostText = \" \";\r\n        // stateCopy.posts.push({id: 7, message: newPost ,likescount:3});\r\n        // case updateNewPostText: {\r\n        //     // let stateCopy =\r\n        //     return {...state, newPostText: action.newPost};\r\n        //     // stateCopy.newPostText = action.newPost;\r\n        // return stateCopy;}\r\n\r\n        case \"SN/PROFILE/setUserProfile\":\r\n            return { ...state, profile: action.profile };\r\n        case \"SN/PROFILE/setStatus\":\r\n            return { ...state, status: action.status };\r\n        case \"SN/PROFILE/deletePost\":\r\n            return { ...state, posts: state.posts.filter(p => p.id != action.postId) }\r\n        case  \"SN/PROFILE/setPhoto\":\r\n            return { ...state, profile: { ...state.profile, photos: action.photos } as profileType };\r\n        case \"SN/PROFILE/errorMessage\":\r\n            return { ...state.error, error: action.error }\r\n        default:\r\n\r\n            return state;\r\n\r\n\r\n    }\r\n};\r\n/* type actionTypes=deletePostActionCreatorType|onButtonClickEventActionCreatorType|updateNewPostTextActionCreatorType|setUserProfileACType|\r\nsetStatusACType|savePhotoSuccessType|errorMessageACType */\r\n\r\nexport const actions =\r\n{\r\n    deletePostActionCreator: (postId: number) => ({ type: \"SN/PROFILE/deletePost\", postId } as const),\r\n\r\n    onButtonClickEventActionCreator: (newPostText: string) =>\r\n        ({ type:\"SN/PROFILE/onButtonClickEvent\", newPostText } as const),\r\n\r\n    updateNewPostTextActionCreator: (text: string) =>\r\n        ({ type: updateNewPostText, newPost: text } as const),\r\n\r\n\r\n    setUserProfileAC: (profile: profileType) => ({ type: \"SN/PROFILE/setUserProfile\", profile } as const),\r\n\r\n    setStatusAC: (status: string) => ({ type: \"SN/PROFILE/setStatus\", status } as const),\r\n\r\n    savePhotoSuccess: (photos: photosType) => ({ type:  \"SN/PROFILE/setPhoto\", photos } as const),\r\n\r\n    errorMessageAC: (error: any) => ({ type: \"SN/PROFILE/errorMessage\", error } as const)\r\n}\r\n\r\n\r\n\r\nexport const getUserProfile = (userId: number): thunkType => async (dispatch) => {\r\n\r\n    let data = await profileAPI.getProfile(userId)\r\n    /*  .then(response => { */\r\n    dispatch(actions.setUserProfileAC(data));\r\n\r\n};\r\n\r\nexport const getStatus = (userId: number): thunkType => async (dispatch) => {\r\n\r\n    let data = await profileAPI.getStatus(userId)\r\n\r\n\r\n    dispatch(actions.setStatusAC(data));\r\n\r\n\r\n};\r\nexport const errorUpdateStatusMessage = (status: string, error: any): thunkType => async (dispatch) => {\r\n\r\n    const data = await profileAPI.updateStatus(status)\r\n\r\n    if (data.resultCode != resultCodesEnum.Success) { dispatch(actions.errorMessageAC(error)) }\r\n\r\n}\r\n\r\nexport const updateStatus = (status: string): thunkType => async (dispatch) => {\r\n    debugger\r\n\r\n    try {\r\n        const data = await profileAPI.updateStatus(status)\r\n\r\n        if (data.resultCode === resultCodesEnum.Success) { dispatch(actions.setStatusAC(status)) }\r\n    }\r\n    catch (error) {\r\n\r\n        errorUpdateStatusMessage(status, error);\r\n        // alert(error)\r\n        Swal.fire({\r\n            title: 'Error!',\r\n            text: 'Do you want to continue',\r\n            icon: 'error',\r\n            confirmButtonText: error\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n};\r\nexport const savePhoto = (file: File): thunkType => async (dispatch) => {\r\n\r\n    let response = await profileAPI.savePhoto(file)\r\n\r\n    if (response.data.resultCode === 0) { dispatch(actions.savePhotoSuccess(response.data.data.photos)) }\r\n\r\n\r\n};\r\nexport const saveProfile = (profile: profileType): thunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === resultCodesEnum.Success) {\r\n        if (userId != null) { dispatch(getUserProfile(userId)) }\r\n        else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    }\r\n    else {\r\n\r\n        dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n\r\n    }\r\n\r\n    /* let wrongNetwork = response.data.messages[0]\r\n    .slice(\r\n      response.data.messages[0].indexOf(\">\") + 1,\r\n      response.data.messages[0].indexOf(\")\")\r\n    )\r\n    .toLocaleLowerCase(); */        //popisyvaet-vyvodit soobshchenie pod nygnym inputom\r\n\r\n\r\n    // let confirmButtonText = response.data.messages[0].match(/Contacts->(\\w+)/)[1]\r\n    /*    let keySwal = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\r\n\r\n       Swal.fire({\r\n           title: 'Error!',\r\n           text: 'You wrote not right site',\r\n           icon: 'error',\r\n           confirmButtonText: keySwal\r\n       })\r\n       let key = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\r\n       dispatch(\r\n           stopSubmit(\"editProfile\", {\r\n               contacts: { [key]: response.data.messages[0] }\r\n           })\r\n       )\r\n       return Promise.reject(response.data.messages[0]\r\n       )\r\n\r\n   } */\r\n   \r\n\r\n\r\n}\r\n\r\ntype thunkType = baseThunkType<actionTypes|FormAction>\r\nexport type actionTypes = InferActionsTypes<typeof actions>\r\nexport type initialStateType = typeof initialState\r\n\r\nexport default profileReducer;"],"sourceRoot":""}