{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogForm/DialogForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","id","avatar","name","path","className","s","dialog","active","to","src","Message","message","maxLength50","maxLengthCreator","DialogReduxForm","reduxForm","form","props","onSubmit","handleSubmit","createField","Textarea","required","Field","validate","placeholder","component","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","onButtonClickEventMessageActionCreator","newPostTextInDialogs","compose","connect","actions"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,0B,sGC4BnMC,EApBwB,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KAC7CC,EAAO,WAAaH,EACxB,OACI,yBAAKI,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAE/B,kBAAC,IAAD,CAASC,GAAIL,GACT,6BACI,yBAAKC,UAAWC,IAAEJ,OAAQQ,IAAKR,KAEnC,6BACKC,MCcNQ,EA1BqB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAelC,OACI,yBAAKP,UAAWC,IAAEC,QACd,yBAAKF,UAAWC,IAAEM,SACbA,K,iCCnBXC,EAAYC,YAAiB,IAwCpBC,EAROC,YAAgD,CAElEC,KAAM,cAFYD,EA1ByE,SAACE,GAU5F,OAEI,0BAAMC,SAAUD,EAAME,cAElB,6BACCC,YAA4CC,IAAU,CAACC,IAASV,GAAc,uBAAwB,sBAEnG,kBAACW,EAAA,EAAD,CAASrB,KAAM,uBAAwBsB,SAAU,CAACF,IAASV,GAAca,YAAa,qBAC/EC,UAAWL,OAEtB,6BACI,8CCoBDM,EArCqB,SAACV,GAEjC,IAAIW,EAAQX,EAAMY,YAGdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,CAAY/B,KAAM+B,EAAE/B,KAAMD,OAAQgC,EAAEhC,OAAQD,GAAIiC,EAAEjC,QACjGkC,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAW,kBAAC,EAAD,CAASzB,QAASyB,EAAEzB,aAYzE,OACI,yBAAKP,UAAWC,IAAE0B,SACd,yBAAK3B,UAAWC,IAAEgC,cACbP,GAEL,yBAAK1B,UAAWC,IAAE8B,UACbD,EACD,6BACI,kBAAC,EAAD,CAAiBhB,SAhBb,SAACoB,GACjBrB,EAAMsB,uCAAuCD,EAAOE,sBACpDF,EAAOE,qBAAqB,U,eCgCrBC,sBACXC,aArCoB,SAACd,GACrB,MAAO,CACHC,YAAYD,EAAMC,eAmCf,eAAsBc,MADlBF,CAEbd","file":"static/js/4.49cac66b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3SZvI\",\"dialogItems\":\"Dialogs_dialogItems__1NPjY\",\"active\":\"Dialogs_active__FIPNT\",\"messages\":\"Dialogs_messages__1QWa9\",\"message\":\"Dialogs_message__23Dch\",\"avatar\":\"Dialogs_avatar__3OSLs\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\ntype propsType={\r\n    id:number,\r\n    avatar:string,\r\n    name:string\r\n}\r\n\r\nconst DialogItem:React.FC<propsType> = ({id, avatar, name}) => {\r\n    let path = \"/dialog/\" + id;\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n\r\n            <NavLink to={path}>\r\n                <div>\r\n                    <img className={s.avatar} src={avatar}/>\r\n                </div>\r\n                <div>\r\n                    {name}\r\n                </div>\r\n            </NavLink>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\ntype propsType={\r\n    message:string\r\n}\r\n\r\nconst Message:React.FC<propsType> = ({message}) => {\r\n\r\n\r\n    // let onButtonClick = () => {\r\n    //\r\n    //\r\n    //     let text = newPost.current.value;\r\n    //     props.onButtonClickEvent(text);\r\n    //\r\n    // }\r\n    //\r\n    // let onPostChange = () => {\r\n    //     let text = newPost.current.value;\r\n    //     props.updateNewPostText(text);\r\n    // }\r\n    return (\r\n        <div className={s.dialog}>\r\n            <div className={s.message}>\r\n                {message}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\"\r\nimport {Field, InjectedFormProps, reduxForm, SubmitHandler} from \"redux-form\"\r\nimport { createField, GetStringKeys, Textarea } from \"../../common/formControls/formControls\"\r\nimport { required, maxLengthCreator } from \"../../../validators/validators\"\r\nimport { newPostInDialogsValuesType } from \"../Dialogs\";\r\n\r\nconst maxLength50=maxLengthCreator(50);\r\n\r\ntype propsType={\r\n}\r\ntype newPostInDialogsValuesTypeKeys = GetStringKeys<newPostInDialogsValuesType>\r\n\r\nconst DialogForm:React.FC<InjectedFormProps<newPostInDialogsValuesType, propsType>&propsType>= (props) => {\r\n    // let state = props.dialogsPage;\r\n    // // let newPostTextMessage = state.newPostTextMessage;\r\n    // let onButtonClick = () => {\r\n    //     props.sendMessage();\r\n    // }\r\n    // let onPostChange = (elementObjectTarget) => {\r\n    //     let newPost = elementObjectTarget.target.value;\r\n    //     props.updateNewPostTextMessage(newPost);\r\n    // }\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n            {createField<newPostInDialogsValuesTypeKeys>(Textarea, [required,maxLength50], \"newPostTextInDialogs\", \"Enter your message\")}\r\n\r\n                <Field   name={\"newPostTextInDialogs\"} validate={[required,maxLength50]} placeholder={\"Enter your message\"}\r\n                       component={Textarea} />\r\n            </div>\r\n            <div>\r\n                <button >Press</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst DialogReduxForm=reduxForm<newPostInDialogsValuesType,propsType>({\r\n    // a unique name for the form\r\n    form: 'DialogForm'\r\n})(DialogForm);\r\n\r\n\r\n\r\n\r\nexport default DialogReduxForm;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogReduxForm from \"./DialogForm/DialogForm\";\r\nimport { initialStateType } from \"../../redux/dialogsReducer\";\r\nimport { GetStringKeys } from \"../common/formControls/formControls\";\r\n\r\ntype Propstype={\r\ndialogsPage:initialStateType\r\nonButtonClickEventMessageActionCreator:(messageText:string)=>void\r\n}\r\nexport type newPostInDialogsValuesType={\r\n    newPostTextInDialogs:string\r\n    \r\n}\r\nconst Dialogs:React.FC<Propstype> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n\r\n    let dialogsElements = state.dialogs.map((d:any) => <DialogItem name={d.name} avatar={d.avatar} id={d.id}/>);\r\n    let messagesElements = state.messages.map((m:any )=> <Message message={m.message}/>);\r\n    //let newPostTextMessage = state.newPostTextMessage;\r\n\r\n\r\n    let addNewMessage = (values:any) => {\r\n        props.onButtonClickEventMessageActionCreator(values.newPostTextInDialogs);\r\n        values.newPostTextInDialogs=\"\";\r\n    }\r\n    //let onPostChange = (elementObjectTarget) => {\r\n     //   let newPost = elementObjectTarget.target.value;\r\n     //    props.updateNewPostTextMessage(newPost);\r\n    // }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <div>\r\n                    <DialogReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {actions} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport { appStateType } from \"../../redux/reduxStoreNew\";\r\n\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n//     return (<ContextStore.Consumer>{(store)=>{\r\n//         let state = store.getState().dialogsPage;\r\n//\r\n//         let onButtonClick = () => {\r\n//             store.dispatch(onButtonClickEventMessageActionCreator());\r\n//         }\r\n//         let onPostChange = (newPost) => {\r\n//             let action = updateNewPostTextMessageActionCreator(newPost);\r\n//             store.dispatch(action);}\r\n//             return(\r\n//             <Dialogs updateNewPostTextMessage={onPostChange} sendMessage={onButtonClick} dialogsPage={state}/>)}}\r\n// </ContextStore.Consumer>\r\n//\r\n//     )}\r\nconst mapStateToProps = (state:appStateType) => {\r\n    return {\r\n        dialogsPage:state.dialogsPage,\r\n    }\r\n}\r\n/* const mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        sendMessage: (newPostTextInDialogs:any) => {\r\n            dispatch(actions.onButtonClickEventMessageActionCreator(newPostTextInDialogs));\r\n        }\r\n        // updateNewPostTextMessage: (body) => {\r\n        //     dispatch(updateNewPostTextMessageActionCreator(body))\r\n        // }\r\n    }\r\n} */\r\n\r\n\r\n\r\n\r\n\r\n//let AuthRedirectComponent=withAuthRedirect(Dialogs);\r\n// const mapStateToPropsForRedirect = (state) => {\r\n//     return {\r\n//\r\n//         isAuth: state.auth.isAuth\r\n//     }\r\n// }\r\n// AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\r\n\r\n    // (props)=>{\r\n    // if(!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n    //\r\n    // return <Dialogs {...props}/>}\r\n\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions})\r\n)(Dialogs);\r\n\r\n\r\n\r\n"],"sourceRoot":""}