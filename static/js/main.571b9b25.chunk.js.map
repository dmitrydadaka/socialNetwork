{"version":3,"sources":["API/api.js","assets/images/user.png","components/NavBar/Navbar.module.css","redux/dialogsReducer.ts","hoc/withAuthRedirect.js","components/Users/Users.module.css","assets/images/preloader.svg","components/common/formControls/formControls.jsx","serviceWorker.js","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/Friends/Friends.jsx","components/NavBar/NavBar.jsx","components/NavBar/NavBarContainer.jsx","components/common/Paginator/Paginator.tsx","components/Users/User.jsx","components/Users/Users.tsx","utils/objectHelpers.js","redux/usersReducer.ts","redux/usersSelectors.tsx","components/Users/UsersContainer.tsx","components/Header/Header.jsx","redux/authReducer.ts","components/Header/HeaderContainer.jsx","login/Login.jsx","redux/appReducer.ts","redux/friendsReducer.ts","redux/reduxStoreNew.tsx","App.js","index.js","components/common/formControls/FormControls.module.css","components/common/Preloader/Preloader.jsx","validators/validators.js","components/common/Paginator/Paginator.module.css","redux/profileReducer.ts","components/Friends/Friends.module.css","components/Header/Header.module.css"],"names":["instance","axios","withCredentials","baseURL","headers","UsersAPI","getUsers","currentPage","pageSize","get","unfollowFriends","userId","delete","followFriends","post","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photofile","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","module","exports","initialState","dialogs","id","name","avatar","messages","message","onButtonClickEventMessageActionCreator","newPostTextInDialogs","type","dialogsReducer","state","action","newPost","withSuspense","Component","props","fallback","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","restprops","child","Input","createField","component","validators","placeholder","text","validate","Boolean","window","location","hostname","match","News","Music","Settings","Friends","s","src","log","NavBar","avatarsNew","friendsPage","avatars","map","a","k","nav","item","to","activeClassName","activeLink","NavBarContainer","connect","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","paginator","onClick","filter","p","selectedPage","pageNumber","key","e","User","u","user","photo","photos","small","userPhoto","followed","disabled","followingInProgress","some","unFollow","Follow","Users","totalUsersCount","users","updateObjectInArray","items","itemId","objPropName","newObjProps","isFetching","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","count","toggleIsFetching","toggleIsFollowingProgress","followUnfollow","dispatch","apiFunction","actionCreator","data","resultCode","usersReducer","getUsersSuperSelector","createSelector","usersPage","getPageSize","getTotalUsersCount","getIsFetching","getFollowingInProgress","getCurrentPage","UsersContainer","this","pageTitle","React","compose","bind","then","response","totalCount","Header","header","loginBlock","isAuth","from","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccessAC","getAuthUserData","url","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","style","formSummaryControl","length","stopSubmit","_error","initialized","appReducer","friendsReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","app","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","_store_","ProfileContainer","lazy","DialogsContainer","App","initializeApp","Preloader","path","render","exact","Login","AppContainer","withRouter","AppReactSamuraiJS","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","preloader","value","maxLengthCreator","maxLength","posts","likescount","newPostText","onButtonClickEventActionCreator","setStatusAC","errorMessageAC","getUserProfile","errorUpdateStatusMessage","Swal","fire","title","icon","confirmButtonText","file","getState","keySwal","toLowerCase","contacts","Promise","reject","postId"],"mappings":"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","file":"static/js/main.571b9b25.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\nimport { saveProfile } from \"../redux/profileReducer\";\r\n\r\nconst instance = axios.create(\r\n    { \r\n        withCredentials: true,\r\n        baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n        headers: {\r\n            \"API-KEY\": \"1dffc49c-e668-4c39-b402-3387832efdf9\"\r\n        }\r\n    }\r\n)\r\nexport const UsersAPI = {\r\n    getUsers(currentPage, pageSize) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n\r\n    },\r\n    unfollowFriends(userId) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    followFriends(userId) {\r\n        return instance.post(`follow/${userId}`, {})\r\n\r\n    },\r\n    getProfile(userId) {\r\n        console.warn(\"Obsolete method. Please, use profileAPI object!\")\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n\r\n};\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status){\r\n        return instance.put(`profile/status`, {status:status})\r\n    },\r\n    savePhoto(photofile){\r\n        const formData= new FormData ();\r\n        formData.append(\"image\", photofile);\r\n\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }})\r\n    },\r\n    saveProfile(profile){\r\n        return instance.put(`profile`, profile)\r\n    },\r\n\r\n};\r\n\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(\"auth/me\")\r\n    },\r\n    login(email, password, rememberMe=false, captcha=null) {\r\n        return instance.post(`auth/login`,{email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(\"security/get-captcha-url\");\r\n \r\n    }       \r\n\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/user.d7a59735.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__31IqN\",\"item\":\"Navbar_item__FlENb\",\"activeLink\":\"Navbar_activeLink__2ozlJ\"};","\r\n//const updateNewPostTextMessage = \"updateNewPostTextMessage\";\r\nconst onButtonClickEventMessage = \"onButtonClickEventMessage\";\r\ntype dialogType={\r\n    id:number,\r\n    name: string,\r\n    avatar:string\r\n}\r\ntype messageType={\r\n    id:number,\r\n    message:string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: \"Di\",\r\n            avatar: \"https://cdn5.vectorstock.com/i/1000x1000/85/39/cartoon-man-icon-vector-14418539.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Vasily\",\r\n            avatar: \"https://www.vippng.com/png/detail/105-1058737_free-vector-smart-guy-character-vector-characters-png.png\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Egor\",\r\n            avatar: \"https://library.kissclipart.com/20181213/vuw/kissclipart-business-man-cartoon-clipart-businessperson-capita-e980109693cfe80f.jpg \"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Slav\",\r\n            avatar: \"https://img1.cgtrader.com/items/2061469/489ac341d8/man-cartoon-3d-model-max--obj-mtl-fbx-ma-mb.jpg\"\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Olga\",\r\n            avatar: \"https://cdn3.vectorstock.com/i/1000x1000/63/92/school-girl-cartoon-walking-vector-20296392.jpg\"\r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"Nasty\",\r\n            avatar: \"https://image.shutterstock.com/image-vector/happy-african-american-girl-cartoon-260nw-522003124.jpg\"\r\n        }\r\n    ] as Array<dialogType>,\r\n    messages: [\r\n        {message: \"Hi, how are you?\", id: 1},\r\n        {message: \"Hi, it's wonderful day\", id: 2},\r\n        {message: \"Hi, can i ask you?\", id: 3},\r\n        {message: \"Hi, go with me to play football\", id: 4},\r\n        {message: \"Hi\", id: 5},\r\n        {message: \"Hi, say your hobby, please\", id: 6}\r\n    ] as Array<messageType>\r\n\r\n}\r\nexport type initialStateType= typeof initialState\r\nconst dialogsReducer = (state = initialState, action:any): initialStateType => {\r\n    //let stateCopy={...state, messages:[state.messages]}\r\n    //mogno prosto vynesty let stateCopy kak global a copiyu delat' vnutri action takoi glubiny kakaya est' neobhodimost'\r\n    //let stateCopy\r\n    switch (action.type) {\r\n        case onButtonClickEventMessage:\r\n            let newPost = action.newPostTextInDialogs;\r\n            //stateCopy=\r\n            return {\r\n                ...state,\r\n                messages:[...state.messages,{id: 7, message: newPost}],\r\n                \r\n            };\r\n            // stateCopy.dialogs = [...state.dialogs];\r\n            // stateCopy.messages = [...state.messages];\r\n\r\n\r\n            // stateCopy.messages.push({id: 7, message: newPost});\r\n            // stateCopy.newPostTextMessage = \" \";\r\n\r\n\r\n\r\n        // case updateNewPostTextMessage:\r\n        //     // stateCopy=\r\n        //     return {...state, newPostTextInDialogs : action.body};\r\n        //     //stateCopy.newPostTextMessage = action.newPost;\r\n        // //    return stateCopy\r\n        default:\r\n            return state;\r\n    }\r\n \r\n}\r\ntype onButtonClickEventMessageActionCreatorType={\r\n    type:typeof onButtonClickEventMessage,\r\n    newPostTextInDialogs:string\r\n}\r\nexport const onButtonClickEventMessageActionCreator = (newPostTextInDialogs:string):onButtonClickEventMessageActionCreatorType => \r\n({type: onButtonClickEventMessage, newPostTextInDialogs});\r\n// export const updateNewPostTextMessageActionCreator = (body) => ({type: updateNewPostTextMessage, body});\r\nexport default dialogsReducer;","import React, {Suspense} from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\n/* let mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"} />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent; */\r\n    export const withSuspense = (Component) => {\r\n\r\n        return (props) =>(<Suspense fallback={<Preloader/>}>\r\n         <Component {...props}/>\r\n         </Suspense> )\r\n                \r\n                \r\n        \r\n        }\r\n    ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__3rYv-\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.ee41e0f0.svg\";","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\nimport { Field } from \"redux-form\";\r\nexport const FormControl = ({ input, meta:{touched, error}, children, ...props }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div>\r\n            <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n                {children}\r\n              {/*   {React.createElement(el, {...input, ...props})}  */}\r\n              {/*   {props.types === \"input\" ? <input {...input} {...props} /> : <textarea {...input} {...props} />} */}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const{input,meta, child, ...restprops}=props\r\n\r\n    return (<FormControl {...props}  > <textarea {... input} {...restprops}/></FormControl>)\r\n\r\n\r\n}\r\nexport const Input = (props) => {\r\n    const{input,meta, child, ...restprops}=props\r\n\r\n    return (<FormControl {...props}  > <input {... input} {...restprops}/></FormControl>)\r\n}\r\n\r\nexport const createField = (component,  validators, name, placeholder, props={}, text=\" \") =>\r\n (<div>\r\n        <Field component={component}  validate={validators} name={name}\r\n            placeholder={placeholder} {...props} /> {text}\r\n    </div>)\r\n\r\n//HOC\r\n/* const Element = Element => ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n      <div className={ s.formControl + \" \" + (hasError ? s.error : \"\") }>\r\n        <Element {...input} {...props} />\r\n        { hasError && <span> { meta.error } </span> }\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const Textarea = Element(\"textarea\"); */\r\n\r\n\r\n/* export const InputType = ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n            <div>\r\n                {props.types=== \"input\" ? <input {...input} {...props} /> : <textarea {...input} {...props} />}\r\n            </div>\r\n            {hasError && <span className={styles.errorText}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n} */ /* cherez props.types i dobavlenie v fields form svoystva types input ili textarea */\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport s from \"./News.module.css\"\r\n\r\n\r\nconst News= (props) => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default News;","import React from \"react\";\r\nimport s from \"./Music.module.css\"\r\n\r\n\r\nconst Music= (props) => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./Settings.module.css\"\r\n\r\n\r\nconst Settings= (props) => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Settings;","import React from \"react\";\r\nimport s from \"./Friends.module.css\"\r\n\r\n\r\nconst Friends = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.avatar} src={props.avatar}  />\r\n            </div>\r\n            <div className={s.name}>\r\n                {props.name}\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Friends;","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Friends from \"../Friends/Friends\";\r\n\r\n\r\nconsole.log(s)\r\n\r\n// let s={\r\n//     \"nav\": \"Navbar_nav__2h6Uu\",\r\n//     \"item\":\"Navbar_item__3rIFF\"\r\n//     \"activ\": \"jfkhkdhkjfh\"\r\n// }\r\n\r\n// let c1 = \"item\";\r\n// let c2 = \"active\";\r\n// \"item active\"\r\n// let classes = c1 + \" \" + c2;\r\n// let classesNew=`${c1} ${c2}`;\r\n//     `${s.item} ${s.active}`\r\n\r\nconst NavBar = (props) =>{\r\n\r\n    let state=props.friendsPage;\r\n\r\n    let avatarsNew= state.avatars.map(a=> <Friends k={a.id} name={a.name} avatar={a.avatar}/>)\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}><NavLink to={\"profile\"} activeClassName={s.activeLink}> Profile </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"dialogs\"} activeClassName={s.activeLink}> Messages </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"news\"} activeClassName={s.activeLink}> News </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"Music\"} activeClassName={s.activeLink}> Music </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"settings\"} activeClassName={s.activeLink}> Settings </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"users\"} activeClassName={s.activeLink}> Users </NavLink></div>\r\n            <div className={s.item}><NavLink to={\"friends\"} activeClassName={s.activeLink}> <h3>Friends</h3> </NavLink>\r\n                <div>\r\n                    {avatarsNew}\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps=(state)=>{\r\n\r\n    return {\r\n        friendsPage: state.friendsPage\r\n    }\r\n};\r\n\r\nconst NavBarContainer=connect(mapStateToProps)(NavBar);\r\nexport default  NavBarContainer;\r\n\r\n","import React, { useState, FC } from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\"\r\n\r\n\r\n\r\n\r\ntype PropsType={\r\n    totalItemsCount:number,\r\n    pageSize:number,\r\n    currentPage:number,\r\n    onPageChanged:(pageNumber:number)=>void,\r\n    portionSize?:number\r\n}\r\nlet Paginator:React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize=10}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount=Math.ceil(pagesCount/portionSize);\r\n    let [portionNumber, setPortionNumber]=useState(1);\r\n    let leftPortionPageNumber=(portionNumber-1)*portionSize+1;\r\n    let rightPortionPageNumber=portionNumber*portionSize;\r\n\r\n\r\n    return (\r\n        \r\n           <div className={cn(styles.paginator)}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n           \r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Paginator;","import React from \"react\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport s from \"./Users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nlet User = (props) => {\r\n   const u=props.user\r\n\r\n    return (\r\n         <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"profile/\" + u.id}>\r\n                        <img className={s.photo} src={u.photos.small != null ? u.photos.small : userPhoto}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed ?\r\n                            <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                props.unFollow(u.id)\r\n                                \r\n                                \r\n\r\n\r\n                            }}>unFollow</button> :\r\n                            <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                            props.Follow(u.id)}}\r\n                              \r\n\r\n                            >Follow</button>}\r\n                    </div>\r\n                    </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}  </div>\r\n                        <div> {u.status}  </div>\r\n                    </span>\r\n                    <span>\r\n                        <div>  {\"u.location.country\"}</div>\r\n                        <div>  {\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n    \r\n\r\n\r\nexport default User;","import React from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\"\r\nimport { userType } from \"../types/types\";\r\n\r\n\r\ntype PropsType={\r\ntotalUsersCount:number,\r\npageSize:number,\r\ncurrentPage:number,\r\nonPageChanged:(pageNumber:number)=>void,\r\nusers:Array<userType>,\r\nFollow:(userId:number)=>void,\r\nunFollow:(userId:number)=>void,\r\nfollowingInProgress:Array<number>\r\n}\r\n\r\nlet Users:React.FC<PropsType> = ({totalUsersCount, pageSize, currentPage, onPageChanged, users, ...props}) => {\r\n   \r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize} \r\n                currentPage={currentPage} onPageChanged={onPageChanged} />\r\n            </div>   \r\n            {users.map(u => <User user={u} key={u.id} followingInProgress={props.followingInProgress}\r\n             Follow={props.Follow} unFollow={props.unFollow} />)}\r\n                \r\n        </div>)\r\n\r\n}\r\nexport default Users;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) =>{\r\n\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return { ...u, ... newObjProps }\r\n        }\r\n        return u\r\n    })\r\n\r\n\r\n}\r\n ","import { UsersAPI } from \"../API/api\";\r\nimport { updateObjectInArray } from \"../utils/objectHelpers\" ;\r\nimport { photosType, userType } from \"../components/types/types\";\r\n\r\n// const Follow = \"Follow\";\r\n// const unFollow = \"unFollow\";\r\n// const setUsers = \"setUsers\";\r\n// const setCurrentPage = \"setCurrentPage\";\r\n// const setTotalUsersCount = \"setTotalUsersCount\";\r\n// const toggleIsFetching = \"toggleIsFetching\";\r\n// const toggleIsFollowingProgress = \"toggleIsFollowingProgress\";\r\n\r\ntype followingInProgressType={\r\n    userId:number\r\n}\r\nconst initialState = {\r\n    users: [] as Array <userType>,\r\n    pageSize: 10 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true as boolean,\r\n    followingInProgress: [] as Array <number>//id users\r\n    //fake: 10\r\n};\r\nexport type initialStateType=typeof initialState\r\nconst usersReducer = (state = initialState, action:any):initialStateType => {\r\n    switch (action.type) {\r\n/*         case \"fake\": return{...state, fake:state.fake+1}\r\n */        case \"Follow\":\r\n            return {\r\n                ...state,\r\n                // users:[...state.users] odno i toge\r\n                users:updateObjectInArray(state.users, action.userId,\"id\" , {followed:true})\r\n                /*  state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u\r\n                }) */\r\n            };\r\n        case \"unFollow\":\r\n            return {\r\n                ...state,\r\n                // users:[...state.users] odno i toge\r\n                users:updateObjectInArray(state.users, action.userId,\"id\", {followed:false})\r\n                /*  state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u\r\n                }) */\r\n            };\r\n        case \"setUsers\": {\r\n            return { ...state, users: [...action.users] }//skleivaem 2 spread operator\r\n        }\r\n            ;\r\n        case \"setCurrentPage\": {\r\n            return { ...state, currentPage: action.currentPage }\r\n\r\n        }\r\n            ;\r\n        case \"setTotalUsersCount\": {\r\n            return { ...state, totalUsersCount: action.count }\r\n\r\n        }\r\n            ;\r\n        case \"toggleIsFetching\": {\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        }\r\n        case \"toggleIsFollowingProgress\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\ntype followSuccessType={\r\n    type: \"Follow\",\r\n    userId:number\r\n}\r\nexport const followSuccess = (userId:number) : followSuccessType=> ({ type: \"Follow\", userId });\r\ntype unfollowSuccessType={\r\n    type: \"unFollow\",\r\n    userId:number\r\n}\r\nexport const unfollowSuccess = (userId:number):unfollowSuccessType => ({ type: \"unFollow\", userId });\r\ntype setUsersType={\r\n    type: \"setUsers\",\r\n    users:userType\r\n}\r\nexport const setUsers = (users:userType):setUsersType => ({ type: \"setUsers\", users });\r\ntype setCurrentPageType={\r\n    type: \"setCurrentPage\",\r\n    currentPage:number\r\n}\r\nexport const setCurrentPage = (currentPage:number):setCurrentPageType => ({ type: \"setCurrentPage\", currentPage });\r\ntype setTotalUsersCountType={\r\n    type: \"setTotalUsersCount\",\r\n    count:number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount:number):setTotalUsersCountType => ({ type: \"setTotalUsersCount\", count: totalUsersCount });\r\ntype toggleIsFetchingType={\r\n    type: \"toggleIsFetching\",\r\n    isFetching:boolean\r\n}\r\nexport const toggleIsFetching = (isFetching:boolean):toggleIsFetchingType => ({ type: \"toggleIsFetching\", isFetching });\r\ntype toggleIsFollowingProgressType={\r\n    type: \"toggleIsFollowingProgress\",\r\n    isFetching:boolean,\r\n    userId:number\r\n}\r\nexport const toggleIsFollowingProgress = (isFetching:boolean, userId:number):toggleIsFollowingProgressType => ({\r\n    type: \"toggleIsFollowingProgress\",\r\n    isFetching,\r\n    userId\r\n});\r\n\r\nexport const getUsers = (currentPage = 1, pageSize:number) => {\r\n    return (dispatch:any) => {\r\n        dispatch(setCurrentPage(currentPage))\r\n        dispatch(toggleIsFetching(true));\r\n        UsersAPI.getUsers(currentPage, pageSize).then((response:any) => {\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(setUsers(response.data.items));\r\n            dispatch(setTotalUsersCount(response.data.totalCount));\r\n        })\r\n\r\n    }\r\n}\r\nconst followUnfollow = async (dispatch:any, userId:number, apiFunction:any, actionCreator:any) => {\r\n    \r\n        dispatch(toggleIsFollowingProgress(true, userId));\r\n\r\n    let response = await apiFunction(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId));\r\n\r\n}\r\n\r\n\r\n\r\nexport const Follow = (userId:number) => {\r\n    return async (dispatch:any) => {\r\n        /* let apiFunction = UsersAPI.followFriends.bind(UsersAPI);\r\n        let actionCreator = followSuccess; */\r\n        followUnfollow(dispatch, userId, UsersAPI.followFriends.bind(UsersAPI), followSuccess)\r\n\r\n\r\n    }\r\n}\r\n    export const unFollow = (userId:number) => {\r\n        return async (dispatch:any) => { \r\n        /* let apiFunction = UsersAPI.unfollowFriends.bind(UsersAPI);\r\n        let actionCreator = unfollowSuccess; */\r\n        followUnfollow(dispatch, userId,  UsersAPI.unfollowFriends.bind(UsersAPI), unfollowSuccess)\r\n\r\n\r\n    }\r\n}\r\n\r\n    export default usersReducer;","import { createSelector } from \"reselect\"\r\nimport {appStateType} from \"./reduxStoreNew\"\r\n\r\nexport const getUsersForProfile=(state:appStateType)=>{\r\n    return state.usersPage.users;\r\n}\r\n/* export const getUsersSelector=(state)=>{\r\n    return getUsersForProfile(state).filter(u=>true)\r\n} */\r\nexport const getUsersSuperSelector=createSelector(getUsersForProfile,  (users)=>{\r\n    return users.filter(u=>true)\r\n})\r\n\r\nexport const getPageSize=(state:appStateType)=>{\r\n    return state.usersPage.pageSize\r\n} \r\nexport const getTotalUsersCount=(state:appStateType)=>{\r\n    return state.usersPage.totalUsersCount\r\n} \r\nexport const getIsFetching=(state:appStateType)=>{\r\n    return state.usersPage.isFetching\r\n} \r\nexport const getFollowingInProgress=(state:appStateType)=>{\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getCurrentPage=(state:appStateType)=>{\r\n    return state.usersPage.currentPage\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {Follow, getUsers} from \"../../redux/usersReducer\";\r\nimport {unFollow} from \"../../redux/usersReducer\";\r\nimport {compose} from \"redux\";\r\nimport {getFollowingInProgress, getIsFetching, getTotalUsersCount, getCurrentPage, getPageSize, getUsersSuperSelector} from \"../../redux/usersSelectors\";\r\nimport {userType } from \"../types/types\";\r\nimport { appStateType } from \"../../redux/reduxStoreNew\";\r\ntype mapStateToPropsType={\r\n    currentPage:number,\r\n    pageSize:number,\r\n    isFetching:boolean,\r\n    totalUsersCount:number,\r\n    users: Array<userType>,    \r\n    followingInProgress:Array<number>\r\n}\r\ntype mapDispatchToPropsType={\r\n    Follow:(userId:number)=>{},\r\n    unFollow:(userId:number)=>{},\r\n    getUsers:(currentPage:number, pageSize:number)=>void\r\n\r\n}\r\ntype ownPropsType={\r\n    pageTitle:string\r\n\r\n}\r\ntype propsType=mapDispatchToPropsType&mapStateToPropsType&ownPropsType\r\nclass UsersContainer extends React.Component <propsType> {\r\n    // constructor(props) {po ymolchaniuy pishetsya reactcomponent, kotoryi my nasledyem rashiryaem\r\n    //     super(props);konstruktor po ymolchaniyu cosdaetsya\r\n    // }\r\n\r\n\r\n    componentDidMount(){\r\n        // this.props.toggleIsFetching(true);\r\n        // alert(\"new\")\r\n        // getUsers=()=>  {\r\n        //     if(this.props.users.length===0) {\r\n        //   y Dimy zdec' toge zapros na servac\r\n\r\n        // UsersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false);\r\n        //     this.props.setUsers(data.items);\r\n        //     this.props.setTotalUsersCount(data.totalCount);\r\n        // })\r\n        const {currentPage, pageSize}=this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber:number) => {\r\n        const {pageSize}=this.props\r\n        this.props.getUsers(pageNumber, pageSize);\r\n\r\n        \r\n        // this.props.toggleIsFetching(true);\r\n        //\r\n        // // axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`,\r\n        // //     {withCredentials: true})\r\n        // UsersAPI.getUsers\r\n        // (pageNumber, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false);\r\n        //     this.props.setUsers(data.items);\r\n        // })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n/* console.log(\"Users\")\r\n */        return (<>\r\n               {/*  {this.props.isFetching ? <Preloader/> : null} */}\r\n               <h2>{this.props.pageTitle}</h2>\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       onPageChanged={this.onPageChanged}\r\n                       users={this.props.users}\r\n                       Follow={this.props.Follow}\r\n                       unFollow={this.props.unFollow}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                />\r\n\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:appStateType):mapStateToPropsType => {\r\n/*     console.log(\"mapStateToProps Users\")\r\n */    return {\r\n        users: getUsersSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress:getFollowingInProgress(state)\r\n    }\r\n}\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         Follow: (userId) => {\r\n//             dispatch(followAC(userId));\r\n//         },\r\n//         unFollow: (userId) => {\r\n//             dispatch(unFollowAC(userId))\r\n//         },\r\n//         setUsers: (users) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalUsersCount) => {\r\n//             dispatch(setTotalUsersCountAC(totalUsersCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// export default connect(mapStateToProps,\r\n//     {\r\n//         Follow: followAC,\r\n//         unFollow: unFollowAC,\r\n//         setUsers: setUsersAC,\r\n//         setCurrentPage: setCurrentPageAC,\r\n//         setTotalUsersCount: setTotalUsersCountAC,\r\n//         toggleIsFetching: toggleIsFetchingAC\r\n//     })(UsersContainer);\r\n//let withRedirect=withAuthRedirect(UsersContainer)\r\n// export default withAuthRedirect(connect(mapStateToProps,\r\n//     {\r\n//         Follow,\r\n//         unFollow,\r\n//         getUsers\r\n//     })(UsersContainer));\r\nexport default compose(connect<mapStateToPropsType,mapDispatchToPropsType,ownPropsType,appStateType>(mapStateToProps,\r\n    {\r\n        Follow,\r\n        unFollow,\r\n        getUsers\r\n    }))(UsersContainer);","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport { Redirect} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        \r\n\r\n            <header className={s.header}>\r\n                <img src=\"https://s1.logaster.com/static/v3/img/products/logo.png\"/>\r\n                <div className={s.loginBlock}>\r\n                    {props.isAuth ? <div> {props.login}  <button onClick={props.logout  }>Logout</button></div>:\r\n                                        <Redirect from={\"/\"} to={\"/Login\"}/>}\r\n \r\n                    {/* <NavLink to={\"/login\"}>login</NavLink> } */}\r\n                    \r\n                </div>\r\n\r\n            </header>\r\n\r\n        \r\n            )\r\n}\r\n        export default Header;","import { authAPI, securityAPI } from \"../API/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\nconst setUserData = \"setUserData\";\r\nconst getCaptchaUrlSuccess = \"getCaptchaUrlSuccess\";\r\n\r\nexport type initialStateType2 = {\r\n    userId: number|null,    \r\n    email: string|null ,\r\n    login: string|null,\r\n    isAuth: boolean|null,\r\n    captchaUrl:string|null // if null then captcha is not required\r\n};\r\n\r\nlet initialState:initialStateType2 = {\r\n    userId: null as number|null,\r\n    email: null as string|null,\r\n    login: null as string|null,\r\n    isAuth: false as boolean|null,\r\n    captchaUrl: null as string|null // if null then captcha is not required\r\n};\r\nexport type initialStateType= typeof initialState \r\nconst authReducer = (state = initialState, action:any):initialStateType=> {\r\n    switch (action.type) {\r\n        case setUserData:\r\n        case getCaptchaUrlSuccess:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\ntype setAuthUserDataPayloadType={\r\n    userId:number|null,\r\n    email:string|null,\r\n    login:string|null,\r\n    isAuth:boolean|null\r\n}\r\ntype setAuthUserDataType={\r\n    type:typeof setUserData,\r\n    payload:setAuthUserDataPayloadType\r\n}\r\nexport const setAuthUserData = (userId:number|null, email:string|null,\r\n     login:string|null, isAuth:boolean|null):setAuthUserDataType =>\r\n    ({ type: setUserData, payload: { userId, email, login, isAuth } });\r\n//type  getCapcthaUrlSuccessSuccessACPayloadType={\r\n\r\n\r\ntype getCaptchaUrlSuccessACType={\r\n    type: typeof getCaptchaUrlSuccess,\r\n    payload:{captchaUrl:string}\r\n}\r\nexport const getCaptchaUrlSuccessAC = (captchaUrl:string): getCaptchaUrlSuccessACType =>\r\n    ({ type: getCaptchaUrlSuccess, payload: {captchaUrl} });\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch:any) => {\r\n    let response = await authAPI.me()\r\n    /*  .then(response => { */\r\n    if (response.data.resultCode === 0) {\r\n        let { id, email, login } = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n\r\n    return \"vau\";\r\n};\r\n\r\nexport const login = (email:number, password:string,\r\n     rememberMe:boolean, captcha:string) => async (dispatch:any) => {\r\n    /*  let action=stopSubmit(\"login\", {_error:\"CommonError\"});\r\n             dispatch(action) */\r\n\r\n    let response = await authAPI.login(email, password, rememberMe, captcha)\r\n    /* .then(response => { */\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n    } else  {\r\n        if(response.data.resultCode===10){dispatch(getCaptchaUrl())}\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"some error\"\r\n        dispatch(stopSubmit(\"login\", { _error: message }))\r\n    }\r\n\r\n\r\n};\r\nexport const logout = () => async (dispatch:any) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n\r\n\r\n};\r\nexport const getCaptchaUrl = () => async (dispatch:any) => {\r\n\r\n\r\n    const response = await securityAPI.getCaptchaUrl();\r\n\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccessAC(captchaUrl))\r\n\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state)=>({\r\n    isAuth:state.auth.isAuth,\r\n    login:state.auth.login\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps,{ logout})(HeaderContainer);","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { Input, createField } from \"../components/common/formControls/formControls\";\r\nimport { required } from \"../validators/validators\";\r\nimport { connect } from \"react-redux\";\r\nimport { login, getCaptchaUrl } from \"../redux/authReducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport style from \"../components/common/formControls/FormControls.module.css\";\r\n\r\n\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\r\n    debugger\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(Input, [required], \"email\", \"email\")}\r\n            {createField(Input, [required], \"password\", \"password\", { type: \"password\" })}\r\n            {createField(Input, [], \"rememberMe\", null, { type: \"checkbox\" }, \"remember me\")}\r\n\r\n\r\n            {/* <div>\r\n                < Field component={Input}  validate={[required]} name={\"email\"}\r\n                 placeholder={\"email\"}/>\r\n            </div>\r\n            <div>\r\n                < Field component={Input} validate={[required]} type={\"password\"}\r\n                 name={\"password\"} placeholder={\"password\"}/>\r\n\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/>\r\n                remember me\r\n            </div> */}\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl && createField(Input, [required], \"captcha\",  \"symbols from image\", { })}\r\n\r\n            {error && <div className={style.formSummaryControl}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button >login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst LoginReduxForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        //console.log(formData);\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n        //na samom dele eto ne sanka. eto callback iz connect, kotoryi vyzyvaet sanky\r\n\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, { login, getCaptchaUrl })(Login);","import { getAuthUserData } from \"./authReducer\";\r\n\r\nconst initializedSuccess = \"initializedSuccess\";\r\n\r\n/* type initializedSuccessType={\r\n    id:number,\r\n    type: typeof initializedSuccess\r\n  } */\r\n\r\n  \r\nlet initialState = {\r\n    initialized: null as boolean|null \r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst appReducer = (state= initialState, action:initializedSuccessType):initialStateType => {\r\n    switch (action.type) {\r\n        case initializedSuccess:\r\n\r\n            return {\r\n                ...state,\r\n                initialized:true\r\n\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\ntype initializedSuccessType={\r\n\r\n    type: typeof initializedSuccess//typeOf chtoby ispolzovat' peremennyu dlya izbavleniya ot opechatok\r\n  }\r\nexport const initializedSuccessAC = ():initializedSuccessType =>\r\n    ({ type: initializedSuccess });\r\n\r\n\r\nexport const initializeApp = () => (dispatch:any) => {\r\n   let promise=dispatch(getAuthUserData());\r\n   //promise.all([promise1,promise2]) esli nesk promisov\r\n   promise.then(() => {(\r\n   dispatch(initializedSuccessAC()));\r\n   }) \r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default appReducer;","let initialState={\r\n    avatars: [\r\n        {\r\n            id: 1,\r\n            name: \"Dima\",\r\n            avatar: \"https://cdn5.vectorstock.com/i/1000x1000/85/39/cartoon-man-icon-vector-14418539.jpg\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Vasya\",\r\n            avatar: \"https://www.vippng.com/png/detail/105-1058737_free-vector-smart-guy-character-vector-characters-png.png\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Egorka\",\r\n            avatar: \"https://library.kissclipart.com/20181213/vuw/kissclipart-business-man-cartoon-clipart-businessperson-capita-e980109693cfe80f.jpg \"\r\n        }\r\n\r\n    ]as Array <avatarsType>\r\n}\r\n\r\n type avatarsType={\r\n    id:number,\r\n    name:string,\r\n    avatar: string\r\n\r\n}\r\nexport type initialStateType=typeof initialState\r\nconst friendsReducer=(state=initialState):initialStateType=>{\r\n    return state;\r\n}\r\nexport default friendsReducer;","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport friendsReducer from \"./friendsReducer\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport  thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./appReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        friendsPage: friendsReducer,\r\n        usersPage: usersReducer,\r\n        auth: authReducer,\r\n        app:appReducer,\r\n        form: formReducer\r\n    }\r\n)\r\ntype rootReducerType=typeof rootReducer// (globalthis:appStateType)=>appStateType)\r\nexport type appStateType= ReturnType<rootReducerType>\r\n//@ts-ignore\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers( applyMiddleware(thunkMiddleware) ))\r\n//const store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n//@ts-ignore\r\nwindow._store_ = store\r\nexport default store","import React, { Component, Suspense } from 'react';\nimport \"./App.css\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport { BrowserRouter, Route, withRouter, Switch, Redirect } from \"react-router-dom\";\nimport Friends from \"./components/Friends/Friends\";\nimport NavBarContainer from \"./components/NavBar/NavBarContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./login/Login\";\nimport { connect, Provider } from 'react-redux';\nimport { initializeApp } from \"./redux/appReducer\";\nimport { compose } from 'redux';\nimport Preloader from './components/common/Preloader/Preloader';\nimport store from \"./redux/reduxStoreNew\";\nimport { withSuspense } from './hoc/withAuthRedirect';\n\n\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\n\n\nclass App extends Component {\n   /*  catchAllUnhandledErrors = (promise,reason) => {\n        alert(\"Some error occured\");\n    } */\n    componentDidMount() {\n\n        this.props.initializeApp();\n       // window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n   /*  componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    } */\n    \n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader />\n\n        }\n\n        return (\n\n            <div className={\"app-wrapper\"}>\n                {/*  <Redirect from=\"/\" to =\"/login\"/> */}\n                <HeaderContainer />\n                <NavBarContainer />\n                <div className={\"app-wrapper-content\"}>\n                    {/* <Route exact path='/'\n                               render={() => <Redirect to={\"/profile\"}/>}/> */}\n\n\n                    <Suspense fallback={<Preloader />}>\n                        \n                            <Route path={\"/dialogs\"} render={() => <DialogsContainer />} />\n\n                            <Route path={\"/profile/:userId?\"} render={() => <ProfileContainer />} />\n                            <Route path={\"/dialogs\"} render={() => <DialogsContainer />} />\n                            <Route path={\"/users\"} render={() => <UsersContainer pageTitle={\"samurai\"} />} />\n\n                    </Suspense>\n                    <Switch>\n                             <Route exact path={\"/\"} render={() => <Redirect to=\"/profile\"/>}/>\n                           {/*  <Redirect from=\"/\" to={\"/profile\"}/> */}\n                            <Route path={\"/news\"} render={() => <News />} />\n\n                            <Route path={\"/music\"} render={() => <Music />} />\n                            <Route path={\"/settings\"} render={() => <Settings />} />\n                            <Route path={\"/users\"} render={() => <UsersContainer />} />\n{/*                             <Route path={\"/login/facebook\"} render={() => <div>facebook</div>} />\n */}\n                            <Route path={\"/login\"} render={withSuspense(Login)} />\n                            <Route path={\"*\"} render={() => <div>404 not found</div>} />\n\n                            <Route path={\"/friends\"} render={() => <Friends />} />\n                        </Switch>\n                </div>\n                </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => ({\n                    initialized: state.app.initialized\n})\n\nlet AppContainer = compose(\n    withRouter,\n    connect(mapStateToProps, { initializeApp}))(App);\n\nconst AppReactSamuraiJS = (props) => {\n    return (\n                <BrowserRouter >\n                    <Provider store={store}>\n                        <AppContainer />\n                    </Provider>\n                </BrowserRouter>)\n}\nexport default AppReactSamuraiJS;","import * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppReactSamuraiJS from './App';\n// import {Provider} from \"./ContextStore\";\n/* setInterval(()=>{\n    store.dispatch({type:\"fake\"})\n},1000); */\n\n\n\n// export let rerenderEntireTree = (state) => {}\n\n    ReactDOM.render(<AppReactSamuraiJS/>, document.getElementById('root'));\n\n\n\n// rerenderEntireTree(store.getState());\n// // store.subscribe(() => {\n// //     let state = store.getState();\n// //     rerenderEntireTree(state);\n// // })\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1hZnh\",\"error\":\"FormControls_error__3kieA\",\"formSummaryControl\":\"FormControls_formSummaryControl__1oDtp\"};","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <img src={preloader}/>\r\n\r\n    )\r\n}\r\nexport default Preloader;","export const required=value=>{\r\n    if(value) return undefined ;\r\n        return \"Field is required\";\r\n\r\n}\r\nexport const maxLengthCreator=(maxLength)=>(value)=>{\r\n\r\n    if(value.length>maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\nexport const minLengthCreator=(minLength)=>(value)=>{\r\n\r\n    if(value.length<minLength) return `Min length is ${minLength} symbols`;\r\n    return undefined;\r\n}\r\n//export const maxLength=value=>{\r\n//     if(value.length<30)   return \"More than  required\";\r\n//     return undefined;\r\n// }\r\n// export const minLength=value=>{\r\n//     if(value.length>2) return undefined;\r\n//     return \"More is required\";\r\n//\r\n// }\r\n// const maxLength = max => value =>\r\n//     value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n// export const maxLength15 = maxLength(15)\r\n// const minLength = min => value =>\r\n//     value && value.length < min ? `Must be ${min} characters or more` : undefined\r\n// export const minLength2 = minLength(2)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2Nu1e\",\"pageNumber\":\"Paginator_pageNumber__37yci\"};","import { profileAPI, UsersAPI } from \"../API/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport Swal from 'sweetalert2';\r\nimport { postsType, profileType, photosType } from \"../components/types/types\";\r\nconst updateNewPostText = \"updateNewPostText\";\r\nconst onButtonClickEvent = \"onButtonClickEvent\";\r\nconst setUserProfile = \"setUserProfile\";\r\nconst setStatus = \"setStatus\";\r\nconst setPhoto = \"setPhoto\"\r\nconst deletePost = \"deletePost\";\r\nconst errorMessage = \"errorMessage\";\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: \"Hi, how are you?\", likescount: 23 },\r\n        { id: 2, message: \"Hi, it\\'s my first day in social network\", likescount: 102 },\r\n        { id: 3, message: \"slava tebe Boje!\", likescount: 114 },\r\n        { id: 4, message: \"superrrrrrrrrrrrr\", likescount: 596 },\r\n        { id: 5, message: \"uraaaaaaaaaaaaa\", likescount: 1020 }\r\n\r\n    ] as Array<postsType>,\r\n\r\n    profile: null as profileType | null,\r\n    status: \"\",\r\n    error: null as any|null,\r\n    newPostText:\"\"\r\n};\r\ntype errorType={\r\n    error:any\r\n}\r\n\r\n\r\n/* export type initialStateType={\r\n    profile:any,\r\n    status:string|null,\r\n    error:any,\r\n    posts:Array<postsType>\r\n\r\n} */\r\nexport type initialStateType=typeof initialState\r\nconst profileReducer = (state = initialState, action: any):initialStateType => {\r\n    switch (action.type) {\r\n        case onButtonClickEvent:\r\n            // let newPost = {\r\n            //     id: 6,\r\n            //     message: state.newPostText,\r\n            //     likescount: 0\r\n            // }\r\n            // state.posts.push(newPost);\r\n            // state.newPostText = \" \";\r\n            let newPost = action.newPostText;\r\n            // let stateCopy\r\n            return {\r\n                ...state,\r\n\r\n                posts: [...state.posts, { id: 7, message: newPost, likescount: 3 }]\r\n            };\r\n        // stateCopy.posts=[...state.posts];\r\n        // stateCopy.newPostText = \" \";\r\n        // stateCopy.posts.push({id: 7, message: newPost ,likescount:3});\r\n        // case updateNewPostText: {\r\n        //     // let stateCopy =\r\n        //     return {...state, newPostText: action.newPost};\r\n        //     // stateCopy.newPostText = action.newPost;\r\n        // return stateCopy;}\r\n\r\n        case setUserProfile:\r\n            return { ...state, profile: action.profile };\r\n        case setStatus:\r\n            return { ...state, status: action.status };\r\n        case deletePost:\r\n            return { ...state, posts: state.posts.filter(p => p.id != action.postId) }\r\n        case setPhoto:\r\n            return { ...state,profile:{...state.profile, photos: action.photos }as profileType } ;\r\n        case errorMessage:\r\n            return { ...state.error, error: action.error }\r\n        default:\r\n\r\n            return state;\r\n\r\n\r\n    }\r\n};\r\ntype deletePostActionCreatorType={\r\n    type:typeof deletePost,\r\n    postId: number\r\n}\r\nexport const deletePostActionCreator = (postId:number): deletePostActionCreatorType => ({ type: deletePost, postId });\r\ntype onButtonClickEventActionCreatorType={\r\ntype: typeof onButtonClickEvent,\r\nnewPostText:string,\r\n\r\n}\r\nexport const onButtonClickEventActionCreator = (newPostText:string):onButtonClickEventActionCreatorType =>\r\n ({ type: onButtonClickEvent, newPostText });\r\n type updateNewPostTextActionCreatorType={\r\n     type:typeof updateNewPostText,\r\n     newPost:string\r\n }\r\nexport const updateNewPostTextActionCreator = (text:string):updateNewPostTextActionCreatorType => \r\n({ type: updateNewPostText, newPost: text });\r\n\r\ntype setUserProfileACType={\r\n    type:typeof setUserProfile,\r\n    profile:profileType\r\n}\r\nexport const setUserProfileAC = (profile:profileType):setUserProfileACType => ({ type: setUserProfile, profile });\r\ntype setStatusACType={\r\ntype:typeof setStatus,\r\nstatus:string\r\n}\r\nexport const setStatusAC = (status:string):setStatusACType => ({ type: setStatus, status });\r\ntype savePhotoSuccessType={\r\n    type:typeof setPhoto,\r\n    photos:photosType\r\n\r\n}\r\nexport const savePhotoSuccess = (photos:photosType):savePhotoSuccessType => ({ type: setPhoto, photos });\r\ntype errorMessageACType={\r\n    type: typeof errorMessage,\r\n    error:any\r\n}\r\nexport const errorMessageAC = (error:any): errorMessageACType => ({ type: errorMessage, error })\r\n\r\n\r\n\r\nexport const getUserProfile = (userId:number) => async (dispatch:any) => {\r\n\r\n    let response = await UsersAPI.getProfile(userId)\r\n    /*  .then(response => { */\r\n    dispatch(setUserProfileAC(response.data));\r\n\r\n};\r\n\r\nexport const getStatus = (userId:number) => async (dispatch:any) => {\r\n\r\n    let response = await profileAPI.getStatus(userId)\r\n\r\n\r\n    dispatch(setStatusAC(response.data));\r\n\r\n\r\n};\r\nexport const errorUpdateStatusMessage = (status:string, error:any) => async (dispatch:any) => {\r\n\r\n    const response = await profileAPI.updateStatus(status)\r\n\r\n    if (response.data.resultCode != 0) { dispatch(errorMessageAC(error)) }\r\n\r\n}\r\n\r\nexport const updateStatus = (status:string) => async (dispatch:any) => {\r\n    debugger\r\n\r\n    try {\r\n        const response = await profileAPI.updateStatus(status)\r\n\r\n        if (response.data.resultCode === 0) { dispatch(setStatusAC(status)) }\r\n    }\r\n    catch (error) {\r\n\r\n        errorUpdateStatusMessage(status,error);\r\n        // alert(error)\r\n        Swal.fire({\r\n            title: 'Error!',\r\n            text: 'Do you want to continue',\r\n            icon: 'error',\r\n            confirmButtonText: error\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n};\r\nexport const savePhoto = (file:any) => async (dispatch:any) => {\r\n\r\n    let response = await profileAPI.savePhoto(file)\r\n\r\n    if (response.data.resultCode === 0) { dispatch(savePhotoSuccess(response.data.data.photos)) }\r\n\r\n\r\n};\r\nexport const saveProfile = (profile:profileType) => async (dispatch:any, getState:any) => {\r\n    const userId = getState().auth.userId\r\n    const response = await profileAPI.saveProfile(profile)\r\n\r\n    if (response.data.resultCode === 0) { dispatch(getUserProfile(userId)) }\r\n    else { /* let wrongNetwork = response.data.messages[0]\r\n        .slice(\r\n          response.data.messages[0].indexOf(\">\") + 1,\r\n          response.data.messages[0].indexOf(\")\")\r\n        )\r\n        .toLocaleLowerCase(); */        //popisyvaet-vyvodit soobshchenie pod nygnym inputom\r\n\r\n\r\n        // let confirmButtonText = response.data.messages[0].match(/Contacts->(\\w+)/)[1]\r\n        let keySwal = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\r\n\r\n        Swal.fire({\r\n            title: 'Error!',\r\n            text: 'You wrote not right site',\r\n            icon: 'error',\r\n            confirmButtonText: keySwal\r\n        })\r\n        let key = response.data.messages[0].match(/Contacts->(\\w+)/)[1].toLowerCase();\r\n        dispatch(\r\n            stopSubmit(\"editProfile\", {\r\n                contacts: { [key]: response.data.messages[0] }\r\n            })\r\n        )\r\n        return Promise.reject(response.data.messages[0]\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default profileReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Friends_avatar__1TLkd\",\"name\":\"Friends_name__3a4yJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1Vuvt\",\"loginBlock\":\"Header_loginBlock__5rKvQ\"};"],"sourceRoot":""}