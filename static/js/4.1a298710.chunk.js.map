{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPostsForm/MyPostsForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","onClick","className","style","formSummaryControl","createField","Textarea","Input","type","Object","keys","contacts","map","key","s","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileData","isOwner","toEditMode","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","src","descriptionBlock","photos","large","userPhoto","target","files","length","initialValues","formData","then","Post","item","message","likescount","maxLength10","maxLengthCreator","MyPostsReduxForm","Field","name","component","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","reverse","p","id","postsBlock","dispatch","onButtonClick","newPostText","reset","MyPostsContainer","connect","state","profilePage","onButtonClickEventActionCreator","window","Profile","ProfileContainer","userId","this","match","params","authUserId","history","push","getUserProfile","getStatus","refreshMethod","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,iBAAmB,sCAAsC,UAAY,+BAA+B,SAAW,gC,oBCA1LD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,iKC2DVC,EADqBC,YAAU,CAAEC,KAAM,eAAlBD,EAjDZ,SAAC,GAAsC,IAApCE,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC9C,OAEI,0BAAMC,SAAUH,GACZ,6BAEI,6BAAM,4BAAQI,QAAS,cAAjB,SAGLF,GAAS,yBAAKG,UAAWC,IAAMC,oBAC3BL,EADK,KAIV,iCAAM,uCAAN,IAAuBM,YAAYC,IAAU,GACzC,UAAW,YADf,KAMA,6BACI,uCADJ,IACqBD,YAAYE,IAAO,GAAI,WAAY,cAExD,6BACI,gDADJ,KAC+BF,YAAYE,IAAO,GAAI,iBAAkB,GAAI,CAAEC,KAAM,cAGpF,6BACI,qDADJ,IAESH,YAAYC,IAAU,GACvB,4BAA6B,2BAKrC,6BACI,uCADJ,KACsBG,OACbC,KAAKZ,EAAQa,UAAUC,KAAI,SAACC,GACzB,OAAO,yBAAKA,IAAKA,EAAKX,UAAWY,IAAEH,UAC/B,+BAAKE,EAAL,KAAYR,YAAYE,IAAO,GAAI,YAAcM,EAAKA,cCOvEE,EAlDgB,SAACC,GAAU,MAGRC,oBAAS,GAHD,mBAGjCC,EAHiC,KAGvBC,EAHuB,OAIZF,mBAASD,EAAMI,QAJH,mBAIjCA,EAJiC,KAIzBC,EAJyB,KAMtCC,qBAAU,WAEND,EAAUL,EAAMI,UAAW,CAACJ,EAAMI,SA0BtC,OACI,8BAEMF,GACE,6BACI,0BAAMK,cA1BG,WACrBJ,GAAY,KAyByCH,EAAMI,QAAU,cAGhEF,GACG,6BACI,2BAAOM,OA5BI,WACvBL,GAAY,GACZH,EAAMS,aAAaL,IA0B4BM,SAjB5B,SAACC,GACpBN,EAAUM,EAAEC,cAAcC,QAgB+CC,WAAW,EAAMD,MAAOT,O,kBCqBnGW,EAAc,SAAC,GAAsC,IAApCjC,EAAmC,EAAnCA,QAASkC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACrC,OACI,6BACI,6BAAMD,GAAW,4BAAQ/B,QAASgC,GAAjB,QAAjB,KAGA,iCAAM,uCAAN,IAAuBnC,EAAQoC,QAA/B,KAOA,6BACI,uCADJ,KACsBpC,EAAQqC,UAE9B,6BACI,gDADJ,KAC+BrC,EAAQsC,eAAiB,MAAQ,MAE/DtC,EAAQsC,gBACL,6BACI,qDADJ,KACoCtC,EAAQuC,2BAGhD,6BACI,uCADJ,KACsB5B,OACbC,KAAKZ,EAAQa,UAAUC,KAAI,SAACC,GACzB,OAAO,kBAAC,EAAD,CAASA,IAAKA,EACjByB,aAAczB,EAAK0B,aAAczC,EAAQa,SAASE,WAgBjE2B,EAAU,SAAC,GAAoC,IAAlCF,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACpC,OAAO,yBAAKrC,UAAWY,IAAEH,UAAlB,KAA8B,2BAAI2B,GAAlC,IAAqDC,IAKjDE,EAhHK,SAAC,GAAwE,IAAtE3C,EAAqE,EAArEA,QAASsB,EAA4D,EAA5DA,OAAQK,EAAoD,EAApDA,aAAcO,EAAsC,EAAtCA,QAASU,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAAkB,EAC1D1B,oBAAS,GADiD,mBACnFC,EADmF,KACzEC,EADyE,KAGxF,IAAKrB,EACD,OAAO,kBAAC8C,EAAA,EAAD,MAuCX,OACI,6BACI,6BAAK,yBAAKC,IAAK,8DACf,yBAAK3C,UAAWY,IAAEgC,kBACd,yBAAKD,IAAK/C,EAAQiD,OAAOC,OAASC,IAAW/C,UAAWY,IAAEmC,YACzDjB,GAAW,2BAAOxB,KAAM,OAAQkB,SAzBjB,SAACC,GACrBA,EAAEuB,OAAOC,MAAMC,QACfV,EAAUf,EAAEuB,OAAOC,MAAM,OAwBrB,iCAAM,qCAAN,IAAoB,kBAAC,EAAD,CAAwB/B,OAAQA,EAAQK,aAAcA,IAA1E,KACA,kCAAQP,EAAW,kBAAC,EAAD,CAAiBmC,cAAevD,EAASA,QAASA,EAASE,SApBzE,SAACsD,GAGdX,EAAYW,GACXC,MACG,WACIpC,GAAY,SAc2F,kBAAC,EAAD,CAAarB,QAASA,EAASkC,QAASA,EAC3IC,WAAY,WAAQd,GAAY,MADpC,Q,oDCnCDqC,EApBF,SAACxC,GAEV,OAEI,yBAAKd,UAAWY,IAAE2C,MAEd,yBAAKZ,IAAK,6EACT7B,EAAM0C,QAGP,6BACI,8BACI,yBAAKb,IAAK,sDACT7B,EAAM2C,e,gBCXrBC,EAAYC,YAAiB,IAgCrBC,EAAiBnE,YAAU,CAErCC,KAAM,eAFqBD,EA/BX,SAACqB,GAiBjB,OAEI,0BAAMhB,SAAUgB,EAAMnB,cAClB,6BACI,kBAACkE,EAAA,EAAD,CAASC,KAAM,cAAeC,UAAW3D,IAAU4D,YAAa,gBACvDC,SAAU,CAACC,IAAUR,MAGlC,6BACI,8C,QCqFDS,G,OA7GDC,IAAMC,MAAK,SAAAvD,GAyCjB,IAAIwD,EAAgB,YAAIxD,EAAMyD,OAC7BC,UACA9D,KAAI,SAAA+D,GAAC,OAAI,kBAAC,EAAD,CAAOjB,QAASiB,EAAEjB,QAAS7C,IAAK8D,EAAEC,GAAIjB,WAAYgB,EAAEhB,gBAO9D,OAEI,yBAAKzD,UAAWY,IAAE+D,YACd,6BAAK,yCACD,6BACI,kBAACf,EAAD,eAAkB9D,SAXb,SAAC6B,EAAOiD,GACzB9D,EAAM+D,cAAclD,EAAMmD,aAC1BF,EAASG,YAAM,kBAS6CjE,MAUxD,yBAAKd,UAAWY,IAAE2D,OACbD,Q,QC9BNU,EADUC,aAvCD,SAACC,GACrB,MAAO,CACHX,MAAOW,EAAMC,YAAYZ,MACzBO,YAAaI,EAAMC,YAAYL,gBAIZ,SAACF,GACxB,MAAO,CACHC,cAAe,SAACC,GACZF,EAASQ,YAAgCN,QA6B5BG,CAA8Cd,GCvCvEkB,OAAOvE,MAAQ,GACf,IAaewE,EAbC,SAACxE,GAIb,OACI,6BACI,kBAAC,EAAD,CAAa2B,YAAa3B,EAAM2B,YAAaD,UAAW1B,EAAM0B,UAAWV,QAAShB,EAAMgB,QAASlC,QAASkB,EAAMlB,QAASsB,OAAQJ,EAAMI,OAAQK,aAAcT,EAAMS,eACnK,kBAAC,EAAD,Q,eCJNgE,E,8KAEE,IAAIC,EAASC,KAAK3E,MAAM4E,MAAMC,OAAOH,OAEhCA,IACDA,EAASC,KAAK3E,MAAM8E,YACjBJ,GAAUC,KAAK3E,MAAM+E,QAAQC,KAAK,UAGzCL,KAAK3E,MAAMiF,eAAeP,GAE1BC,KAAK3E,MAAMkF,UAAUR,K,0CAKrBC,KAAKQ,kB,yCAIUC,EAAWC,EAAWC,GAEjCX,KAAK3E,MAAM4E,MAAMC,OAAOH,QAAUU,EAAUR,MAAMC,OAAOH,QAC1DC,KAAKQ,kB,+BAQR,OACI,kBAAC,EAAD,eAASzD,UAAWiD,KAAK3E,MAAM0B,UAC3BV,SAAU2D,KAAK3E,MAAM4E,MAAMC,OAAOH,QAC9BC,KAAK3E,MAFb,CAEoBlB,QAAS6F,KAAK3E,MAAMlB,QACpCsB,OAAQuE,KAAK3E,MAAMI,OACnBK,aAAckE,KAAK3E,MAAMS,aACzBkB,YAAagD,KAAK3E,MAAM2B,mB,GArCT2B,IAAMiC,WAoEtBC,sBAAQrB,aAbD,SAACC,GAEnB,MAAQ,CACJtF,QAASsF,EAAMC,YAAYvF,QAC3BsB,OAAQgE,EAAMC,YAAYjE,OAC1B0E,WAAYV,EAAMqB,KAAKf,OACvBgB,OAAQtB,EAAMqB,KAAKC,UAOqB,CAC5CT,mBACAC,cACAzE,iBACAiB,cACAC,kBACAgE,IANWH,CAMCf","file":"static/js/4.1a298710.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3wrlI\",\"poiskRabotyPhoto\":\"ProfileInfo_poiskRabotyPhoto__28MWN\",\"userPhoto\":\"ProfileInfo_userPhoto__3S0fK\",\"contacts\":\"ProfileInfo_contacts__13Xn-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__27Vvm\",\"posts\":\"MyPosts_posts__3klq2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2x9zK\"};","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n//import { Contact } from \"./ProfileInfo\";\r\nimport { createField, Input, Textarea } from \"../../common/formControls/formControls\"\r\nimport { reduxForm } from \"redux-form\";\r\nimport style from \"../../common/formControls/FormControls.module.css\";\r\n\r\n\r\n\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                \r\n                <div>{<button onClick={() => { }}>save</button>} \r\n                \r\n                </div>\r\n                {error && <div className={style.formSummaryControl}>\r\n                    {error} </div>}\r\n\r\n                {/*<textarea value={aboutMe} cols=\"30\" rows=\"10\"/>*/}\r\n                <div> <b>About me</b>:{createField(Textarea, [],\r\n                    \"aboutMe\", \"about me\")} </div>\r\n\r\n                {/*<>{props.profile.contacts}</>*/}\r\n\r\n\r\n                <div>\r\n                    <b>Fullname</b>:{createField(Input, [], \"fullName\", \"Full name\")}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>: {createField(Input, [], \"lookingForaJob\", \"\", { type: \"checkbox\" })}\r\n                </div>\r\n\r\n                <div>\r\n                    <b>My professional skills</b>:\r\n                        {createField(Textarea, [],\r\n                        \"lookingForaJobDescription\", \"My professional skills\")}\r\n                </div>\r\n\r\n\r\n\r\n                <div>\r\n                    <b>contacts</b>: {Object\r\n                        .keys(profile.contacts).map((key) => {\r\n                            return <div key={key} className={s.contacts}>\r\n                                <b> {key}: {createField(Input, [], \"contacts.\" + key, key)}</b>\r\n                            </div>\r\n                        })}\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\nexport const ProfileDataReduxForm = reduxForm({ form: 'editProfile' })(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import React, { useState, useEffect } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    \r\n    //let stateWithSetState=useState(true);\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        \r\n        setStatus(props.status) }, [props.status])\r\n\r\n    /* let editMode=stateWithSetState[0];\r\n    let setEditMode=stateWithSetState[1]; */\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n\r\n    }\r\n\r\n    /* if(status!==props.status)\r\n            { setStatus({status:props.status})} */\r\n\r\n\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode} >{props.status || \"no STATUS\"}</span>\r\n                </div>}\r\n\r\n            {editMode &&\r\n                <div>\r\n                    <input onBlur={deActivateEditMode} onChange={onStatusChange} autoFocus={true} value={status} />\r\n                </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import React, { useState } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileDataForm from \"./ProfileDataForm\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\n\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    //\r\n    // let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} avatar={d.avatar} id={d.id}/>);\r\n    //let contactsElements = props.profile.contacts.map(c => c.contacts);\r\n    // let newPostTextMessage = state.newPostTextMessage;\r\n\r\n    //let aboutMe = props.profile.aboutMe;\r\n\r\n    // let Contacts = props.profile.contacts.map( function(obj){return obj.value});\r\n    // for(i=0; i<ContactsMassive.length;i++){\r\n    //     let element=ContactMassive[i]\r\n    // }\r\n    // // if(props.profile.lookingForAJob===true){return ( \"i am looking a job\")}\r\n    //  let Contacts=[\"facebook\",  \"website\", \"vk\", \"twitter\", \"instagram\", \"youtube\", \"github\", \"mainLink\"];\r\n    //  let index;\r\n    //  for (index=0; index<Contacts.length, ++index;){ (Contacts[index])};\r\n    //  let state=props.profile.contacts;\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n\r\n        }\r\n\r\n    }\r\n    const onSubmit = (formData) => {\r\n        //saveProfile(formData);\r\n        //setEditMode(false)\r\n        saveProfile(formData)\r\n        .then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        )\r\n    }\r\n        \r\n\r\n\r\n    return (\r\n        <div>\r\n            <div><img src={\"https://klike.net/uploads/posts/2019-01/1547365376_1.jpg\"} /></div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.userPhoto} />\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n                <div> <b>Status</b> <ProfileStatusWithHooks status={status} updateStatus={updateStatus} /> </div>\r\n                <div>  {editMode ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} /> : <ProfileData profile={profile} isOwner={isOwner}\r\n                    toEditMode={() => { setEditMode(true) }} />} </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ProfileData = ({ profile, isOwner, toEditMode }) => {\r\n    return (\r\n        <div>\r\n            <div>{isOwner && <button onClick={toEditMode}>edit</button>} </div>\r\n\r\n            {/*<textarea value={aboutMe} cols=\"30\" rows=\"10\"/>*/}\r\n            <div> <b>About me</b> {profile.aboutMe} </div>\r\n            {/*     <div>{\"Poisk raboty:\" + profile.lookingForAJobDescription}</div>\r\n            <div>{profile.lookingForAJob === true ?\r\n                <img className={s.poiskRabotyPhoto} src={\"https://ruherald.com/wp-content/uploads/2018/06/jobs5.jpg\"} /> : null}</div> */}\r\n            {/*<>{props.profile.contacts}</>*/}\r\n\r\n\r\n            <div>\r\n                <b>Fullname</b>  {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>contacts</b>: {Object\r\n                    .keys(profile.contacts).map((key) => {\r\n                        return <Contact key={key}\r\n                            contactTitle={key} contactValue={profile.contacts[key]} />\r\n                    })}\r\n            </div>\r\n            {/*    <div>\r\n                <div>{profile.contacts.facebook}</div>\r\n                <div>{profile.contacts.youtube}</div>\r\n                <div>{profile.contacts.vk}</div>\r\n                <div>{profile.contacts.instagram}</div>\r\n                <div>{profile.contacts.github}</div>\r\n                <div>{profile.contacts.twitter}</div>\r\n                <div>{profile.contacts.website}</div>\r\n            </div> */}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport const Contact = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contacts}>  <b>{contactTitle}</b>:{contactValue}\r\n    </div>\r\n\r\n\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n\r\n    return (\r\n\r\n        <div className={s.item}>\r\n\r\n            <img src={\"https://cdn3.iconfinder.com/data/icons/many-peoples-vol-2/512/16-512.png\"}/>\r\n            {props.message}\r\n\r\n\r\n            <div>\r\n                <span>\r\n                    <img src={\"https://img.icons8.com/plasticine/2x/like--v1.png\"}/>\r\n                    {props.likescount}\r\n                </span>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Post;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport { maxLengthCreator,  required} from \"../../../validators/validators\";\r\nimport { Textarea } from \"../../common/formControls/formControls\";\r\n\r\nconst maxLength10=maxLengthCreator(10);\r\nconst MyPostsForm = (props) => {\r\n\r\n    //let newPost = React.createRef();\r\n\r\n    // let onButton = () => {\r\n    //     props.onButtonClick();\r\n        // eslint-disable-next-line no-undef\r\n        // props.dispatch(onButtonClickEventActionCreator());    }\r\n    //let onPostChange = (e) => {\r\n    //     // let text = newPost.current.value;\r\n    //     let text = e.target.value;\r\n    //     props.updateNewPostText(text);\r\n    //     // let action=updateNewPostTextActionCreator(text);\r\n    //     // props.dispatch(action);\r\n    // }\r\n    // let newPostText = props.newPostText;\r\n    \r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n                <Field   name={\"newPostText\"} component={Textarea} placeholder={\"enter message\"}\r\n                         validate={[required, maxLength10]}  />\r\n            </div>\r\n\r\n            <div>\r\n                <button >Press</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n export const MyPostsReduxForm=reduxForm({\r\n    // a unique name for the form\r\n    form: 'MyPostsForm'\r\n})(MyPostsForm);\r\n\r\n\r\n//  const MyPostsInForm = (props) => {\r\n//     return (\r\n//         <div>\r\n//             <MyPostsReduxForm onSubmit={props.onSubmit} />\r\n//         </div>\r\n//     )\r\n// }\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         posts: state.profilePage.posts,\r\n//         newPostText: state.profilePage.newPostText\r\n//     }\r\n// }\r\n//\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         onButtonClick: () => {\r\n//             dispatch(onButtonClickEventActionCreator());\r\n//         },\r\n//         updateNewPostText: (text) => {\r\n//             dispatch(updateNewPostTextActionCreator(text))\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { MyPostsReduxForm } from \"../MyPostsForm/MyPostsForm\";\r\nimport { reset } from 'redux-form'\r\nimport { render } from \"@testing-library/react\";\r\n\r\n//window.props=[];\r\nconst MyPosts=React.memo(props=>  {\r\n    /* window.props.push(props);\r\n    console.log(\"render\");\r\n    console.log(props); */\r\n\r\n\r\n    //let newPost = React.createRef();\r\n    // let onButton = () => {\r\n    //     props.onButtonClick();\r\n    //     // eslint-disable-next-line no-undef\r\n    //     // props.dispatch(onButtonClickEventActionCreator());\r\n    //\r\n    // }\r\n    //\r\n    // let onPostChange = (e) => {\r\n    //     // let text = newPost.current.value;\r\n    //     let text = e.target.value;\r\n    //     props.updateNewPostText(text);\r\n    //     // let action=updateNewPostTextActionCreator(text);\r\n    //     // props.dispatch(action);\r\n    // }\r\n    //\r\n    // let newPostText = props.newPostText;\r\n    /* componentDidUpdate() {\r\n        console.log(\"componentDidUpdate\")\r\n    } */\r\n  /*   componentDidMount (){\r\n        setTimeout(()=>{\r\n            this.setState({a:12})\r\n        },3000)\r\n\r\n    } */\r\n   /*  shouldComponentUpdate(nextProps,nextState){\r\n      return  nextProps !=this.props || nextState!=this.state \r\n\r\n    }  */\r\n\r\n    /* \r\n        console.log(\"render\");\r\n        console.log(props); */\r\n\r\n        let postsElements = [...props.posts]\r\n        .reverse()\r\n        .map(p => <Post  message={p.message} key={p.id} likescount={p.likescount} />);\r\n        let addNewPostText = (value, dispatch) => {\r\n            props.onButtonClick(value.newPostText);\r\n            dispatch(reset('MyPostsForm'))\r\n        }\r\n\r\n        \r\n        return (\r\n\r\n            <div className={s.postsBlock}>\r\n                <div><h3> My post </h3>\r\n                    <div>\r\n                        <MyPostsReduxForm onSubmit={addNewPostText} {...props} />\r\n                    </div>\r\n                    {/*<div>*/}\r\n                    {/*    <textarea onChange={onPostChange} placeholder={\"enter svoi posty\"} value={newPostText}/>*/}\r\n                    {/*</div>*/}\r\n                    {/*<div>*/}\r\n                    {/*    <button onClick={onButton}>Add post</button>*/}\r\n                    {/*</div>*/}\r\n\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n)\r\n// function MyPostsForm (props) {\r\n//\r\n//     //let newPost = React.createRef();\r\n//\r\n//     // let onButton = () => {\r\n//     //     props.onButtonClick();\r\n//     // eslint-disable-next-line no-undef\r\n//     // props.dispatch(onButtonClickEventActionCreator());    }\r\n//     //let onPostChange = (e) => {\r\n//     //     // let text = newPost.current.value;\r\n//     //     let text = e.target.value;\r\n//     //     props.updateNewPostText(text);\r\n//     //     // let action=updateNewPostTextActionCreator(text);\r\n//     //     // props.dispatch(action);\r\n//     // }\r\n//     // let newPostText = props.newPostText;\r\n//     return (\r\n//\r\n//         <form onSubmit={props.handleSubmit} >\r\n//             <div>\r\n//                 < Field   name={\"newPostText\"} component={\"textarea\"}\r\n//                           placeholder={\"Enter your post\"} validate={[required, maxLength]} typeField={textareaForm}/>\r\n//             </div>\r\n//\r\n//             <div>\r\n//                 <button >Press</button>\r\n//             </div>\r\n//         </form>\r\n//     )\r\n// }\r\n// const MyPostsReduxForm=reduxForm({\r\n//     // a unique name for the form\r\n//     form: 'MyPostsForm'\r\n// })(MyPostsForm);\r\nexport default MyPosts;","import {onButtonClickEventActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onButtonClick: (newPostText) => {\r\n            dispatch(onButtonClickEventActionCreator(newPostText));\r\n        },\r\n        // updateNewPostText: (text) => {\r\n        //     dispatch(updateNewPostTextActionCreator(text))\r\n        // }\r\n    }\r\n}\r\n\r\n\r\n// const MyPostsContainer = (props) => {\r\n//\r\n//     return (\r\n//         <ContextStore.Consumer>{(store)=> {\r\n//             let state = store.getState();\r\n//             let onButtonClick = () => {\r\n//                 // eslint-disable-next-line no-undef\r\n//                 store.dispatch(onButtonClickEventActionCreator());\r\n//             }\r\n//             let onPostChange = (text) => {\r\n//                 let action = updateNewPostTextActionCreator(text);\r\n//                 store.dispatch(action);\r\n//             }\r\n//             return(<MyPosts updateNewPostText={(onPostChange)} onButtonClick={(onButtonClick)} posts={state.profilePage.posts}\r\n//                      newPostText={state.profilePage.newPostText}/>)}}\r\n//\r\n//         </ContextStore.Consumer>\r\n//     )}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps )(MyPosts);\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nwindow.props = []\r\nconst Profile = (props) => {\r\n   // window.props.push(props)\r\n\r\n   // console.log(\"profile\");\r\n    return (\r\n        <div>\r\n            <ProfileInfo saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { getStatus, getUserProfile, updateStatus, savePhoto, saveProfile } from \"../../redux/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\n//import {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshMethod() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authUserId\r\n        } if (!userId) { this.props.history.push(\"/login\") }\r\n        //axios.get(`https://social-network.samuraijs.com/api/1.0/profile/`+userId)\r\n        //\r\n        this.props.getUserProfile(userId);\r\n        // setTimeout(()=>{\r\n        this.props.getStatus(userId);\r\n        // }, 1000)\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.refreshMethod();\r\n\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        //na luboi chih update, poetomu stavim uslovie\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n         { this.refreshMethod() }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        //console.log(\"component render\")\r\n\r\n        return (\r\n            <Profile savePhoto={this.props.savePhoto}\r\n                isOwner={!this.props.match.params.userId}\r\n                {...this.props} profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                saveProfile={this.props.saveProfile} />\r\n        )\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent=withAuthRedirect(ProfileContainer);\r\n\r\n// let mapStateToPropsForRedirect=(state)=>({\r\n//     isAuth:state.auth.isAuth\r\n// });\r\n// AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\r\n\r\n// (props)=>{\r\n// if(!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n//\r\n// return <ProfileContainer {...props}/>}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    //console.log(\"mapStateToProps render\");\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n\r\n\r\n    })\r\n};\r\n// let withUrlDataContainerComponent=withRouter(AuthRedirectComponent);\r\n\r\nexport default compose(connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile\r\n}), withRouter)(ProfileContainer);\r\n;"],"sourceRoot":""}