{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/common/Alert/alert.js","components/common/Alert/alert2.js","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPostsForm/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","onClick","className","style","formSummaryControl","createField","Textarea","Input","type","Object","keys","contacts","map","key","s","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","statusHooks","setStatus","useEffect","onDoubleClick","onBlur","onChange","e","currentTarget","value","autoFocus","Alert","this","createAlert","prevProps","prevState","snapshot","props","show","JSON","parse","stringify","onCancel","onConfirm","onConfirmOrDismiss","onDismiss","onEscape","onOutsideClick","onOpen","onBeforeOpen","Swal","fire","then","result","hasOwnProperty","dismissalType","onClose","React","Component","defaultProps","allowEnterKey","allowEscapeKey","allowOutsideClick","animation","backdrop","background","buttonsStyling","cancelButtonClass","cancelButtonColor","cancelButtonText","confirmButtonClass","confirmButtonColor","confirmButtonText","customClass","focusCancel","focusConfirm","footer","heightAuto","html","input","inputAttributes","inputAutoTrim","inputClass","inputOptions","inputPlaceholder","inputValidator","inputValue","padding","position","preConfirm","reverseButtons","showCancelButton","showCloseButton","showConfirmButton","showLoaderOnConfirm","stopKeydownPropagation","text","title","width","Alert2","state","interpretedAlert","showDeclarative","setState","declarativeAlert","ProfileData","isOwner","toEditMode","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","src","descriptionBlock","photos","large","userPhoto","target","files","length","initialValues","formData","Post","item","message","likescount","maxLength10","maxLengthCreator","MyPostsReduxForm","required","MyPosts","memo","onButtonClick","posts","postsElements","reverse","p","id","postsBlock","dispatch","newPostText","reset","MyPostsContainer","connect","profilePage","actions","onButtonClickEventActionCreator","Profile","ProfileContainer","userId","match","params","authUserId","history","push","getUserProfile","getStatus","console","log","refreshMethod","compose","auth","isAuth","withRouter"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,iBAAmB,sCAAsC,UAAY,+BAA+B,SAAW,gC,0CCA1LD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,gKC+DVC,EADqBC,YAAkC,CAAEC,KAAM,eAA1CD,EAjDoD,SAAC,GAAsC,IAApCE,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC9G,OAEI,0BAAMC,SAAUH,GACZ,6BAEI,6BAAM,4BAAQI,QAAS,cAAjB,SAGLF,GAAS,yBAAKG,UAAWC,IAAMC,oBAC3BL,EADK,KAIV,iCAAM,uCAAN,IAAuBM,YAA6BC,IAAU,GAC1D,UAAW,YADf,KAMA,6BACI,uCADJ,IACqBD,YAA8BE,IAAO,GAAI,WAAY,cAE1E,6BACI,gDADJ,KAC+BF,YAA8BE,IAAO,GAAI,iBAAkB,GAAI,CAAEC,KAAM,cAGtG,6BACI,qDADJ,IAESH,YAA6BC,IAAU,GACxC,4BAA6B,2BAKrC,6BACI,uCADJ,KACsBG,OACbC,KAAKZ,EAAQa,UAAUC,KAAI,SAACC,GACzB,OAAO,yBAAKA,IAAKA,EAAKX,UAAWY,IAAEH,UAC/B,+BAAKE,EAAL,KAAYR,YAAYE,IAAO,GAAI,YAAcM,EAAKA,cCYvEE,EAvDoC,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,aAAyB,KAAXlB,MAGzCmB,oBAAS,IAH2C,mBAG7EC,EAH6E,KAGnEC,EAHmE,OAInDF,mBAASF,GAJ0C,mBAI7EK,EAJ6E,KAIhEC,EAJgE,KAOlFC,qBAAU,WAEND,EAAUN,KAAW,CAACA,IA6B1B,OACI,8BAEMG,GACE,6BACI,0BAAMK,cA7BG,WACrBJ,GAAY,KA4ByCJ,GAAU,cAG1DG,GACG,6BACI,2BAAOM,OA/BI,WAEvBL,GAAY,GACZH,EAAaD,IA4BkCU,SAjB5B,SAACC,GACpBL,EAAUK,EAAEC,cAAcC,QAgB+CC,WAAW,EAAMD,MAAOR,O,2CCnDnGU,E,kLA+IJC,KAAKC,gB,yCAGaC,EAAWC,EAAWC,GACxCJ,KAAKC,gB,oCAGS,IAAD,OACb,GAAKD,KAAKK,MAAMC,KAAhB,CACE,IAAID,EAAQE,KAAKC,MAAMD,KAAKE,UAAUT,KAAKK,eACtCA,EAAMK,gBACNL,EAAMM,iBACNN,EAAMO,0BACNP,EAAMQ,iBACNR,EAAMS,gBACNT,EAAMU,sBACNV,EAAMC,KACTN,KAAKK,MAAMW,SAAUX,EAAMW,OAAShB,KAAKK,MAAMW,QAC/ChB,KAAKK,MAAMY,cAAgBjB,KAAKK,MAAMY,eAC1CC,IAAKC,KAAL,eAAed,IAGde,MAAK,SAAAC,GACL,GAAIA,EAAOC,eAAe,WAAY,CACrC,IAAMC,EAAgBF,EAAM,QACxB,EAAKhB,MAAMK,UAA8B,WAAlBa,GAA8B,EAAKlB,MAAMK,WAChE,EAAKL,MAAMmB,SAA6B,UAAlBD,GAA6B,EAAKlB,MAAMmB,UAC9D,EAAKnB,MAAMS,UAA8B,QAAlBS,GAA2B,EAAKlB,MAAMS,WAC7D,EAAKT,MAAMU,gBAAoC,YAAlBQ,GAA+B,EAAKlB,MAAMU,iBACvE,EAAKV,MAAMQ,WAAa,EAAKR,MAAMQ,UAAUU,GAE9CF,EAAOC,eAAe,UAAY,EAAKjB,MAAMM,WAAa,EAAKN,MAAMM,UAAUU,GAC/E,EAAKhB,MAAMO,oBAAsB,EAAKP,MAAMO,mBAAmBS,S,+BAI1D,OAAO,S,GAnLCI,IAAMC,WAApB3B,EAyFE4B,aAAe,CACrBC,eAAgB,EAChBC,gBAAiB,EACjBC,mBAAoB,EACpBC,WAAY,EACZC,UAAW,EACXC,WAAa,KACbC,gBAAiB,EACjBC,kBAAoB,KACpBC,kBAAoB,UACpBC,iBAAmB,SACnBC,mBAAqB,KACrBC,mBAAqB,UACrBC,kBAAoB,KACpBC,YAAc,KACdC,aAAc,EACdC,cAAe,EACfC,OAAS,KACTC,YAAa,EACbC,KAAO,KACPC,MAAQ,KACRC,gBAAkB,GAClBC,eAAgB,EAChBC,WAAa,KACbC,aAAe,GACfC,iBAAmB,GACnBC,eAAiB,KACjBC,WAAa,GACbrC,aAAe,KACfP,SAAW,KACXc,QAAU,KACVb,UAAY,KACZC,mBAAqB,KACrBC,UAAY,KACZC,SAAW,KACXE,OAAS,KACTD,eAAiB,KACjBwC,QAAU,KACVC,SAAW,SACXC,WAAa,KACbC,gBAAiB,EACjBpD,MAAO,EACPqD,kBAAmB,EACnBC,iBAAkB,EAClBC,mBAAoB,EACpBC,qBAAsB,EACtBC,wBAAyB,EACzBC,KAAO,KACPC,MAAQ,KACRzF,KAAO,KACP0F,MAAQ,MA2CKnE,QCrIAoE,G,yDAlDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,iBAAkB,KAClBC,iBAAiB,GAJP,E,+DASZtE,KAAKuE,SAAS,CAAED,iBAAiB,M,yCAGf,IAAD,OACXD,EACJ,kBAAC,EAAD,CACEzD,mBAAoB,kBAAM,EAAK2D,SAAS,CAAEF,iBAAkB,QAC5D/D,MAAM,EACN0D,KAAM,uEACNC,MAAO,cACPzF,KAAM,YAGVwB,KAAKuE,SAAS,CAAEF,iBAAkBA,M,+BAG1B,IAAD,OACP,OACE,6BACGrE,KAAKoE,MAAMC,iBACZ,kBAAC,EAAD,CACEzD,mBAAoB,kBAAM,EAAK2D,SAAS,CAAED,iBAAiB,KAC3DhE,KAAMN,KAAKoE,MAAME,gBACjBX,kBAAkB,EAClBK,KAAM,gEACNC,MAAO,cACPzF,KAAM,SAER,uBAAGP,QAAS,kBAAM,EAAKoG,qBAAvB,2CAGA,6BACA,uBAAGpG,QAAS,kBAAM,EAAKuG,qBAAvB,gD,GA1Ca9C,cCqFf+C,EAAwC,SAAC,GAAsC,IAApC3G,EAAmC,EAAnCA,QAAS4G,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAC/D,OACI,6BACI,6BAAMD,GAAW,4BAAQzG,QAAS0G,GAAjB,QAAjB,KAGA,iCAAM,uCAAN,IAAuB7G,EAAQ8G,QAA/B,KAOA,6BACI,uCADJ,KACsB9G,EAAQ+G,UAE9B,6BACI,gDADJ,KAC+B/G,EAAQgH,eAAiB,MAAQ,MAE/DhH,EAAQgH,gBACL,6BACI,qDADJ,KACoChH,EAAQiH,2BAGhD,6BACI,uCADJ,KACsBtG,OACbC,KAAKZ,EAAQa,UAAUC,KACpB,SAACC,GACD,OAAO,kBAAC,EAAD,CAASA,IAAKA,EACjBmG,aAAcnG,EAAKoG,aAAcnH,EAAQa,SAASE,WAoBjEqG,EAA+B,SAAC,GAAoC,IAAlCF,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACzD,OAAO,yBAAK/G,UAAWY,IAAEH,UAAlB,KAA8B,2BAAIqG,GAAlC,IAAqDC,IAKjDE,EA9HyB,SAAC,GAAgF,IAA9ErH,EAA6E,EAA7EA,QAASkB,EAAoE,EAApEA,OAAQC,EAA4D,EAA5DA,aAAcyF,EAA8C,EAA9CA,QAASU,EAAqC,EAArCA,UAAYrH,EAAyB,EAAzBA,MAAOsH,EAAkB,EAAlBA,YAAkB,EACpFnG,oBAAS,GAD2E,mBAC7GC,EAD6G,KACnGC,EADmG,KAYpH,IAAItB,EAAU,OAAO,kBAACwH,EAAA,EAAD,MAgCrB,OACI,6BACI,6BAAK,yBAAKC,IAAK,8DACf,yBAAKrH,UAAWY,IAAE0G,kBACd,yBAAKD,IAAKzH,EAAQ2H,OAAOC,OAASC,IAAWzH,UAAWY,IAAE6G,YACzDjB,GAAW,2BAAOlG,KAAM,OAAQkB,SAlCjB,SAACC,GAAqC,IAAD,GAC7D,UAAIA,EAAEiG,OAAOC,aAAb,aAAI,EAAgBC,SAChBV,EAAUzF,EAAEiG,OAAOC,MAAM,OAiCrB,iCAAM,qCAAN,IAAoB,kBAAC,EAAD,CAAwB9H,MAAOA,EAAOiB,OAAQA,EAAQC,aAAcA,IAAxF,KACA,kCAAQE,EAAW,kBAAC,EAAD,CAAiB4G,cAAejI,EAASA,QAASA,EAAUE,SA7B1E,SAACgI,GAEdX,EAAYW,GAAU5E,MAClB,WACIhC,GAAY,SA2BX,kBAAC,EAAD,CAAatB,QAASA,EAAS4G,QAASA,EACrCC,WAAY,WAAQvF,GAAY,MAHpC,KAII,6BAAK,kBAAC,EAAD,CAAQrB,MAAOA,Q,4DC9CzBkI,EApBiB,SAAC5F,GAE7B,OAEI,yBAAKnC,UAAWY,IAAEoH,MAEd,yBAAKX,IAAK,6EACTlF,EAAM8F,QAGP,6BACI,8BACI,yBAAKZ,IAAK,sDACTlF,EAAM+F,e,QCfrBC,EAAYC,YAAiB,IAoCrBC,EAAiB5I,YAAuC,CAElEC,KAAM,eAFqBD,EAhCyD,SAAC0C,GAiBrF,OAEI,0BAAMrC,SAAUqC,EAAMxC,cAClB,6BACCQ,YAAmCC,IAAU,CAACkI,IAASH,GAAc,cAAgB,gBAAiB,KAKvG,6BACI,8C,QC0FDI,EA7GmBhF,IAAMiF,MAAK,YAAuC,IAArCC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,MAAUvG,EAAW,yCAyCvEwG,EAAgB,YAAID,GACvBE,UACAlI,KAAI,SAAAmI,GAAC,OAAI,kBAAC,EAAD,CAAOZ,QAASY,EAAEZ,QAAStH,IAAKkI,EAAEC,GAAIZ,WAAYW,EAAEX,gBAO9D,OAEI,yBAAKlI,UAAWY,IAAEmI,YACd,6BAAK,yCACD,6BACI,kBAACV,EAAD,eAAkBvI,SAXb,SAAC6B,EAAyBqH,GAC3CP,EAAc9G,EAAMsH,aACpBD,EAASE,YAAM,kBAS6C/G,MAUxD,yBAAKnC,UAAWY,IAAE8H,OACbC,O,QC1CNQ,EADSC,aAnCA,SAAClD,GACrB,MAAO,CACHwC,MAAOxC,EAAMmD,YAAYX,SAiC4E,CAACD,cAAca,IAAQC,iCAA5GH,CAA+Ib,GCbxJiB,EAbqB,SAAC,GAA6E,IAA5ErC,EAA2E,EAA3EA,YAAaD,EAA8D,EAA9DA,UAAWrH,EAAmD,EAAnDA,MAAO2G,EAA4C,EAA5CA,QAAS5G,EAAmC,EAAnCA,QAASkB,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,aAG3F,OACI,6BACI,kBAAC,EAAD,CAAaoG,YAAaA,EAAaD,UAAWA,EAAWrH,MAAOA,EACpE2G,QAASA,EAAS5G,QAASA,EAASkB,OAAQA,EAAQC,aAAcA,IAClE,kBAAC,EAAD,Q,eCWN0I,E,kDAEF,WAAYtH,GAAmB,uCAErBA,G,4DAMN,IAAIuH,GAAsB5H,KAAKK,MAAMwH,MAAMC,OAAOF,OAE7CA,IACDA,EAAS5H,KAAKK,MAAM0H,YACjBH,GAAU5H,KAAKK,MAAM2H,QAAQC,KAAK,UAGrCL,GAIJ5H,KAAKK,MAAM6H,eAAeN,GAE1B5H,KAAKK,MAAM8H,UAAUP,IALjBQ,QAAQC,IAAI,qE,0CAShBrI,KAAKsI,kB,yCAIUpI,EAAqBC,GAGhCH,KAAKK,MAAMwH,MAAMC,OAAOF,QAAU1H,EAAU2H,MAAMC,OAAOF,QAC1D5H,KAAKsI,kB,+BAQR,OACI,kBAAC,EAAD,CAASlD,UAAWpF,KAAKK,MAAM+E,UAC3BV,SAAU1E,KAAKK,MAAMwH,MAAMC,OAAOF,OAClC9J,QAASkC,KAAKK,MAAMvC,QACpBkB,OAAQgB,KAAKK,MAAMrB,OACnBC,aAAce,KAAKK,MAAMpB,aACzBoG,YAAarF,KAAKK,MAAMgF,YACxBtH,MAAOiC,KAAKK,MAAMtC,Y,GAlDH0D,IAAMC,WAkFtB6G,sBAA6BjB,aAdtB,SAAClD,GAEnB,MAAQ,CACJtG,QAASsG,EAAMmD,YAAYzJ,QAC3BkB,OAAQoF,EAAMmD,YAAYvI,OAC1B+I,WAAY3D,EAAMoE,KAAKZ,OACvBa,OAAQrE,EAAMoE,KAAKC,OACnB1K,MAAOqG,EAAMmD,YAAYxJ,SAOoC,CACjEmK,mBACAC,cACAlJ,iBACAmG,cACAC,kBACAqD,IANWH,CAMCZ","file":"static/js/3.f0d0a168.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3wrlI\",\"poiskRabotyPhoto\":\"ProfileInfo_poiskRabotyPhoto__28MWN\",\"userPhoto\":\"ProfileInfo_userPhoto__3S0fK\",\"contacts\":\"ProfileInfo_contacts__13Xn-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__27Vvm\",\"posts\":\"MyPosts_posts__3klq2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2x9zK\"};","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n//import { Contact } from \"./ProfileInfo\";\r\nimport { createField, Input, GetStringKeys ,Textarea } from \"../../common/formControls/formControls\"\r\nimport { reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport style from \"../../common/formControls/FormControls.module.css\";\r\nimport { profileType } from \"../../types/types\";\r\n\r\n\r\ntype propsType = {\r\n    profile: profileType\r\n}\r\ntype profileTypeKeys = GetStringKeys<profileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<profileType, propsType> & propsType>= ({ handleSubmit, profile, error }) => {\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                \r\n                <div>{<button onClick={() => { }}>save</button>} \r\n                \r\n                </div>\r\n                {error && <div className={style.formSummaryControl}>\r\n                    {error} </div>}\r\n\r\n                {/*<textarea value={aboutMe} cols=\"30\" rows=\"10\"/>*/}\r\n                <div> <b>About me</b>:{createField<profileTypeKeys>(Textarea, [],\r\n                    \"aboutMe\", \"about me\")} </div>\r\n\r\n                {/*<>{props.profile.contacts}</>*/}\r\n\r\n\r\n                <div>\r\n                    <b>Fullname</b>:{createField<profileTypeKeys> (Input, [], \"fullName\", \"Full name\")}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>: {createField <profileTypeKeys>(Input, [], \"lookingForAJob\", \"\", { type: \"checkbox\" })}\r\n                </div>\r\n\r\n                <div>\r\n                    <b>My professional skills</b>:\r\n                        {createField<profileTypeKeys>(Textarea, [],\r\n                        \"lookingForAJobDescription\", \"My professional skills\")}\r\n                </div>\r\n\r\n\r\n\r\n                <div>\r\n                    <b>contacts</b>: {Object\r\n                        .keys(profile.contacts).map((key) => {\r\n                            return <div key={key} className={s.contacts}>\r\n                                <b> {key}: {createField(Input, [], \"contacts.\" + key, key)}</b>\r\n                            </div>\r\n                        })}\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\nexport const ProfileDataReduxForm = reduxForm<profileType, propsType>({ form: 'editProfile' })(ProfileDataForm);\r\nexport default ProfileDataReduxForm;","import React, { useState, useEffect, ChangeEvent } from \"react\";\r\n\r\n\r\ntype propsType={\r\n    status:string,\r\n    updateStatus:(status:string)=>void,\r\n    error:any\r\n}\r\n\r\nconst ProfileStatusWithHooks:React.FC<propsType> = ({status, updateStatus, error}) => {\r\n    \r\n    //let stateWithSetState=useState(true);\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [statusHooks, setStatus] = useState(status);\r\n    \r\n\r\n    useEffect(() => {\r\n        \r\n        setStatus(status) }, [status])\r\n\r\n    /* let editMode=stateWithSetState[0];\r\n    let setEditMode=stateWithSetState[1]; */\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deActivateEditMode = () => {\r\n    \r\n        setEditMode(false);\r\n        updateStatus(status);\r\n        \r\n\r\n\r\n    }\r\n\r\n    /* if(status!==props.status)\r\n            { setStatus({status:props.status})} */\r\n\r\n\r\n\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode} >{status || \"no STATUS\"}</span>\r\n                </div>}\r\n\r\n            {editMode &&\r\n                <div>\r\n                    <input onBlur={deActivateEditMode} onChange={onStatusChange} autoFocus={true} value={statusHooks} />\r\n                    \r\n                </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n\r\nclass Alert extends React.Component {\r\n\tstatic propTypes = {\r\n\t\tallowEnterKey : PropTypes.bool,\r\n\t\tallowEscapeKey : PropTypes.bool,\r\n\t\tallowOutsideClick : PropTypes.bool,\r\n\t\tanimation : PropTypes.bool,\r\n\t\tbackdrop : PropTypes.bool,\r\n\t\tbackground : PropTypes.string,\r\n\t\tbuttonsStyling : PropTypes.bool,\r\n\t\tcancelButtonClass : PropTypes.string,\r\n\t\tcancelButtonColor : PropTypes.string,\r\n\t\tcancelButtonText : PropTypes.string,\r\n\t\tconfirmButtonClass : PropTypes.string,\r\n\t\tconfirmButtonColor : PropTypes.string,\r\n\t\tconfirmButtonText : PropTypes.string,\r\n\t\tcustomClass : PropTypes.string,\r\n\t\tfocusCancel : PropTypes.bool,\r\n\t\tfocusConfirm : PropTypes.bool,\r\n\t\tfooter : PropTypes.string,\r\n\t\theightAuto : PropTypes.bool,\r\n\t\thtml : PropTypes.string,\r\n\t\tinput : PropTypes.oneOf(\r\n\t\t\t[\r\n\t\t\t\t'checkbox',\r\n\t\t\t\t'email',\r\n\t\t\t\t'file',\r\n\t\t\t\t'number',\r\n\t\t\t\t'password',\r\n\t\t\t\t'radio',\r\n\t\t\t\t'range',\r\n\t\t\t\t'select',\r\n\t\t\t\t'tel',\r\n\t\t\t\t'text',\r\n\t\t\t\t'textarea',\r\n\t\t\t\t'url',\r\n\t\t\t]\r\n\t\t),\r\n\t\tinputAttributes : PropTypes.object,\r\n\t\tinputAutoTrim : PropTypes.bool,\r\n\t\tinputClass : PropTypes.string,\r\n\t\tinputOptions : PropTypes.object,\r\n\t\tinputPlaceholder : PropTypes.string,\r\n\t\tinputValidator : PropTypes.func,\r\n\t\tinputValue : PropTypes.string,\r\n\t\tonBeforeOpen : PropTypes.func,\r\n\t\tonCancel : PropTypes.func,\r\n\t\tonClose : PropTypes.func,\r\n\t\tonConfirm : PropTypes.func,\r\n\t\tonConfirmOrDismiss : PropTypes.func,\r\n\t\tonDismiss : PropTypes.func,\r\n\t\tonEscape : PropTypes.func,\r\n\t\tonOpen : PropTypes.func,\r\n\t\tonOutsideClick : PropTypes.func,\r\n\t\tpadding : PropTypes.string,\r\n\t\tpreConfirm : PropTypes.func,\r\n\t\tposition : PropTypes.oneOf(\r\n\t\t\t[\r\n\t\t\t\t'bottom',\r\n\t\t\t\t'bottom-end',\r\n\t\t\t\t'bottom-start',\r\n\t\t\t\t'center',\r\n\t\t\t\t'center-end',\r\n\t\t\t\t'center-start',\r\n\t\t\t\t'top',\r\n\t\t\t\t'top-end',\r\n\t\t\t\t'top-start',\r\n\t\t\t]\r\n\t\t),\r\n\t\treverseButtons : PropTypes.bool,\r\n\t\tshow : PropTypes.bool,\r\n\t\tshowCancelButton : PropTypes.bool,\r\n\t\tshowCloseButton : PropTypes.bool,\r\n\t\tshowConfirmButton : PropTypes.bool,\r\n\t\tstopKeydownPropagation : PropTypes.bool,\r\n\t\tshowLoaderOnConfirm : PropTypes.bool,\r\n\t\ttext : PropTypes.string,\r\n\t\ttitle : PropTypes.string,\r\n\t\ttype : PropTypes.oneOf(\r\n\t\t\t[\r\n\t\t\t\t'info',\r\n\t\t\t\t'error',\r\n\t\t\t\t'question',\r\n\t\t\t\t'success',\r\n\t\t\t\t'warning',\r\n\t\t\t]\r\n\t\t),\r\n\t\twidth : PropTypes.string,\r\n\t};\r\n\t\r\n\tstatic defaultProps = {\r\n\t\tallowEnterKey : true,\r\n\t\tallowEscapeKey : true,\r\n\t\tallowOutsideClick : true,\r\n\t\tanimation : true,\r\n\t\tbackdrop : true,\r\n\t\tbackground : null,\r\n\t\tbuttonsStyling : true,\r\n\t\tcancelButtonClass : null,\r\n\t\tcancelButtonColor : '#999999',\r\n\t\tcancelButtonText : 'Cancel',\r\n\t\tconfirmButtonClass : null,\r\n\t\tconfirmButtonColor : '#5B6ABF',\r\n\t\tconfirmButtonText : 'OK',\r\n\t\tcustomClass : null,\r\n\t\tfocusCancel : false,\r\n\t\tfocusConfirm : true,\r\n\t\tfooter : null,\r\n\t\theightAuto : true,\r\n\t\thtml : null,\r\n\t\tinput : null,\r\n\t\tinputAttributes : {},\r\n\t\tinputAutoTrim : true,\r\n\t\tinputClass : null,\r\n\t\tinputOptions : {},\r\n\t\tinputPlaceholder : '',\r\n\t\tinputValidator : null,\r\n\t\tinputValue : '',\r\n\t\tonBeforeOpen : null,\r\n\t\tonCancel : null,\r\n\t\tonClose : null,\r\n\t\tonConfirm : null,\r\n\t\tonConfirmOrDismiss : null,\r\n\t\tonDismiss : null,\r\n\t\tonEscape : null,\r\n\t\tonOpen : null,\r\n\t\tonOutsideClick : null,\r\n\t\tpadding : null,\r\n\t\tposition : 'center',\r\n\t\tpreConfirm : null,\r\n\t\treverseButtons : false,\r\n\t\tshow : false,\r\n\t\tshowCancelButton : false,\r\n\t\tshowCloseButton : false,\r\n\t\tshowConfirmButton : true,\r\n\t\tshowLoaderOnConfirm : false,\r\n\t\tstopKeydownPropagation : true,\r\n\t\ttext : null,\r\n\t\ttitle : null,\r\n\t\ttype : null,\r\n\t\twidth : null,\r\n\t};\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.createAlert();\r\n\t}\r\n\t\r\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\r\n\t\tthis.createAlert();\r\n\t}\r\n\t\r\n\tcreateAlert() {\r\n\t\tif (!this.props.show) { return; }\r\n    let props = JSON.parse(JSON.stringify(this.props));\r\n\t\tdelete props.onCancel;\r\n\t\tdelete props.onConfirm;\r\n\t\tdelete props.onConfirmOrDismiss;\r\n\t\tdelete props.onDismiss;\r\n\t\tdelete props.onEscape;\r\n\t\tdelete props.onOutsideClick;\r\n\t\tdelete props.show;\r\n\t\tif (this.props.onOpen) { props.onOpen = this.props.onOpen; }\r\n\t\tif (this.props.onBeforeOpen) { this.props.onBeforeOpen(); }\r\n\t\tSwal.fire( {...props})\r\n\t\t\t\r\n\t\t\r\n\t\t.then(result => {\r\n\t\t\tif (result.hasOwnProperty('dismiss')) {\r\n\t\t\t\tconst dismissalType = result['dismiss'];\r\n\t\t\t\tif (this.props.onCancel && dismissalType === 'cancel') { this.props.onCancel(); }\r\n\t\t\t\tif (this.props.onClose && dismissalType === 'close') { this.props.onClose(); }\r\n\t\t\t\tif (this.props.onEscape && dismissalType === 'esc') { this.props.onEscape(); }\r\n\t\t\t\tif (this.props.onOutsideClick && dismissalType === 'overlay') { this.props.onOutsideClick(); }\r\n\t\t\t\tif (this.props.onDismiss) { this.props.onDismiss(dismissalType); }\r\n\t\t\t}\r\n\t\t\tif (result.hasOwnProperty('value') && this.props.onConfirm) { this.props.onConfirm(result); }\r\n\t\t\tif (this.props.onConfirmOrDismiss) { this.props.onConfirmOrDismiss(result); }\r\n\t\t});\r\n\t}\r\n\t\r\n\trender() { return null; }\r\n}\r\n\r\nexport default Alert;","import Alert from './alert';\r\nimport React, { Component } from 'react';\r\nimport s from './alert.module.css';\r\n\r\nclass Alert2 extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      interpretedAlert: null,\r\n      showDeclarative: false,\r\n    };\r\n  }\r\n\r\n  declarativeAlert() {\r\n    this.setState({ showDeclarative: true });\r\n  }\r\n\r\n  interpretedAlert() {\r\n    const interpretedAlert = (\r\n      <Alert\r\n        onConfirmOrDismiss={() => this.setState({ interpretedAlert: null })}\r\n        show={true}\r\n        text={'This one is dynamically added and removed from the render() function'}\r\n        title={'Interpreted'}\r\n        type={'warning'}\r\n      />\r\n    );\r\n    this.setState({ interpretedAlert: interpretedAlert });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.interpretedAlert}\r\n        <Alert\r\n          onConfirmOrDismiss={() => this.setState({ showDeclarative: false })}\r\n          show={this.state.showDeclarative}\r\n          showCancelButton={true}\r\n          text={'This one is declaratively rendered and toggled based on state'}\r\n          title={'Declarative'}\r\n          type={'info'}\r\n        />\r\n        <p onClick={() => this.interpretedAlert()}>\r\n          Click here to see the interpreted alert\r\n        </p>\r\n        <br />\r\n        <p onClick={() => this.declarativeAlert()}>\r\n          Click here to see the declarative alert\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Alert2; \r\n","import React, { useState, useEffect,FC, ChangeEvent } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileDataForm from \"./ProfileDataForm\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport Alert2 from \"../../common/Alert/alert2\"\r\nimport { profileType, contactsType } from \"../../types/types\";\r\nimport { type } from \"os\";\r\ntype propsType={\r\n    saveProfile:(formData:profileType) => Promise<any>,\r\n    savePhoto:(file:File)=>void,\r\n    error:any,\r\n    isOwner:boolean,\r\n    profile:profileType|null,\r\n    status:string,\r\n    updateStatus:(status:string)=>void\r\n}\r\nconst ProfileInfo:React.FC<propsType> = ({ profile, status, updateStatus, isOwner, savePhoto,  error, saveProfile }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n/*     const [isSaveProfile,setIsSaveProfileCome]=useState(false)\r\n    \r\n    useEffect(function(){\r\n        if(!setIsSaveProfileCome(false)){\r\n\r\n        setEditMode(false)\r\n        \r\n        \r\n    } \r\n      }, [isSaveProfile])  */\r\n    if(!profile){ return <Preloader/>}\r\n  \r\n\r\n    const onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n\r\n        }\r\n\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        // todo: remove then\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n /*    const onSubmit = (formData:any) => {\r\n        //saveProfile(formData);\r\n        //setEditMode(false)\r\n       saveProfile(formData)\r\n       setIsSaveProfileCome(true)\r\n       /*  .then(\r\n            () => {\r\n                s etEditMode(false);\r\n            }\r\n        ) */\r\n     \r\n        \r\n\r\n\r\n    return (\r\n        <div>\r\n            <div><img src={\"https://klike.net/uploads/posts/2019-01/1547365376_1.jpg\"} /></div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.userPhoto} />\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n                <div> <b>Status</b> <ProfileStatusWithHooks error={error} status={status} updateStatus={updateStatus} /> </div>\r\n                <div>  {editMode ? <ProfileDataForm initialValues={profile} profile={profile}  onSubmit={onSubmit} \r\n                  /> :\r\n                 <ProfileData profile={profile} isOwner={isOwner}\r\n                    toEditMode={() => { setEditMode(true) }} />} </div>\r\n                    <div><Alert2 error={error}/></div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\n type ProfileDataType={\r\n    profile:profileType,\r\n    isOwner:boolean,\r\n    toEditMode:()=>void\r\n\r\n} \r\n\r\nconst ProfileData:React.FC<ProfileDataType> = ({ profile, isOwner, toEditMode }) => {\r\n    return (\r\n        <div>\r\n            <div>{isOwner && <button onClick={toEditMode}>edit</button>} </div>\r\n\r\n            {/*<textarea value={aboutMe} cols=\"30\" rows=\"10\"/>*/}\r\n            <div> <b>About me</b> {profile.aboutMe} </div>\r\n            {/*     <div>{\"Poisk raboty:\" + profile.lookingForAJobDescription}</div>\r\n            <div>{profile.lookingForAJob === true ?\r\n                <img className={s.poiskRabotyPhoto} src={\"https://ruherald.com/wp-content/uploads/2018/06/jobs5.jpg\"} /> : null}</div> */}\r\n            {/*<>{props.profile.contacts}</>*/}\r\n\r\n\r\n            <div>\r\n                <b>Fullname</b>  {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>contacts</b>: {Object\r\n                    .keys(profile.contacts).map(                   \r\n                        (key) => {\r\n                        return <Contact key={key}\r\n                            contactTitle={key} contactValue={profile.contacts[key as keyof contactsType]}  />\r\n                    })}\r\n            </div>\r\n            {/*    <div>\r\n                <div>{profile.contacts.facebook}</div>\r\n                <div>{profile.contacts.youtube}</div>\r\n                <div>{profile.contacts.vk}</div>\r\n                <div>{profile.contacts.instagram}</div>\r\n                <div>{profile.contacts.github}</div>\r\n                <div>{profile.contacts.twitter}</div>\r\n                <div>{profile.contacts.website}</div>\r\n            </div> */}\r\n        </div>\r\n\r\n    )\r\n}\r\n type ContactType={\r\n    contactValue:any,\r\n    contactTitle:any\r\n} \r\nexport const Contact:React.FC<ContactType>= ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contacts}>  <b>{contactTitle}</b>:{contactValue}\r\n    </div>\r\n\r\n\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport { postsType } from \"../../../types/types\";\r\nimport s from \"./Post.module.css\";\r\ntype propsType={\r\n    message:string\r\n    likescount:number\r\n}\r\nconst Post:React.FC<propsType>= (props) => {\r\n\r\n    return (\r\n\r\n        <div className={s.item}>\r\n\r\n            <img src={\"https://cdn3.iconfinder.com/data/icons/many-peoples-vol-2/512/16-512.png\"}/>\r\n            {props.message}\r\n\r\n\r\n            <div>\r\n                <span>\r\n                    <img src={\"https://img.icons8.com/plasticine/2x/like--v1.png\"}/>\r\n                    {props.likescount}\r\n                </span>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Post;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { maxLengthCreator,  required} from \"../../../validators/validators\";\r\nimport { createField, GetStringKeys, Textarea } from \"../../common/formControls/formControls\";\r\n\r\nconst maxLength10=maxLengthCreator(10);\r\ntype propsType={\r\n\r\n}\r\nconst MyPostsForm:React.FC<InjectedFormProps<MyPostsValuesType,propsType>&propsType>  = (props) => {\r\n\r\n    //let newPost = React.createRef();\r\n\r\n    // let onButton = () => {\r\n    //     props.onButtonClick();\r\n        // eslint-disable-next-line no-undef\r\n        // props.dispatch(onButtonClickEventActionCreator());    }\r\n    //let onPostChange = (e) => {\r\n    //     // let text = newPost.current.value;\r\n    //     let text = e.target.value;\r\n    //     props.updateNewPostText(text);\r\n    //     // let action=updateNewPostTextActionCreator(text);\r\n    //     // props.dispatch(action);\r\n    // }\r\n    // let newPostText = props.newPostText;\r\n    \r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n            {createField<MyPostsValuesTypeKeys>(Textarea, [required,maxLength10], \"newPostText\",  \"enter message\", { })}\r\n               \r\n               \r\n            </div>\r\n\r\n            <div>\r\n                <button >Press</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n export const MyPostsReduxForm=reduxForm<MyPostsValuesType,propsType>({\r\n    // a unique name for the form\r\n    form: 'MyPostsForm'\r\n})(MyPostsForm);\r\n\r\nexport type MyPostsValuesType={\r\n    newPostText:string\r\n}\r\n\r\ntype MyPostsValuesTypeKeys = GetStringKeys<MyPostsValuesType>\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport { MyPostsReduxForm, MyPostsValuesType } from \"../MyPostsForm/MyPostsForm\";\r\nimport { reset } from 'redux-form'\r\nimport { render } from \"@testing-library/react\";\r\nimport { postsType } from \"../../types/types\";\r\n\r\n//window.props=[];\r\ntype propsType=mapStateToPropsType&mapDispatchToPropsType\r\nexport type mapStateToPropsType={\r\n    posts:Array<postsType>\r\n}\r\nexport type mapDispatchToPropsType={\r\n    onButtonClick:(newPostText:string)=>void\r\n\r\n}\r\nconst MyPosts:React.FC<propsType>=React.memo(({onButtonClick, posts, ...props})=>  {\r\n    /* window.props.push(props);\r\n    console.log(\"render\");\r\n    console.log(props); */\r\n\r\n\r\n    //let newPost = React.createRef();\r\n    // let onButton = () => {\r\n    //     props.onButtonClick();\r\n    //     // eslint-disable-next-line no-undef\r\n    //     // props.dispatch(onButtonClickEventActionCreator());\r\n    //\r\n    // }\r\n    //\r\n    // let onPostChange = (e) => {\r\n    //     // let text = newPost.current.value;\r\n    //     let text = e.target.value;\r\n    //     props.updateNewPostText(text);\r\n    //     // let action=updateNewPostTextActionCreator(text);\r\n    //     // props.dispatch(action);\r\n    // }\r\n    //\r\n    // let newPostText = props.newPostText;\r\n    /* componentDidUpdate() {\r\n        console.log(\"componentDidUpdate\")\r\n    } */\r\n  /*   componentDidMount (){\r\n        setTimeout(()=>{\r\n            this.setState({a:12})\r\n        },3000)\r\n\r\n    } */\r\n   /*  shouldComponentUpdate(nextProps,nextState){\r\n      return  nextProps !=this.props || nextState!=this.state \r\n\r\n    }  */\r\n\r\n    /* \r\n        console.log(\"render\");\r\n        console.log(props); */\r\n\r\n        let postsElements = [...posts]\r\n        .reverse()\r\n        .map(p => <Post  message={p.message} key={p.id} likescount={p.likescount} />);\r\n        let addNewPostText = (value:MyPostsValuesType, dispatch:any) => {\r\n            onButtonClick(value.newPostText);\r\n            dispatch(reset('MyPostsForm'))\r\n        }\r\n\r\n        \r\n        return (\r\n\r\n            <div className={s.postsBlock}>\r\n                <div><h3> My post </h3>\r\n                    <div>\r\n                        <MyPostsReduxForm onSubmit={addNewPostText} {...props} />\r\n                    </div>\r\n                    {/*<div>*/}\r\n                    {/*    <textarea onChange={onPostChange} placeholder={\"enter svoi posty\"} value={newPostText}/>*/}\r\n                    {/*</div>*/}\r\n                    {/*<div>*/}\r\n                    {/*    <button onClick={onButton}>Add post</button>*/}\r\n                    {/*</div>*/}\r\n\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n)\r\n// function MyPostsForm (props) {\r\n//\r\n//     //let newPost = React.createRef();\r\n//\r\n//     // let onButton = () => {\r\n//     //     props.onButtonClick();\r\n//     // eslint-disable-next-line no-undef\r\n//     // props.dispatch(onButtonClickEventActionCreator());    }\r\n//     //let onPostChange = (e) => {\r\n//     //     // let text = newPost.current.value;\r\n//     //     let text = e.target.value;\r\n//     //     props.updateNewPostText(text);\r\n//     //     // let action=updateNewPostTextActionCreator(text);\r\n//     //     // props.dispatch(action);\r\n//     // }\r\n//     // let newPostText = props.newPostText;\r\n//     return (\r\n//\r\n//         <form onSubmit={props.handleSubmit} >\r\n//             <div>\r\n//                 < Field   name={\"newPostText\"} component={\"textarea\"}\r\n//                           placeholder={\"Enter your post\"} validate={[required, maxLength]} typeField={textareaForm}/>\r\n//             </div>\r\n//\r\n//             <div>\r\n//                 <button >Press</button>\r\n//             </div>\r\n//         </form>\r\n//     )\r\n// }\r\n// const MyPostsReduxForm=reduxForm({\r\n//     // a unique name for the form\r\n//     form: 'MyPostsForm'\r\n// })(MyPostsForm);\r\nexport default MyPosts;","import {actions} from \"../../../redux/profileReducer\";\r\nimport MyPosts, { mapDispatchToPropsType, mapStateToPropsType } from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport { appStateType } from \"../../../redux/reduxStoreNew\";\r\n\r\nconst mapStateToProps = (state:appStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    } as mapStateToPropsType\r\n}\r\n/* \r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        onButtonClick: (newPostText:string) => {\r\n            dispatch(actions.onButtonClickEventActionCreator(newPostText));\r\n        }\r\n    }\r\n} */\r\n\r\n\r\n// const MyPostsContainer = (props) => {\r\n//\r\n//     return (\r\n//         <ContextStore.Consumer>{(store)=> {\r\n//             let state = store.getState();\r\n//             let onButtonClick = () => {\r\n//                 // eslint-disable-next-line no-undef\r\n//                 store.dispatch(onButtonClickEventActionCreator());\r\n//             }\r\n//             let onPostChange = (text) => {\r\n//                 let action = updateNewPostTextActionCreator(text);\r\n//                 store.dispatch(action);\r\n//             }\r\n//             return(<MyPosts updateNewPostText={(onPostChange)} onButtonClick={(onButtonClick)} posts={state.profilePage.posts}\r\n//                      newPostText={state.profilePage.newPostText}/>)}}\r\n//\r\n//         </ContextStore.Consumer>\r\n//     )}\r\n\r\n\r\nconst MyPostsContainer= connect<mapStateToPropsType,mapDispatchToPropsType,{},appStateType>(mapStateToProps, {onButtonClick:actions.onButtonClickEventActionCreator} )(MyPosts);\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport { profileType } from \"../types/types\";\r\n\r\ntype propsType={\r\n    saveProfile:(formData:profileType) => Promise<any>,\r\n    savePhoto:(file:File)=>void,\r\n    error:any,\r\n    isOwner:boolean,\r\n    profile:profileType|null,\r\n    status:string,\r\n    updateStatus:(status:any)=>void\r\n}\r\nconst Profile:React.FC<propsType> = ({saveProfile, savePhoto, error, isOwner, profile, status, updateStatus}) => {\r\n  \r\n    \r\n    return (\r\n        <div>\r\n            <ProfileInfo saveProfile={saveProfile} savePhoto={savePhoto} error={error} \r\n            isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { getStatus, getUserProfile, updateStatus, savePhoto, saveProfile } from \"../../redux/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter,RouteComponentProps } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { appStateType } from \"../../redux/reduxStoreNew\";\r\nimport { profileType } from \"../types/types\";\r\n//import {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype mapDispatchToPropsType={\r\n    \r\n    getUserProfile:(userId:number)=>void,\r\n    getStatus:(userId:number)=>{},\r\n    updateStatus:(status:string)=>{},\r\n    savePhoto:(file:File)=>void,\r\n    saveProfile:(profile:profileType) => Promise<any>\r\n\r\n}\r\n type pathParamType={\r\n    userId:string\r\n    /* authUserId:any,\r\n    profile:profileType,\r\n    status:string,\r\n    error:any */\r\n\r\n\r\n} \r\ntype withRouterType=RouteComponentProps<pathParamType>\r\ntype mapStateToPropsType=ReturnType<typeof mapStateToProps>\r\ntype propsType=mapDispatchToPropsType&mapStateToPropsType&withRouterType\r\nclass ProfileContainer extends React.Component <propsType> {\r\n    \r\n    constructor(props: propsType) {\r\n        \r\n        super(props);\r\n    }\r\n\r\n    refreshMethod() {\r\n\r\n       \r\n        let userId:number|null = +this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authUserId\r\n        } if (!userId) { this.props.history.push(\"/login\") }\r\n        //axios.get(`https://social-network.samuraijs.com/api/1.0/profile/`+userId)\r\n        //\r\n        if(!userId){\r\n            console.log(\"ID should exists in URI params or in state ('authorizedUserId')\")\r\n        }\r\n        else{\r\n        this.props.getUserProfile(userId);\r\n        \r\n        this.props.getStatus(userId)}\r\n           }\r\n    componentDidMount() {\r\n\r\n        this.refreshMethod();\r\n\r\n\r\n    }\r\n    componentDidUpdate(prevProps:propsType, prevState:propsType) {\r\n        \r\n        //na luboi chih update, poetomu stavim uslovie\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n         { this.refreshMethod() }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        //console.log(\"component render\")\r\n\r\n        return (\r\n            <Profile savePhoto={this.props.savePhoto}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                saveProfile={this.props.saveProfile}\r\n                error={this.props.error} />\r\n        )\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent=withAuthRedirect(ProfileContainer);\r\n\r\n// let mapStateToPropsForRedirect=(state)=>({\r\n//     isAuth:state.auth.isAuth\r\n// });\r\n// AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\r\n\r\n// (props)=>{\r\n// if(!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n//\r\n// return <ProfileContainer {...props}/>}\r\n\r\n\r\nlet mapStateToProps = (state:appStateType) => {\r\n    //console.log(\"mapStateToProps render\");\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n        error: state.profilePage.error \r\n\r\n\r\n    })\r\n};\r\n// let withUrlDataContainerComponent=withRouter(AuthRedirectComponent);\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile\r\n}), withRouter)(ProfileContainer);\r\n;"],"sourceRoot":""}