{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogForm/DialogForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","avatar","src","name","Message","message","maxLength50","maxLengthCreator","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","validate","required","placeholder","component","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newPostTextInDialogs","compose","connect","dispatch","onButtonClickEventMessageActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,0B,+FCwBnMC,EApBI,SAACC,GAChB,IAAIC,EAAO,WAAaD,EAAME,GAC9B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAE/B,kBAAC,IAAD,CAASC,GAAIN,GACT,6BACI,yBAAKE,UAAWC,IAAEI,OAAQC,IAAKT,EAAMQ,UAEzC,6BACKR,EAAMU,SCmBZC,EA7BC,SAACX,GAeb,OACI,yBAAKG,UAAWC,IAAEC,QAId,yBAAKF,UAAWC,IAAEQ,SACbZ,EAAMY,W,kDCdjBC,EAAYC,YAAiB,IAiCpBC,EAROC,YAAU,CAE5BC,KAAM,cAFYD,EAxBH,SAAChB,GAUhB,OAEI,0BAAMkB,SAAUlB,EAAMmB,cAElB,6BACI,kBAACC,EAAA,EAAD,CAASV,KAAM,uBAAwBW,SAAU,CAACC,IAAST,GAAcU,YAAa,qBAC/EC,UAAWC,OAEtB,6BACI,8CCWDC,EApCC,SAAC1B,GAEb,IAAI2B,EAAQ3B,EAAM4B,YAGdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMF,OAAQwB,EAAExB,OAAQN,GAAI8B,EAAE9B,QAC3F+B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,aAWnE,OACI,yBAAKT,UAAWC,IAAE0B,SACd,yBAAK3B,UAAWC,IAAEgC,cACbP,GAEL,yBAAK1B,UAAWC,IAAE8B,UACbD,EACD,6BACI,kBAAC,EAAD,CAAiBf,SAfb,SAACmB,GACjBrC,EAAMsC,YAAYD,EAAOE,6B,OC0ClBC,sBACXC,aArCoB,SAACd,GACrB,MAAO,CACHC,YAAYD,EAAMC,gBAGC,SAACc,GACxB,MAAO,CACHJ,YAAa,SAACC,GACVG,EAASC,YAAuCJ,SA4B7CC,CAEbd","file":"static/js/5.6635b391.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3SZvI\",\"dialogItems\":\"Dialogs_dialogItems__1NPjY\",\"active\":\"Dialogs_active__FIPNT\",\"messages\":\"Dialogs_messages__1QWa9\",\"message\":\"Dialogs_message__23Dch\",\"avatar\":\"Dialogs_avatar__3OSLs\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialog/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n\r\n            <NavLink to={path}>\r\n                <div>\r\n                    <img className={s.avatar} src={props.avatar}/>\r\n                </div>\r\n                <div>\r\n                    {props.name}\r\n                </div>\r\n            </NavLink>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n\r\n\r\n    // let onButtonClick = () => {\r\n    //\r\n    //\r\n    //     let text = newPost.current.value;\r\n    //     props.onButtonClickEvent(text);\r\n    //\r\n    // }\r\n    //\r\n    // let onPostChange = () => {\r\n    //     let text = newPost.current.value;\r\n    //     props.updateNewPostText(text);\r\n    // }\r\n    return (\r\n        <div className={s.dialog}>\r\n\r\n\r\n\r\n            <div className={s.message}>\r\n                {props.message}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {\r\n    onButtonClickEventMessageActionCreator,\r\n    updateNewPostTextMessageActionCreator\r\n} from \"../../../redux/dialogsReducer\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport { Textarea } from \"../../common/formControls/formControls\";\r\nimport { required, maxLengthCreator } from \"../../../validators/validators\";\r\n\r\nconst maxLength50=maxLengthCreator(50);\r\nconst DialogForm = (props) => {\r\n    // let state = props.dialogsPage;\r\n    // // let newPostTextMessage = state.newPostTextMessage;\r\n    // let onButtonClick = () => {\r\n    //     props.sendMessage();\r\n    // }\r\n    // let onPostChange = (elementObjectTarget) => {\r\n    //     let newPost = elementObjectTarget.target.value;\r\n    //     props.updateNewPostTextMessage(newPost);\r\n    // }\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n\r\n            <div>\r\n                <Field   name={\"newPostTextInDialogs\"} validate={[required,maxLength50]} placeholder={\"Enter your message\"}\r\n                       component={Textarea} />\r\n            </div>\r\n            <div>\r\n                <button >Press</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst DialogReduxForm=reduxForm({\r\n    // a unique name for the form\r\n    form: 'DialogForm'\r\n})(DialogForm);\r\n\r\n\r\n\r\n\r\nexport default DialogReduxForm;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogReduxForm from \"./DialogForm/DialogForm\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} avatar={d.avatar} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message}/>);\r\n    //let newPostTextMessage = state.newPostTextMessage;\r\n\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newPostTextInDialogs);\r\n    }\r\n    //let onPostChange = (elementObjectTarget) => {\r\n     //   let newPost = elementObjectTarget.target.value;\r\n     //    props.updateNewPostTextMessage(newPost);\r\n    // }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <div>\r\n                    <DialogReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {onButtonClickEventMessageActionCreator} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n//     return (<ContextStore.Consumer>{(store)=>{\r\n//         let state = store.getState().dialogsPage;\r\n//\r\n//         let onButtonClick = () => {\r\n//             store.dispatch(onButtonClickEventMessageActionCreator());\r\n//         }\r\n//         let onPostChange = (newPost) => {\r\n//             let action = updateNewPostTextMessageActionCreator(newPost);\r\n//             store.dispatch(action);}\r\n//             return(\r\n//             <Dialogs updateNewPostTextMessage={onPostChange} sendMessage={onButtonClick} dialogsPage={state}/>)}}\r\n// </ContextStore.Consumer>\r\n//\r\n//     )}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage:state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newPostTextInDialogs) => {\r\n            dispatch(onButtonClickEventMessageActionCreator(newPostTextInDialogs));\r\n        }\r\n        // updateNewPostTextMessage: (body) => {\r\n        //     dispatch(updateNewPostTextMessageActionCreator(body))\r\n        // }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//let AuthRedirectComponent=withAuthRedirect(Dialogs);\r\n// const mapStateToPropsForRedirect = (state) => {\r\n//     return {\r\n//\r\n//         isAuth: state.auth.isAuth\r\n//     }\r\n// }\r\n// AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\r\n\r\n    // (props)=>{\r\n    // if(!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n    //\r\n    // return <Dialogs {...props}/>}\r\n\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);\r\n\r\n\r\n\r\n"],"sourceRoot":""}